-- This text is generated by TrigEditPlus



Trigger { -- 테스트 인식 트리거 안 켜지면 패배 / 배포할 때 조건 always로 바꾸기
	players = {P7},
	conditions = {
		Always();
	},
	actions = {
		SetSwitch("Switch 39", Set);
	},
}

Trigger { -- 1피 아이디 인식
	players = {P1},
	conditions = {
		Memory(0x6D0FDC, Exactly, 1148810562);			
		Memory(0x6D0FE0, Exactly, 7037813);			
		Memory(0x6D0FE4, Exactly, 0);			
		Memory(0x6D0FE8, Exactly, 0);			
	},
	actions = {
		SetSwitch("Switch 39", Set);
	},
}

Trigger { -- 6피 아이디 인식
	players = {P1},
	conditions = {
		Memory(0x6D1090, Exactly, 1148810562);			
		Memory(0x6D1094, Exactly, 7037813);			
		Memory(0x6D1098, Exactly, 0);			
		Memory(0x6D109C, Exactly, 0);			
	},
	actions = {
		SetSwitch("Switch 39", Set);
	},
}

Trigger { -- 
	players = {Force1},
	conditions = {
		ElapsedTime(AtLeast, 3);
		Switch("Switch 39", Cleared);
	},
	actions = {
		DisplayText("\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\x13\x03테스트 버전은 플레이할 수 없습니다\r\n\r\n\r\n\r\n\r\n\r\n\r\n", 4);
		Wait(2000);
		Defeat();
	},
}

Trigger { -- 키인식C
	players = {P6},
	conditions = {
		Switch("Switch 7", Set);
		키인식("C", Exactly);
	},
	actions = {
		PreserveTrigger();
	},
}

Trigger { -- 키인식V
	players = {P6},
	conditions = {
		Switch("Switch 7", Set);
		키인식("V", Exactly);
	},
	actions = {
		PreserveTrigger();
		RemoveUnitAt(All, "Men", "Location 25", P8);
	},
}

Trigger { -- 키인식B
	players = {P6},
	conditions = {
		Switch("Switch 7", Set);
		키인식("B", Exactly);
	},
	actions = {
		PreserveTrigger();
		ModifyUnitEnergy(All, "Men", AllPlayers, "Location 25", 100);
		Order("Men", P8, "Location 25", Attack, "Location 25");
	},
}

Trigger { -- 키인식N
	players = {P6},
	conditions = {
		Switch("Switch 7", Set);
		키인식("N", Exactly);
	},
	actions = {
		PreserveTrigger();
	},
}

Trigger { -- 테스트용 스위치 / 배포할 때 조건 never로 바꾸기
	players = {P6},
	conditions = {
		Never();
	},
	actions = {
		SetSwitch("Switch 7", Set);
	},
}

Trigger { -- 2차 테스트 스위치 / 배포할 때 조건 never로 바꾸기
	players = {P6},
	conditions = {
		Never();
	},
	actions = {
		SetSwitch("Switch 40", Set);
	},
}

Trigger { -- 시민 6피한테 주기
	players = {P6},
	conditions = {
		Switch("Switch 7", Set);
	},
	actions = {
		PreserveTrigger();
		GiveUnits(1, "Choice", Force1, "Location 1", P6);
		GiveUnits(1, "강퇴", Force1, "Anywhere", P6);
	},
}

test1 = {}; 

table.insert(test1, {"마법 유닛 뽑기", "랜덤 유닛 뽑기"});
table.insert(test1, {7, 40});

for i=1,5 do -- 모든 플레이어 유닛 자동으로 뽑게 설정
for m=1,2 do
for j=1,2 do
Trigger { --
	players = {i-1},
	conditions = {
		Switch("Switch "..test1[2][j], Set);
		Bring(CurrentPlayer, AtLeast, 1, test1[1][m], "Location "..44+(2*i));
	},
	actions = {
		PreserveTrigger();
		Order(test1[1][m], CurrentPlayer, "Location "..44+(2*i), Move, "Location "..45+(2*i));
	},
}
end
end
end

Trigger { -- 재시작할 때 컴도 유닛 새로 뽑기
	players = {P6},
	conditions = {
		Switch("Switch 7", Set);
	},
	actions = {
		PreserveTrigger();
		Order("Choice", P1, "Location 146", Move, "Location 73");
		Order("Choice", P2, "Location 146", Move, "Location 73");
		Order("Choice", P3, "Location 146", Move, "Location 73");
		Order("Choice", P4, "Location 146", Move, "Location 73");
		Order("Choice", P5, "Location 146", Move, "Location 73");
	},
}

Trigger { -- 팀플존 지역에 컴 유닛 간 거 위치 고정
	players = {P1,P2,P4,P5},
	conditions = {
		Switch("Switch 7", Set);
		Bring(CurrentPlayer, AtLeast, 1, "Men", "Location 88");
	},
	actions = {
		PreserveTrigger();
		Order("Men", P1, "Location 88", Move, "Location 91");
		Order("Men", P2, "Location 88", Move, "Location 92");
		Order("Men", P3, "Location 88", Move, "Location 92");
		Order("Men", P4, "Location 88", Move, "Location 92");
		RemoveUnitAt(All, "Men", "Location 88", P5);
	},
}

Trigger { -- 팀플존 지역에 6피가면 컴유닛 6피한테 주기
	players = {P6},
	conditions = {
		Switch("Switch 7", Set);
		Bring(CurrentPlayer, AtLeast, 1, "Men", "Location 88");
	},
	actions = {
		PreserveTrigger();
		GiveUnits(All, "Men", P1, "Location 88", P6);
		GiveUnits(All, "Men", P2, "Location 88", P6);
		GiveUnits(All, "Men", P4, "Location 88", P6);
		RemoveUnitAt(All, "Men", "Location 88", P5);
		RemoveUnitAt(All, "Men", "Location 80", P8);
		RemoveUnitAt(All, "Men", "Location 80", P11);
	},
}

Trigger { -- Q키 8피 유닛 전부 제거
	players = {P6},
	conditions = {
		Switch("Switch 7", Set);
		키인식("Q", Exactly);
	},
	actions = {
		PreserveTrigger();
		RemoveUnitAt(All, "Men", "Location 214", P8);
	},
}

Trigger { -- 
	players = {P6},
	conditions = {
		Switch("Switch 7", Set);
		Switch("Switch 29", Set);
	},
	actions = {
		PreserveTrigger();
		SetCountdownTimer(SetTo, 18);
	},
}

Trigger { -- Z키 팀플존 카운트 타이머 끄기
	players = {P6},
	conditions = {
		Switch("Switch 7", Set);
		Switch("Switch 29", Set);
		키인식("Z", Exactly);
	},
	actions = {
		PreserveTrigger();
		SetSwitch("Switch 29", Clear);
		SetCountdownTimer(SetTo, 2);
	},
}

Trigger { -- Z키 팀플존 카운트 타이머 끄기 / 2차 테스트
	players = {P6},
	conditions = {
		Switch("Switch 40", Set);
		Switch("Switch 29", Set);
		키인식("Z", Exactly);
	},
	actions = {
		PreserveTrigger();
		SetSwitch("Switch 29", Clear);
		SetCountdownTimer(SetTo, 2);
	},
}

Trigger { -- X키 카운트 타이머 2초
	players = {P6},
	conditions = {
		Switch("Switch 7", Set);
		키인식("X", Exactly);
	},
	actions = {
		PreserveTrigger();
		SetCountdownTimer(SetTo, 2);
	},
}

Trigger { -- X키 카운트 타이머 2초 / 2차 테스트
	players = {P6},
	conditions = {
		Switch("Switch 40", Set);
		키인식("X", Exactly);
	},
	actions = {
		PreserveTrigger();
		SetCountdownTimer(SetTo, 2);
	},
}

Trigger { -- EUD 터보 트리거
	players = {P7},
	conditions = {
		Always();
	},
	actions = {
		PreserveTrigger();
		SetMemory(0x6509A0, SetTo, 0);
	},
}

Trigger { -- 8피 버러우 못하게 막기
	players = {P7},
	conditions = {
		ElapsedTime(AtLeast, 7);
		MemoryX(0x58CFF4, AtLeast, 16777216, 0xFF000000);
	},
	actions = {
		PreserveTrigger();
		SetMemoryX(0x58CFF4, SetTo, 0, 0xFF000000);

	},
}

Trigger { -- 8피 스팀팩 못하게 막기
	players = {P7},
	conditions = {
		MemoryX(0x58CFEC, AtLeast, 1, 0xFF);
	},
	actions = {
		PreserveTrigger();
		SetMemoryX(0x58CFEC, SetTo, 0, 0xFF);
	},
}

Trigger { -- 플레이어 브루들링은 항상 피통 100프로 유지
	players = {Force1},
	conditions = {
		Command(CurrentPlayer, AtLeast, 1, "브루들링");
	},
	actions = {
		PreserveTrigger();
		ModifyUnitHitPoints(All, "브루들링", AllPlayers, "Location 25", 100);
	},
}

Trigger { -- 킬수 & 미션 오브젝트
	players = {AllPlayers},
	conditions = {
		Always();
	},
	actions = {
		LeaderBoardKills("Any unit", "\x04KILL");
		SetMissionObjectives("\x041. 공중 유닛은 지상 판정을 받는다 [ 웹 등의 영향 받음 ]\r\n\x1F2. 벌처, 아칸 등의 유닛에게도 마인이 통한다\r\n\x043. 퀸의 브루들링과 고스트의 락다운을 모든 유닛에게 사용 가능\r\n\x1F4. 일부 마법 유닛의 기술이 기존 스타와 다르다\r\n\x045. 메딕은 힐을 할 때마다 마나가 아주아주 조금씩 회복된다\r\n\x1F6. 스카웃이 마법 유닛으로 취급되어 다크 아칸의 피드백이 통함\r\n\x047. 스카웃, 레이스, 영웅 배틀, 영웅 하템의 마나는 항상 100%로 고정");
	},
}

Trigger { -- 게임 시작 전 준비 / 난이도, 시민 생성
	players = {P7},
	conditions = {
		Always();
	},
	actions = {
		CreateUnit(1, "Easy Mode", "Location 65", P7);
		MoveUnit(1, "Easy Mode", P7, "Location 65", "Location 3");
		CreateUnit(1, "Normal Mode", "Location 65", P7);
		MoveUnit(1, "Normal Mode", P7, "Location 65", "Location 4");
		CreateUnit(1, "Hard Mode", "Location 65", P7);
		MoveUnit(1, "Hard Mode", P7, "Location 65", "Location 5");	
		CreateUnit(1, "Choice", "Location 65", P7);
		MoveUnit(1, "Choice", P7, "Location 65", "Location 2");
		SetInvincibility(Enable, "Choice", P7, "Location 1");
	},
}

for i=1,6 do -- 랜덤 뽑기 유닛 정렬 배치용 버러우 유닛 / 싱글 존 적 유닛
Trigger { --
	players = {P7},
	conditions = {
		Bring(P9, AtLeast, 1, "Hunter Killer (Hydralisk)", "Location "..44+(i*2));
	},
	actions = {
		PreserveTrigger();
		MoveLocation("Location "..12+(2*i), "Hunter Killer (Hydralisk)", P9, "Location "..44+(i*2));
		RemoveUnitAt(1, "Hunter Killer (Hydralisk)", "Location "..12+(i*2), P9);
		CreateUnitWithProperties(1, "Zerg Drone", "Location 65", P7, {
			clocked = false,
			burrowed = true,
			intransit = false,
			hallucinated = false,
			invincible = true,
			hitpoint = 100,
			shield = 100,
			energy = 100,
			resource = 0,
			hanger = 0,
		});
		MoveUnit(1, "Zerg Drone", P7, "Location 65", "Location "..12+(i*2));
	    GiveUnits(All, "Zerg Drone", P7, "Location "..44+(i*2), P9);
	},
}

Trigger { -- 싱글존 적 유닛 나오는 위치 드론
	players = {P7},
	conditions = {
		Bring(P9, AtLeast, 1, "Hunter Killer (Hydralisk)", "Location "..74+(2*i));
	},
	actions = {
		PreserveTrigger();
		MoveLocation("Location 97", "Hunter Killer (Hydralisk)", P9, "Location "..74+(2*i));
		RemoveUnitAt(1, "Hunter Killer (Hydralisk)", "Location 97", P9);
		CreateUnitWithProperties(1, "Zerg Drone", "Location 65", P7, {
			clocked = false,
			burrowed = true,
			intransit = false,
			hallucinated = false,
			invincible = true,
			hitpoint = 100,
			shield = 100,
			energy = 100,
			resource = 0,
			hanger = 0,
		});
		MoveUnit(1, "Zerg Drone", P7, "Location 65", "Location 97");
	    GiveUnits(All, "Zerg Drone", P7, "Location 97", P9);
	},
}
end

Trigger { -- 팀플존 적 유닛 나오는 위치 드론
	players = {P7},
	conditions = {
		Bring(P9, AtLeast, 1, "Hunter Killer (Hydralisk)", "Location 148");
	},
	actions = {
		PreserveTrigger();
		MoveLocation("Location 147", "Hunter Killer (Hydralisk)", P9, "Location 148");
		RemoveUnitAt(1, "Hunter Killer (Hydralisk)", "Location 147", P9);
		CreateUnitWithProperties(1, "Zerg Drone", "Location 65", P7, {
			clocked = false,
			burrowed = true,
			intransit = false,
			hallucinated = false,
			invincible = true,
			hitpoint = 100,
			shield = 100,
			energy = 100,
			resource = 0,
			hanger = 0,
		});
		MoveUnit(1, "Zerg Drone", P7, "Location 65", "Location 147");
	    GiveUnits(All, "Zerg Drone", P7, "Location 147", P9);
	},
}

singselct = {};

table.insert(singselct, {2, 1});
table.insert(singselct, {"나간 플레이어의 적 유닛 없애기", "나간 플레이어 적 유닛 안 없애기"});

for i=1,2 do -- 나간 플레이어 유닛 어떻게 할지 정하기
Trigger { --
	players = {P7},
	conditions = {
		Bring(P9, Exactly, singselct[1][i], "Infested Duran", "Location 6");
	},
	actions = {
		MoveLocation("Location 236", "Infested Duran", P9, "Location 6");
		RemoveUnitAt(1, "Infested Duran", "Location 236", P9);
		CreateUnit(1, singselct[2][i], "Location 65", P7);
		MoveUnit(1, singselct[2][i], P7, "Location 65", "Location 236");
	},
}
end

Trigger { -- 8피 초이스 시민 위치 고정
	players = {P7},
	conditions = {
		Bring(P7, AtLeast, 1, "Choice", "Location 1");
	},
	actions = {
		PreserveTrigger();
		MoveUnit(1, "Choice", P7, "Location 1", "Location 2");
	},
}

Trigger { -- 게임 시작 메시지 / 테스트 포함
	players = {Force1},
	conditions = {
		ElapsedTime(AtLeast, 2);
		Switch("Switch 7", Cleared);
		Switch("Switch 39", Set);
	},
	actions = {
		DisplayText("\x13\x1F싱글 팀플 컨트롤\r\n\r\n\x13\x17By \x16- \x16AntMouse\r\n\r\n\r\n\r\n\r\n", 0);
		Wait(2500);
		DisplayText("\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\x13\x03게임 안내\r\n\r\n\r\n\r\n", 0);
		PlayWAV("staredit\\wav\\sel.wav");
		Wait(2000);
		DisplayText("\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\x13\x03게임 안내\r\n\x13\x1F1. 라운드를 깨지 못해도 게임에서 나가지만 않으면 게임 내에서 무한 리트가 됩니다\r\n\r\n\r\n\r\n", 0);
		PlayWAV("staredit\\wav\\sel.wav");
		Wait(2000);
		DisplayText("\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\x13\x03게임 안내\r\n\x13\x1F1. 라운드를 깨지 못해도 게임에서 나가지만 않으면 게임 내에서 무한 리트가 됩니다\r\n\x13\x042. 이 맵에서 공중유닛은 지상 판정을 받습니다 [ 마인, 웹, 브루들링 등 통함 ]\r\n\r\n\r\n\r\n", 0);
		PlayWAV("staredit\\wav\\sel.wav");
		Wait(2000);
		SetDeaths(P7, SetTo, 1000, "Vespene Tank (Terran Type 2)"); -- 플레이어한테 시야 켜주기
		SetDeaths(P7, SetTo, 1000, "Vespene Tank (Terran Type 1)"); -- 최초 시민 주기
		SetDeaths(Force1, SetTo, 1000, "Vespene Sac (Zerg Type 2)"); -- 7피 동맹 (비콘 선택 해야하니까)
		CenterView("Location 2");
	},
}

Trigger { -- 
	players = {Force1},
	conditions = {
		ElapsedTime(AtLeast, 2);
		Switch("Switch 7", Set);
		Switch("Switch 39", Set);
	},
	actions = {
		DisplayText("\x13\x1F싱글 팀플 컨트롤\r\n\r\n\x13\x17By \x16- \x16AntMouse\r\n\r\n\r\n\r\n\r\n", 0);
		Wait(25);
		DisplayText("\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\x13\x03게임 안내\r\n\r\n\r\n\r\n", 0);
		PlayWAV("staredit\\wav\\sel.wav");
		Wait(2);
		DisplayText("\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\x13\x03게임 안내\r\n\x13\x1F1. 라운드를 깨지 못해도 게임에서 나가지만 않으면 게임 내에서 무한 리트가 됩니다\r\n\r\n\r\n\r\n", 0);
		PlayWAV("staredit\\wav\\sel.wav");
		Wait(2);
		DisplayText("\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\x13\x03게임 안내\r\n\x13\x1F1. 라운드를 깨지 못해도 게임에서 나가지만 않으면 게임 내에서 무한 리트가 됩니다\r\n\x13\x042. 이 맵에서 공중유닛은 지상 판정을 받습니다 [ 마인, 웹, 브루들링 등 통함 ]\r\n\r\n\r\n\r\n", 0);
		PlayWAV("staredit\\wav\\sel.wav");
		Wait(2);
		SetDeaths(P7, SetTo, 1000, "Vespene Tank (Terran Type 2)"); -- 플레이어한테 시야 켜주기
		SetDeaths(P7, SetTo, 1000, "Vespene Tank (Terran Type 1)");
		SetDeaths(Force1, SetTo, 1000, "Vespene Sac (Zerg Type 2)"); -- 7피 동맹 (비콘 선택 해야하니까)
		CenterView("Location 2");
	},
}

Trigger { -- 최초 난이도 선택 시민 주기
	players = {Force1},
	conditions = {
		Deaths(P7, AtLeast, 1000, "Vespene Tank (Terran Type 1)");
		Bring(P7, AtLeast, 1, "Choice", "Location 2");
	},
	actions = {
		SetDeaths(P7, SetTo, 0, "Vespene Tank (Terran Type 1)");
		GiveUnits(1, "Choice", P7, "Location 1", CurrentPlayer);
	},
}

mode1 = {};

table.insert(mode1, {"Easy Mode", "Normal Mode", "Hard Mode"});
table.insert(mode1, {"처음부터 하기", "다른 라운드부터 하기", "난이도 다시 선택"});

table.insert(mode1, {"\x07이지", "\x03노말", "\x08하드"});

mansu1 = {};

table.insert(mansu1, {AtMost, AtLeast});
table.insert(mansu1, {2, 3});

table.insert(mansu1, {26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,215,216,217,218,219,220,221,222,223,224});

for i=1,3 do -- 난이도 선택시
for m=1,2 do
Trigger { --
	players = {Force1},
	conditions = {
		CountdownTimer(mansu1[1][m], mansu1[2][m]);
		Deaths(P7, AtMost, 999+(10000*(m-1)), "Mineral Chunk (Type 2)");
		Deaths(P7, AtLeast, 10000*(m-1), "Mineral Chunk (Type 2)");
		Bring(CurrentPlayer, AtLeast, 1, "Choice", "Location "..2+i);
		Bring(P7, AtLeast, 1, mode1[1][i], "Location "..2+i);
	},
	actions = {
		PreserveTrigger();
		MoveUnit(1, "Choice", CurrentPlayer, "Location "..2+i, "Location 2");
		SetDeaths(P7, SetTo, 1000+(10000*(m-1)), "Mineral Chunk (Type 2)"); -- 다음 선택으로 넘어가기
		SetDeaths(Force1, SetTo, 1000*i, "Vespene Tank (Terran Type 2)"); -- 어떤 난이도 골랐는지 알려주기
		SetDeaths(P7, SetTo, i, "Vespene Sac (Zerg Type 2)"); -- 난이도 결정
		SetDeaths(P7, SetTo, 0, "Young Chrysalis"); -- 각종 초기화용
		SetDeaths(Force1, SetTo, 0, "Normal Mode"); -- 프로브 억제 초기화
		SetDeaths(Force1, SetTo, 1000, "Hard Mode"); -- 유닛 보존 초기화
		SetDeaths(Force1, SetTo, 1, "Kyadarin Crystal Formation"); -- 싱글존 유닛 알림 메시지
		SetDeaths(Force1, SetTo, 0, "Ruins"); -- 팀플존 유닛 알림 메시지
		
		RemoveUnitAt(1, "Easy Mode", "Location 3", P7);
		RemoveUnitAt(1, "Normal Mode", "Location 4", P7);
		RemoveUnitAt(1, "Hard Mode", "Location 5", P7);
		
		RemoveUnitAt(All, "Men", "Location 214", Force1); -- 싱글&팀플존 유닛 삭제
		RemoveUnitAt(All, "Men", "Location 214", P7);
		RemoveUnitAt(All, "Men", "Location 214", P8);
		RemoveUnitAt(All, "Men", "Location 214", P11);
		RemoveUnitAt(All, "Choice", "Location 146", Force1); -- 재도전 시민 삭제
		RemoveUnitAt(All, "Men", "Location 205", Force1); -- 대기 유닛 삭제
		RemoveUnitAt(All, "Men", "Location 206", Force1); -- 뽑기 유닛 삭제
		RemoveUnitAt(All, "Men", "Location 159", P8); -- 8피 팀플 대기 유닛 삭제
		RemoveUnitAt(All, "Men", "Location 110", P8); -- 8피 싱글 대기 유닛 삭제
		
		SetSwitch("Switch 19", Clear); -- 재도전 인식해서 타이머 3초 더주는 거 초기화
		SetSwitch("Switch 26", Set); -- 프로브 초기화 오류 방지
	},
}
end
end

for i=1,3 do -- 난이도 고른 거 알려주기
Trigger { --
	players = {Force1},
	conditions = {
		Deaths(CurrentPlayer, Exactly, 1000*i, "Vespene Tank (Terran Type 2)");
	},
	actions = {
		PreserveTrigger();
		SetDeaths(CurrentPlayer, SetTo, 0, "Vespene Tank (Terran Type 2)"); -- 어떤 난이도 골랐는지 알려주기	
		DisplayText("\x13\x1F──────────────\r\n\x13"..mode1[3][i].." \x04모드를 선택했습니다\r\n\x13\x1F──────────────\r\n\r\n\r\n\r\n\r\n\r\n", 0);		
		PlayWAV("staredit\\wav\\sel.wav");
	},
}
end

for m=1,2 do -- 초반, 게임 중 / 2번째 비콘 생산
Trigger { --
	players = {P7},
	conditions = {
		Deaths(P7, AtMost, 1999+(10000*(m-1)), "Mineral Chunk (Type 2)");
		Deaths(P7, AtLeast, 1000+(10000*(m-1)), "Mineral Chunk (Type 2)");
		
		Bring(P7, Exactly, 0, "Easy Mode", "Location 3");
		Bring(P7, Exactly, 0, "Normal Mode", "Location 4");
		Bring(P7, Exactly, 0, "Hard Mode", "Location 5");
	},
	actions = {
		PreserveTrigger();
		SetDeaths(P7, SetTo, 2000+(10000*(m-1)), "Mineral Chunk (Type 2)"); -- 다음 선택으로 넘어가기
		CreateUnit(1, "처음부터 하기", "Location 65", P7);
		MoveUnit(1, "처음부터 하기", P7, "Location 65", "Location 3");
		CreateUnit(1, "다른 라운드부터 하기", "Location 65", P7);
		MoveUnit(1, "다른 라운드부터 하기", P7, "Location 65", "Location 4");
		CreateUnit(1, "난이도 다시 선택", "Location 65", P7);
		MoveUnit(1, "난이도 다시 선택", P7, "Location 65", "Location 5");
	},
}
end

for i=1,3 do -- 어디 라운드부터 할지 선택 / 3번째 비콘 생산하기
for m=1,2 do
Trigger { --
	players = {Force1},
	conditions = {
		CountdownTimer(mansu1[1][m], mansu1[2][m]);
		Deaths(P7, AtMost, 2999+(10000*(m-1)), "Mineral Chunk (Type 2)");
		Deaths(P7, AtLeast, 2000+(10000*(m-1)), "Mineral Chunk (Type 2)");
		Bring(CurrentPlayer, AtLeast, 1, "Choice", "Location "..2+i);
		Bring(P7, AtLeast, 1, mode1[2][i], "Location "..2+i);
	},
	actions = {
		PreserveTrigger();
		MoveUnit(1, "Choice", CurrentPlayer, "Location "..2+i, "Location 2");
		SetDeaths(P7, SetTo, 2000+(1000*i)+(10000*(m-1)), "Mineral Chunk (Type 2)"); -- 각 선택
		
		RemoveUnitAt(1, "처음부터 하기", "Location 3", P7);
		RemoveUnitAt(1, "다른 라운드부터 하기", "Location 4", P7);
		RemoveUnitAt(1, "난이도 다시 선택", "Location 5", P7);
	},
}
end
end

Trigger { -- 1피 나갔을 경우 다시 포스1한테 시민 주기 로케1
	players = {Force1},
	conditions = {
		Bring(P12, AtLeast, 1, "Choice", "Location 1");
	},
	actions = {
		PreserveTrigger();
		GiveUnits(1, "Choice", P12, "Location 1", CurrentPlayer);
	},
}

for m=1,2 do -- 01-1. 처음부터 하기 선택했을 경우
Trigger { --
	players = {P7},
	conditions = {
		Deaths(P7, AtMost, 3999+(10000*(m-1)), "Mineral Chunk (Type 2)");
		Deaths(P7, AtLeast, 3000+(10000*(m-1)), "Mineral Chunk (Type 2)");
		
		Bring(P7, Exactly, 0, "처음부터 하기", "Location 3");
		Bring(P7, Exactly, 0, "다른 라운드부터 하기", "Location 4");
		Bring(P7, Exactly, 0, "난이도 다시 선택", "Location 5");
		
		Bring(Force1, Exactly, 0, "Choice", "Location 213");
	},
	actions = {
		PreserveTrigger();
		SetDeaths(P7, SetTo, 12000, "Mineral Chunk (Type 2)");
		SetDeaths(P7, SetTo, 1, "Mineral Chunk (Type 1)"); -- 라운드 인식 / 1라운드부터 시작
		SetDeaths(P7, SetTo, 0, "Young Chrysalis"); -- 각종 초기화용
		SetDeaths(Force1, SetTo, 0, "Normal Mode"); -- 프로브 억제 초기화
		SetDeaths(Force1, SetTo, 1000, "Hard Mode"); -- 유닛 보존 초기화
		SetDeaths(Force1, SetTo, 1, "Kyadarin Crystal Formation"); -- 싱글존 유닛 알림 메시지
		SetDeaths(Force1, SetTo, 0, "Ruins"); -- 팀플존 유닛 알림 메시지
		
		CreateUnit(1, "처음부터 하기", "Location 65", P7);
		MoveUnit(1, "처음부터 하기", P7, "Location 65", "Location 3");
		CreateUnit(1, "다른 라운드부터 하기", "Location 65", P7);
		MoveUnit(1, "다른 라운드부터 하기", P7, "Location 65", "Location 4");
		CreateUnit(1, "난이도 다시 선택", "Location 65", P7);
		MoveUnit(1, "난이도 다시 선택", P7, "Location 65", "Location 5");
		
		RemoveUnitAt(1, "Choice", "Location 1", Force1);
		
		RemoveUnitAt(All, "Men", "Location 214", Force1); -- 싱글&팀플존 유닛 삭제
		RemoveUnitAt(All, "Men", "Location 214", P7);
		RemoveUnitAt(All, "Men", "Location 214", P8);
		RemoveUnitAt(All, "Men", "Location 214", P11);
		RemoveUnitAt(All, "Choice", "Location 146", Force1); -- 재도전 시민 삭제
		RemoveUnitAt(All, "Men", "Location 205", Force1); -- 대기 유닛 삭제
		RemoveUnitAt(All, "Men", "Location 206", Force1); -- 뽑기 유닛 삭제
		RemoveUnitAt(All, "Men", "Location 159", P8); -- 8피 팀플 대기 유닛 삭제
		RemoveUnitAt(All, "Men", "Location 110", P8); -- 8피 싱글 대기 유닛 삭제
		
		SetSwitch("Switch 19", Clear); -- 재도전 인식해서 타이머 3초 더주는 거 초기화
		SetSwitch("Switch 26", Set); -- 프로브 초기화 오류 방지
	},
}
end

for m=1,2 do -- 01-2. 다른 라운드부터 하기 선택했을 경우 
Trigger { --
	players = {P7},
	conditions = {
		Deaths(P7, AtMost, 4999+(10000*(m-1)), "Mineral Chunk (Type 2)");
		Deaths(P7, AtLeast, 4000+(10000*(m-1)), "Mineral Chunk (Type 2)");
		
		Bring(P7, Exactly, 0, "처음부터 하기", "Location 3");
		Bring(P7, Exactly, 0, "다른 라운드부터 하기", "Location 4");
		Bring(P7, Exactly, 0, "난이도 다시 선택", "Location 5");
		
		Bring(Force1, Exactly, 0, "Choice", "Location 213");
	},
	actions = {
		PreserveTrigger();
		SetDeaths(P7, SetTo, 10000+(10000*(m-1)), "Mineral Chunk (Type 2)");
		SetDeaths(Force1, SetTo, 1000, "Vespene Tank (Terran Type 1)"); -- 화면 이동
		MoveUnit(1, "Choice", Force1, "Location 1", "Location 25");
		
		CreateUnit(1, "처음부터 하기", "Location 65", P7);
		MoveUnit(1, "처음부터 하기", P7, "Location 65", "Location 3");
		CreateUnit(1, "다른 라운드부터 하기", "Location 65", P7);
		MoveUnit(1, "다른 라운드부터 하기", P7, "Location 65", "Location 4");
		CreateUnit(1, "난이도 다시 선택", "Location 65", P7);
		MoveUnit(1, "난이도 다시 선택", P7, "Location 65", "Location 5");
	},
}
end

Trigger { -- 로케 25로 화면 이동
	players = {Force1},
	conditions = {
		Deaths(CurrentPlayer, AtLeast, 1000, "Vespene Tank (Terran Type 1)");
	},
	actions = {
		PreserveTrigger();
		SetDeaths(CurrentPlayer, SetTo, 0, "Vespene Tank (Terran Type 1)"); -- 화면 이동
		CenterView("Location 25");
	},
}

Trigger { -- 라운드 선택 시민 주기 12피 다시 포스1한테
	players = {Force1},
	conditions = {
		Bring(P12, AtLeast, 1, "Choice", "Location 25");
	},
	actions = {
		PreserveTrigger();
		GiveUnits(1, "Choice", P12, "Location 25", CurrentPlayer);
	},
}

for i=1,30 do -- 1~30 라운드 선택 / 시민 이동
for m=1,2 do
Trigger { -- 
	players = {Force1},
	conditions = {
		CountdownTimer(mansu1[1][m], mansu1[2][m]);
		Deaths(P7, AtMost, 19999+(10000*(m-1)), "Mineral Chunk (Type 2)");
		Deaths(P7, AtLeast, 10000+(10000*(m-1)), "Mineral Chunk (Type 2)");
		Bring(CurrentPlayer, AtLeast, 1, "Choice", "Location "..mansu1[3][i]);
	},
	actions = {
		PreserveTrigger();
		RemoveUnitAt(1, "Choice", "Location "..mansu1[3][i], CurrentPlayer);
		
		SetDeaths(P7, SetTo, 12000, "Mineral Chunk (Type 2)");
		SetDeaths(P7, SetTo, i, "Mineral Chunk (Type 1)"); -- 라운드 인식
		SetDeaths(P7, SetTo, 1, "Data Disc"); -- 마지막에 시민이 로케 1에 있도록 인식
		SetDeaths(P7, SetTo, 0, "Psi Emitter");
		SetDeaths(P7, SetTo, 0, "Young Chrysalis"); -- 각종 초기화용
		SetDeaths(Force1, SetTo, 0, "Normal Mode"); -- 프로브 억제 초기화
		SetDeaths(Force1, SetTo, 1000, "Hard Mode"); -- 유닛 보존 초기화
		SetDeaths(Force1, SetTo, 1, "Kyadarin Crystal Formation"); -- 싱글존 유닛 알림 메시지
		SetDeaths(Force1, SetTo, 0, "Ruins"); -- 팀플존 유닛 알림 메시지
		
		RemoveUnitAt(All, "Men", "Location 214", Force1); -- 싱글&팀플존 유닛 삭제
		RemoveUnitAt(All, "Men", "Location 214", P7);
		RemoveUnitAt(All, "Men", "Location 214", P8);
		RemoveUnitAt(All, "Men", "Location 214", P11);
		RemoveUnitAt(All, "Choice", "Location 146", Force1); -- 재도전 시민 삭제
		RemoveUnitAt(All, "Men", "Location 205", Force1); -- 대기 유닛 삭제
		RemoveUnitAt(All, "Men", "Location 206", Force1); -- 뽑기 유닛 삭제
		RemoveUnitAt(All, "Men", "Location 159", P8); -- 8피 팀플 대기 유닛 삭제
		RemoveUnitAt(All, "Men", "Location 110", P8); -- 8피 싱글 대기 유닛 삭제
		
		SetSwitch("Switch 19", Clear); -- 재도전 인식해서 타이머 3초 더주는 거 초기화
		SetSwitch("Switch 26", Set); -- 프로브 초기화 오류 방지
	},
}
end
end

for m=1,2 do -- 01-3. 난이도 다시 선택 선택했을 경우
Trigger { --
	players = {P7},
	conditions = {
		Deaths(P7, AtMost, 5999+(10000*(m-1)), "Mineral Chunk (Type 2)");
		Deaths(P7, AtLeast, 5000+(10000*(m-1)), "Mineral Chunk (Type 2)");
		
		Bring(P7, Exactly, 0, "처음부터 하기", "Location 3");
		Bring(P7, Exactly, 0, "다른 라운드부터 하기", "Location 4");
		Bring(P7, Exactly, 0, "난이도 다시 선택", "Location 5");
		
		Bring(P7, Exactly, 0, "Easy Mode", "Location 3");
		Bring(P7, Exactly, 0, "Normal Mode", "Location 4");
		Bring(P7, Exactly, 0, "Hard Mode", "Location 5");
		
		Bring(Force1, Exactly, 0, "Choice", "Location 213");
	},
	actions = {
		PreserveTrigger();
		SetDeaths(P7, SetTo, 10000*(m-1), "Mineral Chunk (Type 2)");
		CreateUnit(1, "Easy Mode", "Location 65", P7);
		MoveUnit(1, "Easy Mode", P7, "Location 65", "Location 3");
		CreateUnit(1, "Normal Mode", "Location 65", P7);
		MoveUnit(1, "Normal Mode", P7, "Location 65", "Location 4");
		CreateUnit(1, "Hard Mode", "Location 65", P7);
		MoveUnit(1, "Hard Mode", P7, "Location 65", "Location 5");
	},
}
end

for i=1,3 do -- 01-4. 게임 중 설정 선택할 경우 2초 이하일 때는 못하게 막기
Trigger { --
	players = {Force1},
	conditions = {
		CountdownTimer(AtMost, 2);
		Deaths(P7, AtMost, 19999, "Mineral Chunk (Type 2)");
		Deaths(P7, AtLeast, 10000, "Mineral Chunk (Type 2)");
		Bring(CurrentPlayer, AtLeast, 1, "Choice", "Location "..2+i);
	},
	actions = {
		PreserveTrigger();
		MoveUnit(1, "Choice", CurrentPlayer, "Location "..2+i, "Location 2");
		CenterView("Location 2");
		DisplayText("\x13\x1F──────────────────────────────────────────\r\n\x13\x04해당 설정은 라운드 대기 중이고, 카운트 타이머가 3초 이상일 때만 바꿀 수 있습니다\r\n\x13\x1F──────────────────────────────────────────\r\n\r\n\r\n\r\n\r\n\r\n", 0);		
		PlayWAV("staredit\\wav\\errosound.ogg");
	},
}
end

for i=1,30 do --
Trigger { --
	players = {Force1},
	conditions = {
		CountdownTimer(AtMost, 2);
		Deaths(P7, AtMost, 29999, "Mineral Chunk (Type 2)");
		Deaths(P7, AtLeast, 20000, "Mineral Chunk (Type 2)");
		Bring(CurrentPlayer, AtLeast, 1, "Choice", "Location "..mansu1[3][i]);
	},
	actions = {
		PreserveTrigger();
		MoveUnit(1, "Choice", CurrentPlayer, "Location "..mansu1[3][i], "Location 25");
		CenterView("Location 25");
		DisplayText("\x13\x1F──────────────────────────────────────────\r\n\x13\x04해당 설정은 라운드 대기 중이고, 카운트 타이머가 3초 이상일 때만 바꿀 수 있습니다\r\n\x13\x1F──────────────────────────────────────────\r\n\r\n\r\n\r\n\r\n\r\n", 0);		
		PlayWAV("staredit\\wav\\errosound.ogg");
	},
}
end

Trigger { -- 01-5. 노말 모드 데스값 오류 방지
	players = {P7},
	conditions = {
		Switch("Switch 26", Set);
	},
	actions = {
		PreserveTrigger();
		SetSwitch("Switch 26", Clear);
		SetDeaths(Force1, SetTo, 0, "Normal Mode");
	},
}

Trigger { -- 01-6. 로케1,25 시민 없을 경우 추가 생산 / 어디에 시민 생산해야 하는지 인식하기
	players = {P7},
	conditions = {
		Deaths(P7, Exactly, 0, "Data Disc");
		
		Bring(Force1, AtLeast, 1, "Choice", "Location 1");
		Bring(P7, Exactly, 0, "Choice", "Location 1");
		Bring(P12, Exactly, 0, "Choice", "Location 1");
		
		Bring(Force1, Exactly, 0, "Choice", "Location 25");
		Bring(P7, Exactly, 0, "Choice", "Location 25");
		Bring(P12, Exactly, 0, "Choice", "Location 25");
	},
	actions = {
		PreserveTrigger();
		SetDeaths(P7, SetTo, 1, "Data Disc");
		SetDeaths(P7, SetTo, 0, "Psi Emitter");
	},
}

Trigger { --
	players = {P7},
	conditions = {
		Deaths(P7, Exactly, 0, "Psi Emitter");
		
		Bring(Force1, Exactly, 0, "Choice", "Location 1");
		Bring(P7, Exactly, 0, "Choice", "Location 1");
		Bring(P12, Exactly, 0, "Choice", "Location 1");
		
		Bring(Force1, AtLeast, 1, "Choice", "Location 25");
		Bring(P7, Exactly, 0, "Choice", "Location 25");
		Bring(P12, Exactly, 0, "Choice", "Location 25");
	},
	actions = {
		PreserveTrigger();
		SetDeaths(P7, SetTo, 0, "Data Disc");
		SetDeaths(P7, SetTo, 1, "Psi Emitter");
	},
}

erro = {};

table.insert(erro, {"Data Disc", "Psi Emitter"});
table.insert(erro, {"Psi Emitter", "Data Disc"});
table.insert(erro, {"Vespene Sac (Zerg Type 1)", "Khaydarin Crystal"});
table.insert(erro, {1, 25});
table.insert(erro, {2, 25});

for i=1,2 do -- 시민 생산 카운트
Trigger { --
	players = {P7},
	conditions = {
		Deaths(P7, Exactly, 1, erro[1][i]);
		Deaths(P7, Exactly, 0, erro[2][i]);
		Deaths(P7, AtMost, 35, erro[3][i]);
		
		Bring(Force1, Exactly, 0, "Choice", "Location "..erro[4][i]);
		Bring(P7, Exactly, 0, "Choice", "Location "..erro[4][i]);
		Bring(P12, Exactly, 0, "Choice", "Location "..erro[4][i]);
	},
	actions = {
		PreserveTrigger();
		SetDeaths(P7, Add, 1, erro[3][i]);
	},
}

Trigger { -- 
	players = {P7},
	conditions = {
		Deaths(P7, AtLeast, 1, erro[3][i]);		
		Bring(Force1, AtLeast, 1, "Choice", "Location "..erro[4][i]);
	},
	actions = {
		PreserveTrigger();
		SetDeaths(P7, SetTo, 0, erro[3][i]);
	},
}

Trigger { -- 
	players = {P7},
	conditions = {
		Deaths(P7, AtLeast, 1, erro[3][i]);		
		Bring(P7, AtLeast, 1, "Choice", "Location "..erro[4][i]);
	},
	actions = {
		PreserveTrigger();
		SetDeaths(P7, SetTo, 0, erro[3][i]);
	},
}

Trigger { -- 
	players = {P7},
	conditions = {
		Deaths(P7, AtLeast, 1, erro[3][i]);		
		Bring(P12, AtLeast, 1, "Choice", "Location "..erro[4][i]);
	},
	actions = {
		PreserveTrigger();
		SetDeaths(P7, SetTo, 0, erro[3][i]);
	},
}

Trigger { -- 
	players = {P7},
	conditions = {
		Deaths(P7, Exactly, 1, erro[1][i]);
		Deaths(P7, Exactly, 0, erro[2][i]);
		Deaths(P7, AtLeast, 36, erro[3][i]);
		
		Bring(Force1, Exactly, 0, "Choice", "Location "..erro[4][i]);
		Bring(P7, Exactly, 0, "Choice", "Location "..erro[4][i]);
		Bring(P12, Exactly, 0, "Choice", "Location "..erro[4][i]);
	},
	actions = {
		PreserveTrigger();
		SetDeaths(P7, SetTo, 0, erro[3][i]);
		CreateUnit(1, "Choice", "Location 65", P7);
		MoveUnit(1, "Choice", P7, "Location 65", "Location "..erro[5][i]);
		SetInvincibility(Enable, "Choice", P7, "Location 71");
		SetSwitch("Switch 8", Set);
	},
}
end

Trigger { -- 
	players = {Force1},
	conditions = {
		Switch("Switch 8", Set);
	},
	actions = {
		PreserveTrigger();
		SetSwitch("Switch 8", Clear);
		GiveUnits(1, "Choice", P7, "Location 71", CurrentPlayer);
	},
}

for i=1,6 do -- 02-1. 기타 설정 / 뽑기에 유닛 있으면 시야 이동 + 유닛 뽑고 싱글 존으로 시야 이동
Trigger { --
	players = {i-1},
	conditions = {
		Bring(CurrentPlayer, AtLeast, 1, "랜덤 유닛 뽑기", "Location 71");
	},
	actions = {
		PreserveTrigger();
		CenterView("Location "..44+(2*i));
	},
}

Trigger { --
	players = {i-1},
	conditions = {
		Bring(CurrentPlayer, AtLeast, 1, "마법 유닛 뽑기", "Location 71");
	},
	actions = {
		PreserveTrigger();
		CenterView("Location "..44+(2*i));
	},
}

Trigger { --
	players = {i-1},
	conditions = {
		Bring(CurrentPlayer, Exactly, 0, "마법 유닛 뽑기", "Location 71");
		Bring(CurrentPlayer, Exactly, 0, "랜덤 유닛 뽑기", "Location 71");
		Deaths(CurrentPlayer, AtLeast, 1000, "Mineral Chunk (Type 1)");
	},
	actions = {
		PreserveTrigger();
		SetDeaths(CurrentPlayer, SetTo, 0, "Mineral Chunk (Type 1)");
		CenterView("Location "..75+(2*i));
	},
}
end

viemove = {};

table.insert(viemove, {"랜덤 유닛 뽑기", "마법 유닛 뽑기"});

for i=1,2 do --
Trigger { --
	players = {Force1},
	conditions = {
		Bring(CurrentPlayer, AtLeast, 1, viemove[1][i], "Location 71");
		Deaths(CurrentPlayer, AtMost, 999, "Mineral Chunk (Type 1)");
	},
	actions = {
		PreserveTrigger();
		SetDeaths(CurrentPlayer, SetTo, 1000, "Mineral Chunk (Type 1)");
	},
}
end

for i=1,6 do -- 설정 선택 후 자살하기 유닛 생성 / 자살하기 실행
Trigger { --
	players = {i-1},
	conditions = {
		Switch("Switch 7", Cleared);
		Deaths(P7, AtLeast, 10000, "Mineral Chunk (Type 2)");
		Command(CurrentPlayer, Exactly, 0, "자살하기 [ 아무 곳으로 이동 ]");
	},
	actions = {
		PreserveTrigger();
		CreateUnit(1, "자살하기 [ 아무 곳으로 이동 ]", "Location "..11+(2*i), CurrentPlayer);
		SetInvincibility(Enable, "자살하기 [ 아무 곳으로 이동 ]", CurrentPlayer, "Location 71");
	},
}

Trigger { --
	players = {i-1},
	conditions = {
		Switch("Switch 7", Set);
		Deaths(P7, AtLeast, 10000, "Mineral Chunk (Type 2)");
		Command(CurrentPlayer, Exactly, 0, "자살하기 [ 아무 곳으로 이동 ]");
	},
	actions = {
		PreserveTrigger();
		CreateUnit(1, "자살하기 [ 아무 곳으로 이동 ]", "Location 65", CurrentPlayer);
		MoveUnit(1, "자살하기 [ 아무 곳으로 이동 ]", CurrentPlayer, "Location 65", "Location "..11+(2*i));
		Order("자살하기 [ 아무 곳으로 이동 ]", CurrentPlayer, "Location "..11+(2*i), Move, "Location "..11+(2*i));
		SetInvincibility(Enable, "자살하기 [ 아무 곳으로 이동 ]", CurrentPlayer, "Location 71");
	},
}

Trigger { --
	players = {i-1},
	conditions = {
		Bring(CurrentPlayer, Exactly, 0, "자살하기 [ 아무 곳으로 이동 ]", "Location "..11+(2*i));
		Bring(CurrentPlayer, AtLeast, 1, "Men", "Location 117");
		CountdownTimer(AtMost, 20);
		CountdownTimer(AtLeast, 3);
	},
	actions = {
		PreserveTrigger();
		SetDeaths(CurrentPlayer, SetTo, 1000, "Jump Gate");
		KillUnitAt(All, "Men", "Location 214", CurrentPlayer);
		KillUnitAt(All, "Any unit", "Location "..159+i, P7);
		MoveUnit(1, "자살하기 [ 아무 곳으로 이동 ]", CurrentPlayer, "Anywhere", "Location "..11+(2*i));
	},
}

Trigger { --
	players = {i-1},
	conditions = {
		Bring(CurrentPlayer, Exactly, 0, "자살하기 [ 아무 곳으로 이동 ]", "Location "..11+(2*i));
	},
	actions = {
		PreserveTrigger();
		KillUnitAt(All, "Men", "Location 214", CurrentPlayer);
		KillUnitAt(All, "Any unit", "Location "..159+i, P7);
		MoveUnit(1, "자살하기 [ 아무 곳으로 이동 ]", CurrentPlayer, "Anywhere", "Location "..11+(2*i));
	},
}
end

Trigger { -- 설정 선택 후 강퇴 기능 활성화
	players = {P7},
	conditions = {
		Deaths(P7, AtLeast, 10000, "Mineral Chunk (Type 2)");
		Bring(Force1, Exactly, 0, "강퇴", "Location 6");
		Bring(P7, Exactly, 0, "강퇴", "Location 6");
		Bring(P12, Exactly, 0, "강퇴", "Location 6");
	},
	actions = {
		PreserveTrigger();
		CreateUnit(1, "강퇴", "Location 65", P7);
		MoveUnit(1, "강퇴", P7, "Location 65", "Location 6");
		SetInvincibility(Enable, "강퇴", P7, "Location 71");
	},
}

for i=1,2 do -- 7피나 12피 강퇴 있으면 포스1한테 주기
Trigger { --
	players = {Force1},
	conditions = {
		Bring(6+(5*(i-1)), AtLeast, 1, "강퇴", "Location 6");
	},
	actions = {
		PreserveTrigger();
		GiveUnits(1, "강퇴", 6+(5*(i-1)), "Location 6", CurrentPlayer);
	},
}
end

for i=1,6 do --
Trigger { --
	players = {i-1},
	conditions = {
		Switch("Switch 7", Cleared);
		Bring(Force1, AtLeast, 1, "강퇴", "Location 6");
		Bring(CurrentPlayer, Exactly, 0, "강퇴하기", "Location "..6+i);
	},
	actions = {
		PreserveTrigger();
		CreateUnit(1, "강퇴하기", "Location "..6+i, CurrentPlayer);
	},
}

Trigger { --
	players = {i-1},
	conditions = {
		Switch("Switch 7", Set);
		Bring(Force1, AtLeast, 1, "강퇴", "Location 6");
		Bring(CurrentPlayer, Exactly, 0, "강퇴하기", "Location "..6+i);
	},
	actions = {
		PreserveTrigger();
		CreateUnit(1, "강퇴하기", "Location 65", CurrentPlayer);
		MoveUnit(1, "강퇴하기", CurrentPlayer, "Location 65", "Location "..6+i);
	},
}

Trigger { --
	players = {i-1},
	conditions = {
		Bring(CurrentPlayer, AtLeast, 1, "강퇴", "Location 6");
		Bring(CurrentPlayer, AtLeast, 1, "강퇴하기", "Location "..6+i);
	},
	actions = {
		PreserveTrigger();
		SetInvincibility(Enable, "강퇴하기", CurrentPlayer, "Location 6");
	},
}

Trigger { --
	players = {i-1},
	conditions = {
		Bring(CurrentPlayer, Exactly, 0, "강퇴", "Location 6");
		Bring(CurrentPlayer, AtLeast, 1, "강퇴하기", "Location "..6+i);
	},
	actions = {
		PreserveTrigger();
		SetInvincibility(Disable, "강퇴하기", CurrentPlayer, "Location 6");
	},
}

Trigger { --
	players = {i-1},
	conditions = {
		Deaths(CurrentPlayer, AtLeast, 1, "강퇴하기");
	},
	actions = {
		DisplayText("\x13\x1F─────────\r\n\x13\x04강퇴 당했습니다\r\n\x13\x1F─────────\r\n\r\n\r\n\r\n\r\n\r\n", 0);		
		Defeat();
	},
}
end

erro2 = {};

table.insert(erro2, {"Choice", "강퇴", "강퇴하기", "자살하기 [ 아무 곳으로 이동 ]", "랜덤 유닛 뽑기", "마법 유닛 뽑기"});
table.insert(erro2, {"강퇴", "강퇴하기", "자살하기 [ 아무 곳으로 이동 ]"});

for i=1,6 do -- 아래 유닛 리콜 방지
Trigger { -- 
	players = {Force1},
	conditions = {
		Bring(CurrentPlayer, AtLeast, 1, erro2[1][i], "Location 214");
	},
	actions = {
		PreserveTrigger();
		RemoveUnitAt(All, erro2[1][i], "Location 214", CurrentPlayer);
	},
}
end
 
for i=1,3 do -- 각종 유닛 2개 보유 방지
Trigger { -- 
	players = {Force1},
	conditions = {
		Command(CurrentPlayer, AtLeast, 2, erro2[2][i]);
	},
	actions = {
		PreserveTrigger();
		RemoveUnit(erro2[2][i], CurrentPlayer);
	},
}
end

Trigger { -- 컴 시야 플레이어한테 공유
	players = {Force1},
	conditions = {
		Deaths(P7, AtLeast, 1000, "Vespene Tank (Terran Type 2)");
	},
	actions = {
		PreserveTrigger();
		RunAIScript("Turn ON Shared Vision for Player 8");
		RunAIScript("Turn ON Shared Vision for Player 7");
		RunAIScript("Turn ON Shared Vision for Player 6");
		RunAIScript("Turn ON Shared Vision for Player 5");
		RunAIScript("Turn ON Shared Vision for Player 4");
		RunAIScript("Turn ON Shared Vision for Player 3");
		RunAIScript("Turn ON Shared Vision for Player 2");
		RunAIScript("Turn ON Shared Vision for Player 1");
	},
}

Trigger { -- 포스1 시야 8피 한테 공유
	players = {P8},
	conditions = {
		Deaths(P7, AtLeast, 1000, "Vespene Tank (Terran Type 2)");
	},
	actions = {
		PreserveTrigger();
		RunAIScript("Turn ON Shared Vision for Player 6");
		RunAIScript("Turn ON Shared Vision for Player 5");
		RunAIScript("Turn ON Shared Vision for Player 4");
		RunAIScript("Turn ON Shared Vision for Player 3");
		RunAIScript("Turn ON Shared Vision for Player 2");
		RunAIScript("Turn ON Shared Vision for Player 1");
	},
}

Trigger { -- 동맹 설정 / 플레이어
	players = {Force1},
	conditions = {
		Always();
	},
	actions = {
		SetAllianceStatus(P1, AlliedVictory);
		SetAllianceStatus(P2, AlliedVictory);
		SetAllianceStatus(P3, AlliedVictory);
		SetAllianceStatus(P4, AlliedVictory);
		SetAllianceStatus(P5, AlliedVictory);
		SetAllianceStatus(P6, AlliedVictory);
		SetAllianceStatus(P8, Enemy);
	},
}

Trigger { -- 7피 동맹 설정
	players = {Force1},
	conditions = {
		Deaths(CurrentPlayer, AtMost, 1999, "Vespene Sac (Zerg Type 2)");
		Deaths(CurrentPlayer, AtLeast, 1000, "Vespene Sac (Zerg Type 2)");
	},
	actions = {
		PreserveTrigger();
		SetDeaths(CurrentPlayer, SetTo, 0, "Vespene Sac (Zerg Type 2)");
		SetAllianceStatus(P7, Ally);
	},
}

Trigger { -- 
	players = {Force1},
	conditions = {
		Deaths(CurrentPlayer, AtMost, 2999, "Vespene Sac (Zerg Type 2)");
		Deaths(CurrentPlayer, AtLeast, 2000, "Vespene Sac (Zerg Type 2)");
	},
	actions = {
		PreserveTrigger();
		SetDeaths(CurrentPlayer, SetTo, 0, "Vespene Sac (Zerg Type 2)");
		SetAllianceStatus(P7, Enemy);
	},
}

Trigger { -- 7피동맹&적
	players = {P7},
	conditions = {
		Always();
	},
	actions = {
		PreserveTrigger();
		SetAllianceStatus(P1, Ally);
		SetAllianceStatus(P2, Ally);
		SetAllianceStatus(P3, Ally);
		SetAllianceStatus(P4, Ally);
		SetAllianceStatus(P5, Ally);
		SetAllianceStatus(P6, Ally);
		SetAllianceStatus(P8, Enemy);
	},
}

Trigger { -- 8피동맹&적
	players = {P8},
	conditions = {
		Always();
	},
	actions = {
		PreserveTrigger();
		SetAllianceStatus(P1, Enemy);
		SetAllianceStatus(P2, Enemy);
		SetAllianceStatus(P3, Enemy);
		SetAllianceStatus(P4, Enemy);
		SetAllianceStatus(P5, Enemy);
		SetAllianceStatus(P6, Enemy);
		SetAllianceStatus(P7, Enemy);
	},
}

Trigger { -- 리버 격납 개수
	players = {AllPlayers},
	conditions = {
		Command(CurrentPlayer, AtLeast, 1, "리버");
	},
	actions = {
		PreserveTrigger();
		ModifyUnitHangarCount(10, All, "리버", CurrentPlayer, "Anywhere");
	},
}

Trigger { -- 영웅 리버 격납 개수
	players = {AllPlayers},
	conditions = {
		Command(CurrentPlayer, AtLeast, 1, "영웅 리버");
	},
	actions = {
		PreserveTrigger();
		ModifyUnitHangarCount(10, All, "영웅 리버", CurrentPlayer, "Anywhere");
	},
}

Trigger { -- 캐리어 격납 개수
	players = {AllPlayers},
	conditions = {
		Command(CurrentPlayer, AtLeast, 1, "캐리어");
	},
	actions = {
		PreserveTrigger();
		ModifyUnitHangarCount(8, All, "캐리어", CurrentPlayer, "Anywhere");
	},
}

erro3 = {};

table.insert(erro3, {"강퇴하기", "자살하기 [ 아무 곳으로 이동 ]", "랜덤 유닛 뽑기", "마법 유닛 뽑기"});
 
for i=1,4 do -- 12피 로케 71 특별한 유닛 없애기
Trigger { -- 
	players = {P7},
	conditions = {
		Bring(P12, AtLeast, 1, erro3[1][i], "Anywhere");
	},
	actions = {
		PreserveTrigger();
		KillUnitAt(All, erro3[1][i], "Anywhere", P12);
	},
}
end

Trigger { -- 재도전 나간 12피 시민 없애기
	players = {P7},
	conditions = {
		Bring(P12, AtLeast, 1, "Choice", "Location 146");
	},
	actions = {
		PreserveTrigger();
		RemoveUnitAt(All, "Choice", "Location 146", P12);
	},
}

Trigger { -- 싱글&팀플존 나간 플레이어 12피 유닛 없애기
	players = {P7},
	conditions = {
		Bring(P12, AtLeast, 1, "Men", "Location 214");
	},
	actions = {
		PreserveTrigger();
		KillUnitAt(All, "Men", "Location 214", P12);
	},
}

Trigger { -- 싱글존 나간 플레이어 라이프 없애기
	players = {P7},
	conditions = {
		Bring(P12, AtLeast, 1, "라이프", "Location 72");
	},
	actions = {
		PreserveTrigger();
		KillUnitAt(All, "라이프", "Location 72", P12);
	},
}

Trigger { -- 팀플존 나간 플레이러 라이프 다른 포스1한테 주기
	players = {Force1},
	conditions = {
		Bring(P12, AtLeast, 1, "라이프", "Location 117");
	},
	actions = {
		PreserveTrigger();
		GiveUnits(1, "라이프", P12, "Location 117", CurrentPlayer);
	},
}

Trigger { -- 나간 플레이어 대기 유닛&라이프 없애기
	players = {P7},
	conditions = {
		Bring(P12, AtLeast, 1, "Any unit", "Location 205");
	},
	actions = {
		PreserveTrigger();
		RemoveUnitAt(All, "Any unit", "Location 205", P12);
	},
}

Trigger { -- 
	players = {P7},
	conditions = {
		Bring(P12, AtLeast, 1, "라이프", "Location 71");
	},
	actions = {
		PreserveTrigger();
		RemoveUnitAt(All, "라이프", "Location 71", P12);
	},
}

Trigger { -- 싱글존&팀플존 전투 지역 무적 해제
	players = {AllPlayers},
	conditions = {
		Bring(CurrentPlayer, AtLeast, 1, "Men", "Location 214");
	},
	actions = {
		PreserveTrigger();
		SetInvincibility(Disable, "Men", CurrentPlayer, "Location 214");
		SetInvincibility(Enable, "강퇴하기", CurrentPlayer, "Location 214");
	},
}

Trigger { -- 11피 모든 유닛 무적 설정
	players = {P7},
	conditions = {
		Bring(P11, AtLeast, 1, "Men", "Location 214");
	},
	actions = {
		PreserveTrigger();
		SetInvincibility(Enable, "Men", P11, "Location 214");
	},
}

for i=1,6 do -- 포스1 싱글존 못벗어나게 하기
Trigger { --
	players = {i-1},
	conditions = {
		Bring(CurrentPlayer, AtLeast, 1, "Men", "Location 99");
	},
	actions = {
		PreserveTrigger();
		
		SetMemory(0x664114, Subtract, 8192); -- 저글링
		SetMemory(0x664118, Subtract, 8192); -- 히드라
		SetMemory(0x66411C, Subtract, 8192); -- 울트라
		SetMemory(0x664120, Subtract, 8192); -- 브루들링
		SetMemory(0x664134, Subtract, 8192); -- 퀸
		SetMemory(0x664138, Subtract, 8192); -- 디파일러
		SetMemory(0x664148, Subtract, 8192); -- 인페 테란
		SetMemory(0x66414C, Subtract, 8192); -- 인페 케리건
		SetMemory(0x66421C, Subtract, 8192); -- 러커
		
		SetMemory(0x664080, Subtract, 8192); -- 마린
		SetMemory(0x664084, Subtract, 8192); -- 고스트
		SetMemory(0x664088, Subtract, 8192); -- 벌처
		SetMemory(0x66408C, Subtract, 8192); -- 골리앗
		SetMemory(0x664094, Subtract, 8192); -- 탱크(5)
		SetMemory(0x66409C, Subtract, 8192); -- SCV
		SetMemory(0x6640A4, Subtract, 8192); -- 배슬
		SetMemory(0x6640F8, Subtract, 8192); -- 탱크(30)
		SetMemory(0x664100, Subtract, 8192); -- 파이어뱃
		SetMemory(0x664108, Subtract, 8192); -- 메딕
		SetMemory(0x664168, Subtract, 8192); -- 발키리

		SetMemory(0x664170, Subtract, 8192); -- 커세어
		SetMemory(0x664174, Subtract, 8192); -- 닥템
		SetMemory(0x66417C, Subtract, 8192); -- 다크 아칸
		SetMemory(0x664184, Subtract, 8192); -- 질럿
		SetMemory(0x664188, Subtract, 8192); -- 드라군
		SetMemory(0x66418C, Subtract, 8192); -- 하템
		SetMemory(0x664190, Subtract, 8192); -- 아칸
		SetMemory(0x6641CC, Subtract, 8192); -- 리버
		
		MoveUnit(All, "Men", CurrentPlayer, "Location 99", "Location "..110+i);
		Order("Men", CurrentPlayer, "Location 99", Move, "Location "..110+i);
		CenterView("Location "..110+i);
		
		SetMemory(0x664114, Add, 8192); -- 저글링
		SetMemory(0x664118, Add, 8192); -- 히드라
		SetMemory(0x66411C, Add, 8192); -- 울트라
		SetMemory(0x664120, Add, 8192); -- 브루들링
		SetMemory(0x664134, Add, 8192); -- 퀸
		SetMemory(0x664138, Add, 8192); -- 디파일러
		SetMemory(0x664148, Add, 8192); -- 인페 테란
		SetMemory(0x66414C, Add, 8192); -- 인페 케리건
		SetMemory(0x66421C, Add, 8192); -- 러커
		
		SetMemory(0x664080, Add, 8192); -- 마린
		SetMemory(0x664084, Add, 8192); -- 고스트
		SetMemory(0x664088, Add, 8192); -- 벌처
		SetMemory(0x66408C, Add, 8192); -- 골리앗
		SetMemory(0x664094, Add, 8192); -- 탱크(5)
		SetMemory(0x66409C, Add, 8192); -- SCV
		SetMemory(0x6640A4, Add, 8192); -- 배슬
		SetMemory(0x6640F8, Add, 8192); -- 탱크(30)
		SetMemory(0x664100, Add, 8192); -- 파이어뱃
		SetMemory(0x664108, Add, 8192); -- 메딕
		SetMemory(0x664168, Add, 8192); -- 발키리

		SetMemory(0x664170, Add, 8192); -- 커세어
		SetMemory(0x664174, Add, 8192); -- 닥템
		SetMemory(0x66417C, Add, 8192); -- 다크 아칸
		SetMemory(0x664184, Add, 8192); -- 질럿
		SetMemory(0x664188, Add, 8192); -- 드라군
		SetMemory(0x66418C, Add, 8192); -- 하템
		SetMemory(0x664190, Add, 8192); -- 아칸
		SetMemory(0x6641CC, Add, 8192); -- 리버
	},
}

Trigger { --
	players = {i-1},
	conditions = {
		Bring(CurrentPlayer, AtLeast, 1, "Men", "Location 99");
	},
	actions = {
		PreserveTrigger();
		
		SetMemory(0x6640A0, Subtract, 8192); -- 레이스
		SetMemory(0x6640B0, Subtract, 8192); -- 배틀
		SetMemory(0x66412C, Subtract, 8192); -- 뮤탈
		SetMemory(0x664130, Subtract, 8192); -- 가디언
		SetMemory(0x664178, Subtract, 8192); -- 디바
		SetMemory(0x664198, Subtract, 8192); -- 스카웃
		SetMemory(0x66419C, Subtract, 8192); -- 아비터
		SetMemory(0x6641A0, Subtract, 8192); -- 캐리어
		
		MoveUnit(All, "Men", CurrentPlayer, "Location 99", "Location "..110+i);
		Order("Men", CurrentPlayer, "Location 99", Move, "Location "..110+i);
		CenterView("Location "..110+i);
		
		SetMemory(0x6640A0, Add, 8192); -- 레이스
		SetMemory(0x6640B0, Add, 8192); -- 배틀
		SetMemory(0x66412C, Add, 8192); -- 뮤탈
		SetMemory(0x664130, Add, 8192); -- 가디언
		SetMemory(0x664178, Add, 8192); -- 디바
		SetMemory(0x664198, Add, 8192); -- 스카웃
		SetMemory(0x66419C, Add, 8192); -- 아비터
		SetMemory(0x6641A0, Add, 8192); -- 캐리어

	},
}
end

for i=1,2 do -- 포스1 팀플존 못벗어나게 하기
Trigger { --
	players = {Force1},
	conditions = {
		Bring(CurrentPlayer, AtLeast, 1, "Men", "Location "..99+i);
	},
	actions = {
		PreserveTrigger();
		
		SetMemory(0x664114, Subtract, 8192); -- 저글링
		SetMemory(0x664118, Subtract, 8192); -- 히드라
		SetMemory(0x66411C, Subtract, 8192); -- 울트라
		SetMemory(0x664120, Subtract, 8192); -- 브루들링
		SetMemory(0x664134, Subtract, 8192); -- 퀸
		SetMemory(0x664138, Subtract, 8192); -- 디파일러
		SetMemory(0x664148, Subtract, 8192); -- 인페 테란
		SetMemory(0x66414C, Subtract, 8192); -- 인페 케리건
		SetMemory(0x66421C, Subtract, 8192); -- 러커
		
		SetMemory(0x664080, Subtract, 8192); -- 마린
		SetMemory(0x664084, Subtract, 8192); -- 고스트
		SetMemory(0x664088, Subtract, 8192); -- 벌처
		SetMemory(0x66408C, Subtract, 8192); -- 골리앗
		SetMemory(0x664094, Subtract, 8192); -- 탱크(5)
		SetMemory(0x66409C, Subtract, 8192); -- SCV
		SetMemory(0x6640A4, Subtract, 8192); -- 배슬
		SetMemory(0x6640F8, Subtract, 8192); -- 탱크(30)
		SetMemory(0x664100, Subtract, 8192); -- 파이어뱃
		SetMemory(0x664108, Subtract, 8192); -- 메딕
		SetMemory(0x664168, Subtract, 8192); -- 발키리

		SetMemory(0x664170, Subtract, 8192); -- 커세어
		SetMemory(0x664174, Subtract, 8192); -- 닥템
		SetMemory(0x66417C, Subtract, 8192); -- 다크 아칸
		SetMemory(0x664184, Subtract, 8192); -- 질럿
		SetMemory(0x664188, Subtract, 8192); -- 드라군
		SetMemory(0x66418C, Subtract, 8192); -- 하템
		SetMemory(0x664190, Subtract, 8192); -- 아칸
		SetMemory(0x6641CC, Subtract, 8192); -- 리버
		
		MoveUnit(All, "Men", CurrentPlayer, "Location "..99+i, "Location 117");
		Order("Men", CurrentPlayer, "Location "..99+i, Move, "Location 117");
		CenterView("Location 117");
		
		SetMemory(0x664114, Add, 8192); -- 저글링
		SetMemory(0x664118, Add, 8192); -- 히드라
		SetMemory(0x66411C, Add, 8192); -- 울트라
		SetMemory(0x664120, Add, 8192); -- 브루들링
		SetMemory(0x664134, Add, 8192); -- 퀸
		SetMemory(0x664138, Add, 8192); -- 디파일러
		SetMemory(0x664148, Add, 8192); -- 인페 테란
		SetMemory(0x66414C, Add, 8192); -- 인페 케리건
		SetMemory(0x66421C, Add, 8192); -- 러커
		
		SetMemory(0x664080, Add, 8192); -- 마린
		SetMemory(0x664084, Add, 8192); -- 고스트
		SetMemory(0x664088, Add, 8192); -- 벌처
		SetMemory(0x66408C, Add, 8192); -- 골리앗
		SetMemory(0x664094, Add, 8192); -- 탱크(5)
		SetMemory(0x66409C, Add, 8192); -- SCV
		SetMemory(0x6640A4, Add, 8192); -- 배슬
		SetMemory(0x6640F8, Add, 8192); -- 탱크(30)
		SetMemory(0x664100, Add, 8192); -- 파이어뱃
		SetMemory(0x664108, Add, 8192); -- 메딕
		SetMemory(0x664168, Add, 8192); -- 발키리

		SetMemory(0x664170, Add, 8192); -- 커세어
		SetMemory(0x664174, Add, 8192); -- 닥템
		SetMemory(0x66417C, Add, 8192); -- 다크 아칸
		SetMemory(0x664184, Add, 8192); -- 질럿
		SetMemory(0x664188, Add, 8192); -- 드라군
		SetMemory(0x66418C, Add, 8192); -- 하템
		SetMemory(0x664190, Add, 8192); -- 아칸
		SetMemory(0x6641CC, Add, 8192); -- 리버
	},
}

Trigger { --
	players = {Force1},
	conditions = {
		Bring(CurrentPlayer, AtLeast, 1, "Men", "Location "..99+i);
	},
	actions = {
		PreserveTrigger();
		
		SetMemory(0x6640A0, Subtract, 8192); -- 레이스
		SetMemory(0x6640B0, Subtract, 8192); -- 배틀
		SetMemory(0x66412C, Subtract, 8192); -- 뮤탈
		SetMemory(0x664130, Subtract, 8192); -- 가디언
		SetMemory(0x664178, Subtract, 8192); -- 디바
		SetMemory(0x664198, Subtract, 8192); -- 스카웃
		SetMemory(0x66419C, Subtract, 8192); -- 아비터
		SetMemory(0x6641A0, Subtract, 8192); -- 캐리어
		
		MoveUnit(All, "Men", CurrentPlayer, "Location "..99+i, "Location 117");
		Order("Men", CurrentPlayer, "Location "..99+i, Move, "Location 117");
		CenterView("Location 117");
		
		SetMemory(0x6640A0, Add, 8192); -- 레이스
		SetMemory(0x6640B0, Add, 8192); -- 배틀
		SetMemory(0x66412C, Add, 8192); -- 뮤탈
		SetMemory(0x664130, Add, 8192); -- 가디언
		SetMemory(0x664178, Add, 8192); -- 디바
		SetMemory(0x664198, Add, 8192); -- 스카웃
		SetMemory(0x66419C, Add, 8192); -- 아비터
		SetMemory(0x6641A0, Add, 8192); -- 캐리어
	},
}
end

erro4 = {};

table.insert(erro4, {102,102,102,102,   103,103,103,103,   104,104,104,104,  
					 105,105,105,105,   106,106,106,106,   107,107,107,107,});
					
for i=1,24 do -- 8,11피 싱글존 못벗어나게 하기
Trigger { --
	players = {P7},
	conditions = {
		Bring(P8, AtLeast, 1, "Men", "Location "..117+i);
	},
	actions = {
		PreserveTrigger();
		Order("Men", P8, "Location "..117+i, Move, "Location "..erro4[1][i]);
	},
}

Trigger { --
	players = {P7},
	conditions = {
		Bring(P11, AtLeast, 1, "Men", "Location "..117+i);
	},
	actions = {
		PreserveTrigger();
		Order("Men", P11, "Location "..117+i, Move, "Location "..erro4[1][i]);
	},
}
end

for i=1,4 do -- 8피 팀플존 못벗어나게 하기
Trigger { --
	players = {P7},
	conditions = {
		Bring(P8, AtLeast, 1, "Men", "Location "..141+i);
	},
	actions = {
		PreserveTrigger();
		Order("Men", P8, "Location "..141+i, Move, "Location 108");
	},
}
end

for i=1,6 do -- 싱글존 라이프 삭제 후 재생성
Trigger { -- 
	players = {i-1},
	conditions = {
		Deaths(CurrentPlayer, AtLeast, 1000, "Vespene Geyser");
	},
	actions = {
		PreserveTrigger();
		SetDeaths(CurrentPlayer, SetTo, 999, "Vespene Geyser");
		RemoveUnitAt(All, "라이프", "Location "..159+i, CurrentPlayer);
		RemoveUnitAt(All, "라이프", "Location 71", CurrentPlayer);
	},
}

Trigger { -- 
	players = {i-1},
	conditions = {
		Switch("Switch 7", Cleared);
		Deaths(CurrentPlayer, Exactly, 999, "Vespene Geyser");
		Bring(CurrentPlayer, Exactly, 0, "라이프", "Location "..159+i);
		Bring(CurrentPlayer, Exactly, 0, "라이프", "Location "..190+i);
	},
	actions = {
		PreserveTrigger();
		SetDeaths(CurrentPlayer, SetTo, 0, "Vespene Geyser");
		CreateUnit(1, "라이프", "Location "..190+i, CurrentPlayer);
		MoveUnit(All, "Men", Force1, "Location "..101+i, "Location "..196+i);
		MoveUnit(1, "라이프", CurrentPlayer, "Location "..190+i, "Location "..101+i);
		SetInvincibility(Disable, "라이프", CurrentPlayer, "Location "..110+i);
		ModifyUnitHitPoints(1, "라이프", CurrentPlayer, "Location "..110+i, 100);
	},
}

Trigger { -- 
	players = {i-1},
	conditions = {
		Switch("Switch 7", Set);
		Deaths(CurrentPlayer, Exactly, 999, "Vespene Geyser");
		Bring(CurrentPlayer, Exactly, 0, "라이프", "Location "..159+i);
		Bring(CurrentPlayer, Exactly, 0, "라이프", "Location "..190+i);
	},
	actions = {
		PreserveTrigger();
		SetDeaths(CurrentPlayer, SetTo, 0, "Vespene Geyser");
		CreateUnit(1, "라이프", "Location 65", CurrentPlayer);
		MoveUnit(1, "라이프", CurrentPlayer, "Location 65", "Location "..190+i);
		MoveUnit(All, "Men", Force1, "Location "..101+i, "Location "..196+i);
		MoveUnit(1, "라이프", CurrentPlayer, "Location "..190+i, "Location "..101+i);
		SetInvincibility(Disable, "라이프", CurrentPlayer, "Location "..110+i);
		ModifyUnitHitPoints(1, "라이프", CurrentPlayer, "Location "..110+i, 100);
	},
}
end

Trigger { -- 팀플존 라이프 재생성 또는 피통 회복, 무적 해제
	players = {P7},
	conditions = {
		Deaths(P7, AtLeast, 1000, "Floor Gun Trap");
	},
	actions = {
		PreserveTrigger();
		SetDeaths(P7, SetTo, 999, "Floor Gun Trap");
		RemoveUnitAt(All, "라이프", "Location 117", AllPlayers);
		RemoveUnitAt(All, "라이프", "Location 203", AllPlayers);
	},
}

Trigger { -- 
	players = {P7},
	conditions = {
		Deaths(P7, Exactly, 999, "Floor Gun Trap");
		Bring(Force1, Exactly, 0, "라이프", "Location 117");
		Bring(Force1, Exactly, 0, "라이프", "Location 203");
	},
	actions = {
		PreserveTrigger();
		SetDeaths(P7, SetTo, 0, "Floor Gun Trap");
		CreateUnitWithProperties(1, "라이프", "Location 65", P8, {
			clocked = false,
			burrowed = false,
			intransit = false,
			hallucinated = false,
			invincible = true,
			hitpoint = 100,
			shield = 100,
			energy = 100,
			resource = 0,
			hanger = 0,
		});
		MoveUnit(1, "라이프", P8, "Location 65", "Location 203");
		MoveUnit(All, "Men", Force1, "Location 108", "Location 204");
		MoveUnit(1, "라이프", P8, "Location 203", "Location 108");
	},
}

Trigger { -- 
	players = {Force1},
	conditions = {
		Bring(P8, AtLeast, 1, "라이프", "Location 117");
	},
	actions = {
		PreserveTrigger();
		GiveUnits(1, "라이프", P8, "Location 117", CurrentPlayer);
		SetInvincibility(Disable, "라이프", CurrentPlayer, "Location 117");
		SetInvincibility(Disable, "라이프", P8, "Location 117");
		ModifyUnitHitPoints(1, "라이프", CurrentPlayer, "Location 117", 100);
	},
}

roundmess = {};

table.insert(roundmess, {206, 72, 146}); 

for i=1,3 do -- 라운드에 따른 유닛 표기용 데스값 (싱글존)
Trigger { -- 
	players = {Force1},
	conditions = {
		Deaths(CurrentPlayer, AtMost, 0, "Kyadarin Crystal Formation");
		Bring(CurrentPlayer, AtLeast, 1, "Men", "Location "..roundmess[1][i]);
	},
	actions = {
		PreserveTrigger();
		SetDeaths(CurrentPlayer, SetTo, 1, "Kyadarin Crystal Formation");
		SetDeaths(CurrentPlayer, SetTo, 0, "Ruins");
	},
}
end

Trigger { -- 라운드에 따른 유닛 표기용 데스값 (팀플존)
	players = {Force1},
	conditions = {
		Deaths(CurrentPlayer, AtMost, 0, "Ruins");
		Bring(CurrentPlayer, AtLeast, 1, "Men", "Location 98");
	},
	actions = {
		PreserveTrigger();
		SetDeaths(CurrentPlayer, SetTo, 0, "Kyadarin Crystal Formation");
		SetDeaths(CurrentPlayer, SetTo, 1, "Ruins");
	},
}

Trigger { -- 
	players = {Force1},
	conditions = {
		Deaths(CurrentPlayer, AtMost, 0, "Ruins");
		Bring(CurrentPlayer, Exactly, 0, "Men", "Location 72");
		Bring(CurrentPlayer, Exactly, 0, "라이프", "Location 72");
		Bring(CurrentPlayer, Exactly, 0, "Men", "Location 206");
		Bring(CurrentPlayer, Exactly, 0, "Men", "Location 146");
	},
	actions = {
		PreserveTrigger();
		SetDeaths(CurrentPlayer, SetTo, 0, "Kyadarin Crystal Formation");
		SetDeaths(CurrentPlayer, SetTo, 1, "Ruins");
	},
}

Trigger { -- 포스1 마인 7피한테 주기
	players = {Force1},
	conditions = {
		Bring(CurrentPlayer, AtLeast, 1, "마인", "Location 214");
	},
	actions = {
		PreserveTrigger();
		GiveUnits(All, "마인", CurrentPlayer, "Location 214", P7);
	},
}

Trigger { -- 플래그 없애기
	players = {AllPlayers},
	conditions = {
		Command(CurrentPlayer, AtLeast, 1, "Flag");
	},
	actions = {
		PreserveTrigger();
		RemoveUnit("Flag", CurrentPlayer);
	},
}

Trigger { -- 
	players = {P7},
	conditions = {
		Bring(P12, AtLeast, 1, "Flag", "Anywhere");
	},
	actions = {
		PreserveTrigger();
		RemoveUnit("Flag", P12);
	},
}

loopswitch = {};

table.insert(loopswitch, {"아비터", "디바우러 [ 지상 공격 가능 ]", "캐리어"}); 
table.insert(loopswitch, {"Right Pit Door", "Left Pit Door", "Right Upper Level Door"}); 
table.insert(loopswitch, {360, 192, 72});
table.insert(loopswitch, {27, 28, 32}); 

for i=1,3 do -- 아비터&디바우러&캐리어 인식 (유닛 루프 조건)
Trigger { -- 
	players = {AllPlayers},
	conditions = {
		Switch("Switch "..loopswitch[4][i], Cleared);
		Command(CurrentPlayer, AtLeast, 1, loopswitch[1][i]);
	},
	actions = {
		PreserveTrigger();
		SetSwitch("Switch "..loopswitch[4][i], Set);
	},
}

Trigger { -- 
	players = {AllPlayers},
	conditions = {
		Deaths(P7, AtLeast, 1, loopswitch[2][i]);
		Command(CurrentPlayer, AtLeast, 1, loopswitch[1][i]);
	},
	actions = {
		PreserveTrigger();
		SetDeaths(P7, SetTo, 0, loopswitch[2][i]);
	},
}

Trigger { -- 
	players = {P7},
	conditions = {
		Switch("Switch "..loopswitch[4][i], Set);
		Deaths(P7, AtMost, 1500, loopswitch[2][i]);
		Command(AllPlayers, Exactly, 0, loopswitch[1][i]);
	},
	actions = {
		PreserveTrigger();
		SetDeaths(P7, Add, 1, loopswitch[2][i]);
	},
}

Trigger { -- 
	players = {P7},
	conditions = {
		Switch("Switch "..loopswitch[4][i], Set);
		Deaths(P7, AtMost, 1500, loopswitch[2][i]);
		Deaths(P7, AtLeast, loopswitch[3][i], loopswitch[2][i]);
		Command(AllPlayers, Exactly, 0, loopswitch[1][i]);
	},
	actions = {
		PreserveTrigger();
		SetDeaths(P7, SetTo, 0, loopswitch[2][i]);
		SetSwitch("Switch "..loopswitch[4][i], Clear);
	},
}
end

Trigger { -- 탱크 시즈 오류 해결
	players = {P7},
	conditions = {
		Switch("Switch 33", Cleared);
		Command(P11, AtLeast, 1, "탱크 (30)");
	},
	actions = {
		PreserveTrigger();
		SetSwitch("Switch 33", Set);
	},
}

Trigger { --
	players = {P7},
	conditions = {
		Switch("Switch 33", Set);
		Command(P11, Exactly, 0, "탱크 (30)");
	},
	actions = {
		PreserveTrigger();
		SetSwitch("Switch 33", Clear);
	},
}

Trigger { -- 피드백용 일부 유닛 마나 100% 유지
	players = {AllPlayers},
	conditions = {
		Command(CurrentPlayer, AtLeast, 1, "스카웃");
	},
	actions = {
		PreserveTrigger();
		ModifyUnitEnergy(All, "스카웃", CurrentPlayer, "Anywhere", 100);
	},
}

Trigger { -- 
	players = {AllPlayers},
	conditions = {
		Command(CurrentPlayer, AtLeast, 1, "레이스");
	},
	actions = {
		PreserveTrigger();
		ModifyUnitEnergy(All, "레이스", CurrentPlayer, "Anywhere", 100);
	},
}

Trigger { -- 
	players = {AllPlayers},
	conditions = {
		Command(CurrentPlayer, AtLeast, 1, "영웅 하이 템플러");
	},
	actions = {
		PreserveTrigger();
		ModifyUnitEnergy(All, "영웅 하이 템플러", CurrentPlayer, "Anywhere", 100);
	},
}

Trigger { -- 
	players = {AllPlayers},
	conditions = {
		Command(CurrentPlayer, AtLeast, 1, "영웅 배틀크루저");
	},
	actions = {
		PreserveTrigger();
		ModifyUnitEnergy(All, "영웅 배틀크루저", CurrentPlayer, "Anywhere", 100);
	},
}

sigemode = {};

table.insert(sigemode, {"탱크 (5)", "탱크 (30)"}); 

for i=1,2 do -- 시즈 탱크 체크
Trigger { -- 
	players = {P7},
	conditions = {
		Switch("Switch "..33+i, Cleared);
		Command(P8, AtLeast, 1, sigemode[1][i]);
	},
	actions = {
		PreserveTrigger();
		SetSwitch("Switch "..33+i, Set);
	},
}

Trigger { -- 
	players = {P7},
	conditions = {
		Switch("Switch "..33+i, Set);
		Command(P8, AtMost, 0, sigemode[1][i]);
	},
	actions = {
		PreserveTrigger();
		SetSwitch("Switch "..33+i, Clear);
	},
}
end

Trigger { -- 영웅 퀸, 영웅 다칸 인식
	players = {AllPlayers},
	conditions = {
		Switch("Switch 37", Cleared);
		Command(CurrentPlayer, AtLeast, 1, "영웅 퀸");
	},
	actions = {
		PreserveTrigger();
		SetSwitch("Switch 37", Set);
	},
}

Trigger { -- 
	players = {AllPlayers},
	conditions = {
		Switch("Switch 37", Cleared);
		Command(CurrentPlayer, AtLeast, 1, "영웅 다크 아칸");
	},
	actions = {
		PreserveTrigger();
		SetSwitch("Switch 37", Set);
	},
}

Trigger { -- 
	players = {AllPlayers},
	conditions = {
		Switch("Switch 37", Set);
		Command(AllPlayers, AtMost, 0, "영웅 퀸");
		Command(AllPlayers, AtMost, 0, "영웅 다크 아칸");
	},
	actions = {
		PreserveTrigger();
		SetSwitch("Switch 37", Clear);
	},
}

Heronojo = {};

table.insert(Heronojo, {"영웅 퀸", "영웅 다크 아칸"}); 

for i=1,2 do -- 영웅 퀸, 다칸 파일런 근처 당도하면 파이어뱃 생산
Trigger { -- 
	players = {P7},
	conditions = {
		Command(P8, Exactly, 0, "파이어뱃");
		Bring(P8, AtLeast, 1, Heronojo[1][i], "Location 235");
	},
	actions = {
		PreserveTrigger();
		SetMemoryX(0x666458, SetTo, 391, 0xFFFF);
		CreateUnit(1, "Scanner Sweep", "Location 89", P8);
		RemoveUnit("Scanner Sweep", P8);		
		CreateUnit(1, "파이어뱃", "Location 89", P8);
		
		SetMemoryX(0x666458, SetTo, 391, 0xFFFF);
		CreateUnit(1, "Scanner Sweep", "Location 90", P8);
		RemoveUnit("Scanner Sweep", P8);		
		CreateUnit(1, "파이어뱃", "Location 90", P8);
		
		Order("파이어뱃", P8, "Location 88", Patrol, "Location 108");
	},
}

Trigger { -- 
	players = {P7},
	conditions = {
		Command(P8, Exactly, 1, "파이어뱃");
		Bring(P8, AtLeast, 1, Heronojo[1][i], "Location 235");
	},
	actions = {
		PreserveTrigger();
		SetMemoryX(0x666458, SetTo, 391, 0xFFFF);
		CreateUnit(1, "Scanner Sweep", "Location 89", P8);
		RemoveUnit("Scanner Sweep", P8);		
		CreateUnit(1, "파이어뱃", "Location 89", P8);
		
		Order("파이어뱃", P8, "Location 88", Patrol, "Location 108");
	},
}
end

Trigger { -- 나간 플레이어 싱글존 유닛 선택
	players = {Force1},
	conditions = {
		Command(CurrentPlayer, AtLeast, 1, "강퇴");
	},
	actions = {
		PreserveTrigger();
		MoveLocation("Location 236", "강퇴", CurrentPlayer, "Location 6");
	},
}

erroplayer1 = {};

table.insert(erroplayer1, {"나간 플레이어의 적 유닛 없애기", "나간 플레이어 적 유닛 안 없애기"}); 
table.insert(erroplayer1, {Clear, Set}); 
table.insert(erroplayer1, {"\x13\x1F──────────────────────────────\r\n\x13\x04이제부터 나간 플레이어의 지역에선 유닛이 나오지 않습니다\r\n\x13\x1F──────────────────────────────\r\n\r\n\r\n\r\n\r\n\r\n", 
"\x13\x1F─────────────────────────────\r\n\x13\x03이제부터 나간 플레이어의 지역에서도 적 유닛이 나옵니다\r\n\x13\x1F─────────────────────────────\r\n\r\n\r\n\r\n\r\n\r\n"}); 

for i=1,2 do --
Trigger { -- 
	players = {Force1},
	conditions = {
		Bring(CurrentPlayer, AtLeast, 1, "강퇴", "Location 236");
		Bring(P7, AtLeast, 1, erroplayer1[1][i], "Location 236");
	},
	actions = {
		PreserveTrigger();
		MoveUnit(1, "강퇴", CurrentPlayer, "Location 236", "Location 6");
		SetSwitch("Switch 41", erroplayer1[2][i]);
		DisplayText(erroplayer1[3][i], 0);
		PlayWAV("staredit\\wav\\sel.wav");
	},
}
end

erroplayer2 = {};

table.insert(erroplayer2, {P8, P11}); 

for i=1,6 do -- 나간 플레이어 싱글존 유닛 없애주기
for m=1,2 do
Trigger { --
	players = {P7},
	conditions = {
		Switch("Switch 41", Cleared);
		Command(i-1, Exactly, 0, "강퇴하기");
		Bring(erroplayer2[1][m], AtLeast, 1, "Men", "Location "..74+(2*i));
	},
	actions = {
		PreserveTrigger();
		RemoveUnitAt(All, "Men", "Location "..74+(2*i), erroplayer2[1][m]);
	},
}
end
end

round = {}; -- 03-1. 라운드 인식 및 랜덤 유닛 뽑기 / 각종 설정 초기화

table.insert(round, {2,2,2,2,2, 2,2,2,2,2, 3,3,3,3,3, 3,3,3,3,3, 4,4,4,4,4, 4,4,4,4,4});

unitbozon = {};
                      -- 1                     2            3              4                  5       6                 7                        8                          9
table.insert(unitbozon, {"Khaydarin Crystal", "Data Disc", "Psi Emitter", "Young Chrysalis", "Flag", "Start Location", "Right Wall Flame Trap", "Right Wall Missile Trap", "Left Wall Flame Trap"});

                      -- 1                          2                 3                 4                5                         6                        7                       8                     9             
table.insert(unitbozon, {"Left Wall Missile Trap", "Floor Gun Trap", "Right Pit Door", "Left Pit Door", "Right Upper Level Door", "Left Upper Level Door", "Floor Hatch (UNUSED)", "Floor Missile Trap", "Dark Swarm", 
					    --10                 11                 12                     13
						 "Overmind Cocoon", "Power Generator", "Protoss Flag Beacon", "Easy Mode"});
						
                      -- 1                                2                     3
table.insert(unitbozon, {"전에 뽑았던 유닛 다시 사용하기", "랜덤 유닛 다시 뽑기", "난이도 다시 선택"});

restarts = {}; -- 03-1. 라운드 인식 및 랜덤 유닛 뽑기 / 각종 설정 초기화

table.insert(restarts, {Cleared, Set});
table.insert(restarts, {26,26,26,26,26, 26,26,26,26,26, 31,31,31,31,31, 31,31,31,31,31, 31,31,31,31,31, 31,31,31,31,31});

for i=1,30 do -- 03-1. 라운드 인식 및 랜덤 유닛 뽑기 / 각종 설정 초기화
for m=1,2 do
Trigger { --
	players = {P7},
	conditions = {
		Switch("Switch 19", restarts[1][m]); -- 재도전 여부 판정
		Deaths(P7, Exactly, i, "Mineral Chunk (Type 1)"); -- 라운드 인식
		Deaths(P7, AtMost, 0, "Young Chrysalis");
	},
	actions = {
		PreserveTrigger();
		SetDeaths(P7, SetTo, 1001, "Young Chrysalis");	
		SetCountdownTimer(SetTo, restarts[2][i]+4*(m-1)); -- 카운트 타이머
		
		RemoveUnitAt(All, "Men", "Location 214", Force1); -- 싱글&팀플존 유닛 삭제
		RemoveUnitAt(All, "Men", "Location 214", P7);
		RemoveUnitAt(All, "Men", "Location 214", P8);
		RemoveUnitAt(All, "Men", "Location 214", P11);
		RemoveUnitAt(All, "Choice", "Location 146", Force1); -- 재도전 시민 삭제
		RemoveUnitAt(All, "Men", "Location 205", Force1); -- 대기 유닛 삭제
		RemoveUnitAt(All, "Men", "Location 206", Force1); -- 뽑기 유닛 삭제 / 이거 오류날 수 있음 프로브 안 나올 수도 있음
		RemoveUnitAt(All, "Men", "Location 159", P8); -- 8피 팀플 대기 유닛 삭제
		RemoveUnitAt(All, "Men", "Location 110", P8); -- 8피 싱글 대기 유닛 삭제
		RemoveUnitAt(All, "Men", "Location 110", P7); -- 7피 로케 65지역 포함 유닛 삭제
		
		RemoveUnit("Dark Swarm", P12); -- 스윔&웹 없애기
		RemoveUnit("Disruption Field", P12);
		
		SetSwitch("Switch 9", Clear); -- 싱글존 적 유닛 이동 후 최초 공격
		SetSwitch("Switch 10", Clear);
		SetSwitch("Switch 11", Clear);
		SetSwitch("Switch 12", Clear);
		SetSwitch("Switch 13", Clear);
		SetSwitch("Switch 14", Clear);
		SetSwitch("Switch 15", Clear); -- 싱글 라운드 승리 인식 다시 꺼주기
		SetSwitch("Switch 16", Clear); -- 팀플존 적 유닛 이동 후 최초 공격
		SetSwitch("Switch 17", Clear); -- 팀플존 최초 공격 보조1
		SetSwitch("Switch 18", Clear); -- 팀플존 최초 공격 보조2
		SetSwitch("Switch 19", Clear); -- 재시작이면 카운트 다운 시간 3초 더 주는 용도
		SetSwitch("Switch 36", Clear); -- 22 라운드 이후 추가 유닛 더 생산하기
		SetSwitch("Switch 38", Clear); -- 28 라운드 뮤탈 추가 생산
		
		SetDeaths(P7, SetTo, 0, "Left Wall Flame Trap"); -- 싱글존 전원 패배시 재시작전 카운트
		SetDeaths(P7, SetTo, 0, "Left Wall Missile Trap"); -- 팀플존 패배시 재시작전 카운트
		SetDeaths(P7, SetTo, 1000, "Floor Gun Trap"); -- 팀플존 라이프 생성
		SetDeaths(P7, SetTo, 0, "Right Wall Flame Trap"); -- 싱글존 1명 이상 클리어해서 팀플존 넘어가기전 대기
		SetDeaths(P7, SetTo, 0, "Right Wall Missile Trap"); -- 팀플존 승리인식전 대기
		
		SetDeaths(Force1, SetTo, 1, "Kyadarin Crystal Formation"); -- 싱글존 유닛 알림 메시지
		SetDeaths(Force1, SetTo, 0, "Ruins"); -- 팀플존 유닛 알림 메시지
		
		SetDeaths(Force1, SetTo, round[1][i], "Vespene Sac (Zerg Type 1)"); -- 뽑기용 프로브 숫자
		SetDeaths(Force1, SetTo, 1000, "Vespene Geyser"); -- 싱글존 라이프 생성
		SetDeaths(Force1, SetTo, 1000, "다른 라운드부터 하기"); -- 라운드 시작할 때마다 나는 소리
		SetDeaths(Force1, SetTo, 0, "처음부터 하기"); -- 싱글 라운드 개인 승리 인식 대기 데스값
		SetDeaths(Force1, SetTo, 1, "Kyadarin Crystal Formation"); -- 싱글존 유닛 나오는 거 알려주는 메시지
		SetDeaths(Force1, SetTo, 0, "Ruins"); -- 팀플존 유닛 나오는 거 알려주는 메시지
	},
}
end
end

Trigger { -- 라운드 시작할 때마다 플레이어 소리
	players = {Force1},
	conditions = {
		Deaths(CurrentPlayer, AtLeast, 1000, "다른 라운드부터 하기");
	},
	actions = {
		PreserveTrigger();
		SetDeaths(CurrentPlayer, SetTo, 0, "다른 라운드부터 하기");
		PlayWAV("staredit\\wav\\levelup.ogg");
	},
}

Trigger { -- 카운트 타이머 전 2초 대기
	players = {P7},
	conditions = {
		Deaths(P7, AtMost, 1048, "Young Chrysalis");
		Deaths(P7, AtLeast, 1001, "Young Chrysalis");
	},
	actions = {
		PreserveTrigger();
		SetDeaths(P7, Add, 1, "Young Chrysalis");
	},
}

for i=1,6 do -- 데스값에 따라 랜덤 뽑기용 프로브 생산 / 테스트 포함
Trigger { --
	players = {i-1},
	conditions = {
		Switch("Switch 7", Cleared);
		Deaths(CurrentPlayer, Exactly, 2, "Vespene Sac (Zerg Type 1)");
		Deaths(CurrentPlayer, AtMost, 0, "Normal Mode");
	},
	actions = {
		PreserveTrigger();
		SetDeaths(CurrentPlayer, SetTo, 0, "Vespene Sac (Zerg Type 1)");
		
		RemoveUnitAt(All, "Men", "Location 214", CurrentPlayer); -- 싱글&팀플존 유닛 삭제
		RemoveUnitAt(All, "Men", "Location 214", P7);
		RemoveUnitAt(All, "Men", "Location 214", P8);
		RemoveUnitAt(All, "Men", "Location 214", P11);
		RemoveUnitAt(All, "Choice", "Location 146", CurrentPlayer); -- 재도전 시민 삭제
		RemoveUnitAt(All, "Men", "Location 205", CurrentPlayer); -- 대기 유닛 삭제
		RemoveUnitAt(All, "Men", "Location 206", CurrentPlayer); -- 뽑기 유닛 삭제
		RemoveUnitAt(All, "Men", "Location 159", P8); -- 8피 팀플 대기 유닛 삭제
		RemoveUnitAt(All, "Men", "Location 110", P8); -- 8피 싱글 대기 유닛 삭제
		
		SetDeaths(CurrentPlayer, SetTo, 1000, "Normal Mode"); -- 라운드 실패했을 때 유닛 보존할지 선택하기 전까지 대기용
		SetDeaths(CurrentPlayer, SetTo, 1000, "Hard Mode"); -- 유닛 보존 초기화
		GiveUnits(2, "Zerg Drone", P9, "Location "..44+(2*i), P10);
		
		MoveLocation("Location "..12+(2*i), "Zerg Drone", P9, "Location "..44+(i*2));
		CreateUnit(1, "랜덤 유닛 뽑기", "Location "..12+(2*i), CurrentPlayer);
		GiveUnits(1, "Zerg Drone", P9, "Location "..12+(2*i), P10);
		
		MoveLocation("Location "..12+(2*i), "Zerg Drone", P9, "Location "..44+(i*2));
		CreateUnit(1, "마법 유닛 뽑기", "Location "..12+(2*i), CurrentPlayer);
		
		GiveUnits(All, "Zerg Drone", P10, "Location "..44+(i*2), P9);
		SetInvincibility(Enable, "마법 유닛 뽑기", CurrentPlayer, "Location 71");
		SetInvincibility(Enable, "랜덤 유닛 뽑기", CurrentPlayer, "Location 71");
	},
}

Trigger { --
	players = {i-1},
	conditions = {
		Switch("Switch 7", Cleared);
		Deaths(CurrentPlayer, Exactly, 3, "Vespene Sac (Zerg Type 1)");
		Deaths(CurrentPlayer, AtMost, 0, "Normal Mode");
	},
	actions = {
		PreserveTrigger();
		SetDeaths(CurrentPlayer, SetTo, 0, "Vespene Sac (Zerg Type 1)");
		
		RemoveUnitAt(All, "Men", "Location 214", CurrentPlayer); -- 싱글&팀플존 유닛 삭제
		RemoveUnitAt(All, "Men", "Location 214", P7);
		RemoveUnitAt(All, "Men", "Location 214", P8);
		RemoveUnitAt(All, "Men", "Location 214", P11);
		RemoveUnitAt(All, "Choice", "Location 146", CurrentPlayer); -- 재도전 시민 삭제
		RemoveUnitAt(All, "Men", "Location 205", CurrentPlayer); -- 대기 유닛 삭제
		RemoveUnitAt(All, "Men", "Location 206", CurrentPlayer); -- 뽑기 유닛 삭제
		RemoveUnitAt(All, "Men", "Location 159", P8); -- 8피 팀플 대기 유닛 삭제
		RemoveUnitAt(All, "Men", "Location 110", P8); -- 8피 싱글 대기 유닛 삭제
		
		SetDeaths(CurrentPlayer, SetTo, 1000, "Normal Mode"); -- 라운드 실패했을 때 유닛 보존할지 선택하기 전까지 대기용
		SetDeaths(CurrentPlayer, SetTo, 1000, "Hard Mode"); -- 유닛 보존 초기화
		GiveUnits(1, "Zerg Drone", P9, "Location "..44+(2*i), P10);
		
		MoveLocation("Location "..12+(2*i), "Zerg Drone", P9, "Location "..44+(i*2));
		CreateUnit(1, "랜덤 유닛 뽑기", "Location "..12+(2*i), CurrentPlayer);
		GiveUnits(1, "Zerg Drone", P9, "Location "..12+(2*i), P10);
		
		MoveLocation("Location "..12+(2*i), "Zerg Drone", P9, "Location "..44+(i*2));
		CreateUnit(1, "랜덤 유닛 뽑기", "Location "..12+(2*i), CurrentPlayer);
		GiveUnits(1, "Zerg Drone", P9, "Location "..12+(2*i), P10);
		
		MoveLocation("Location "..12+(2*i), "Zerg Drone", P9, "Location "..44+(i*2));
		CreateUnit(1, "마법 유닛 뽑기", "Location "..12+(2*i), CurrentPlayer);
		
		GiveUnits(All, "Zerg Drone", P10, "Location "..44+(i*2), P9);
		SetInvincibility(Enable, "마법 유닛 뽑기", CurrentPlayer, "Location 71");
		SetInvincibility(Enable, "랜덤 유닛 뽑기", CurrentPlayer, "Location 71");
	},
}

Trigger { --
	players = {i-1},
	conditions = {
		Switch("Switch 7", Cleared);
		Deaths(CurrentPlayer, Exactly, 4, "Vespene Sac (Zerg Type 1)");
		Deaths(CurrentPlayer, AtMost, 0, "Normal Mode");
	},
	actions = {
		PreserveTrigger();
		SetDeaths(CurrentPlayer, SetTo, 0, "Vespene Sac (Zerg Type 1)");
		
		RemoveUnitAt(All, "Men", "Location 214", CurrentPlayer); -- 싱글&팀플존 유닛 삭제
		RemoveUnitAt(All, "Men", "Location 214", P7);
		RemoveUnitAt(All, "Men", "Location 214", P8);
		RemoveUnitAt(All, "Men", "Location 214", P11);
		RemoveUnitAt(All, "Choice", "Location 146", CurrentPlayer); -- 재도전 시민 삭제
		RemoveUnitAt(All, "Men", "Location 205", CurrentPlayer); -- 대기 유닛 삭제
		RemoveUnitAt(All, "Men", "Location 206", CurrentPlayer); -- 뽑기 유닛 삭제
		RemoveUnitAt(All, "Men", "Location 159", P8); -- 8피 팀플 대기 유닛 삭제
		RemoveUnitAt(All, "Men", "Location 110", P8); -- 8피 싱글 대기 유닛 삭제
		
		SetDeaths(CurrentPlayer, SetTo, 1000, "Normal Mode"); -- 라운드 실패했을 때 유닛 보존할지 선택하기 전까지 대기용
		SetDeaths(CurrentPlayer, SetTo, 1000, "Hard Mode"); -- 유닛 보존 초기화
		
		MoveLocation("Location "..12+(2*i), "Zerg Drone", P9, "Location "..44+(i*2));
		CreateUnit(1, "랜덤 유닛 뽑기", "Location "..12+(2*i), CurrentPlayer);
		GiveUnits(1, "Zerg Drone", P9, "Location "..12+(2*i), P10);
		
		MoveLocation("Location "..12+(2*i), "Zerg Drone", P9, "Location "..44+(i*2));
		CreateUnit(1, "랜덤 유닛 뽑기", "Location "..12+(2*i), CurrentPlayer);
		GiveUnits(1, "Zerg Drone", P9, "Location "..12+(2*i), P10);
		
		MoveLocation("Location "..12+(2*i), "Zerg Drone", P9, "Location "..44+(i*2));
		CreateUnit(1, "마법 유닛 뽑기", "Location "..12+(2*i), CurrentPlayer);
		GiveUnits(1, "Zerg Drone", P9, "Location "..12+(2*i), P10);
		
		MoveLocation("Location "..12+(2*i), "Zerg Drone", P9, "Location "..44+(i*2));
		CreateUnit(1, "마법 유닛 뽑기", "Location "..12+(2*i), CurrentPlayer);
		
		GiveUnits(All, "Zerg Drone", P10, "Location "..44+(i*2), P9);
		SetInvincibility(Enable, "마법 유닛 뽑기", CurrentPlayer, "Location 71");
		SetInvincibility(Enable, "랜덤 유닛 뽑기", CurrentPlayer, "Location 71");
	},
}

Trigger { --
	players = {i-1},
	conditions = {
		Switch("Switch 7", Cleared);
		Deaths(CurrentPlayer, Exactly, 5, "Vespene Sac (Zerg Type 1)");
		Deaths(CurrentPlayer, AtMost, 0, "Normal Mode");
	},
	actions = {
		PreserveTrigger();
		SetDeaths(CurrentPlayer, SetTo, 0, "Vespene Sac (Zerg Type 1)");
		
		RemoveUnitAt(All, "Men", "Location 214", CurrentPlayer); -- 싱글&팀플존 유닛 삭제
		RemoveUnitAt(All, "Men", "Location 214", P7);
		RemoveUnitAt(All, "Men", "Location 214", P8);
		RemoveUnitAt(All, "Men", "Location 214", P11);
		RemoveUnitAt(All, "Choice", "Location 146", CurrentPlayer); -- 재도전 시민 삭제
		RemoveUnitAt(All, "Men", "Location 205", CurrentPlayer); -- 대기 유닛 삭제
		RemoveUnitAt(All, "Men", "Location 206", CurrentPlayer); -- 뽑기 유닛 삭제
		RemoveUnitAt(All, "Men", "Location 159", P8); -- 8피 팀플 대기 유닛 삭제
		RemoveUnitAt(All, "Men", "Location 110", P8); -- 8피 싱글 대기 유닛 삭제
		
		SetDeaths(CurrentPlayer, SetTo, 1000, "Normal Mode"); -- 라운드 실패했을 때 유닛 보존할지 선택하기 전까지 대기용
		SetDeaths(CurrentPlayer, SetTo, 1000, "Hard Mode"); -- 유닛 보존 초기화
		GiveUnits(3, "Zerg Drone", P9, "Location "..44+(2*i), P10);
		
		MoveLocation("Location "..12+(2*i), "Zerg Drone", P9, "Location "..44+(i*2));
		CreateUnit(1, "랜덤 유닛 뽑기", "Location "..12+(2*i), CurrentPlayer);
		GiveUnits(1, "Zerg Drone", P9, "Location "..12+(2*i), P10);
		
		MoveLocation("Location "..12+(2*i), "Zerg Drone", P9, "Location "..44+(i*2));
		CreateUnit(1, "랜덤 유닛 뽑기", "Location "..12+(2*i), CurrentPlayer);
		GiveUnits(1, "Zerg Drone", P9, "Location "..12+(2*i), P10);
		
		MoveLocation("Location "..12+(2*i), "Zerg Drone", P9, "Location "..44+(i*2));
		CreateUnit(1, "랜덤 유닛 뽑기", "Location "..12+(2*i), CurrentPlayer);
		GiveUnits(1, "Zerg Drone", P9, "Location "..12+(2*i), P10);
		
		MoveLocation("Location "..12+(2*i), "Zerg Drone", P9, "Location "..44+(i*2));
		CreateUnit(1, "마법 유닛 뽑기", "Location "..12+(2*i), CurrentPlayer);
		GiveUnits(1, "Zerg Drone", P9, "Location "..12+(2*i), P10);
		
		MoveLocation("Location "..12+(2*i), "Zerg Drone", P9, "Location "..44+(i*2));
		CreateUnit(1, "마법 유닛 뽑기", "Location "..12+(2*i), CurrentPlayer);
		
		GiveUnits(All, "Zerg Drone", P10, "Location "..44+(i*2), P9);
		SetInvincibility(Enable, "마법 유닛 뽑기", CurrentPlayer, "Location 71");
		SetInvincibility(Enable, "랜덤 유닛 뽑기", CurrentPlayer, "Location 71");
	},
}

Trigger { --
	players = {i-1},
	conditions = {
		Switch("Switch 7", Cleared);
		Deaths(CurrentPlayer, Exactly, 6, "Vespene Sac (Zerg Type 1)");
		Deaths(CurrentPlayer, AtMost, 0, "Normal Mode");
	},
	actions = {
		PreserveTrigger();
		SetDeaths(CurrentPlayer, SetTo, 0, "Vespene Sac (Zerg Type 1)");
		
		RemoveUnitAt(All, "Men", "Location 214", CurrentPlayer); -- 싱글&팀플존 유닛 삭제
		RemoveUnitAt(All, "Men", "Location 214", P7);
		RemoveUnitAt(All, "Men", "Location 214", P8);
		RemoveUnitAt(All, "Men", "Location 214", P11);
		RemoveUnitAt(All, "Choice", "Location 146", CurrentPlayer); -- 재도전 시민 삭제
		RemoveUnitAt(All, "Men", "Location 205", CurrentPlayer); -- 대기 유닛 삭제
		RemoveUnitAt(All, "Men", "Location 206", CurrentPlayer); -- 뽑기 유닛 삭제
		RemoveUnitAt(All, "Men", "Location 159", P8); -- 8피 팀플 대기 유닛 삭제
		RemoveUnitAt(All, "Men", "Location 110", P8); -- 8피 싱글 대기 유닛 삭제
		
		SetDeaths(CurrentPlayer, SetTo, 1000, "Normal Mode"); -- 라운드 실패했을 때 유닛 보존할지 선택하기 전까지 대기용
		SetDeaths(CurrentPlayer, SetTo, 1000, "Hard Mode"); -- 유닛 보존 초기화
		GiveUnits(2, "Zerg Drone", P9, "Location "..44+(2*i), P10);
		
		MoveLocation("Location "..12+(2*i), "Zerg Drone", P9, "Location "..44+(i*2));
		CreateUnit(1, "랜덤 유닛 뽑기", "Location "..12+(2*i), CurrentPlayer);
		GiveUnits(1, "Zerg Drone", P9, "Location "..12+(2*i), P10);
		
		MoveLocation("Location "..12+(2*i), "Zerg Drone", P9, "Location "..44+(i*2));
		CreateUnit(1, "랜덤 유닛 뽑기", "Location "..12+(2*i), CurrentPlayer);
		GiveUnits(1, "Zerg Drone", P9, "Location "..12+(2*i), P10);
		
		MoveLocation("Location "..12+(2*i), "Zerg Drone", P9, "Location "..44+(i*2));
		CreateUnit(1, "랜덤 유닛 뽑기", "Location "..12+(2*i), CurrentPlayer);
		GiveUnits(1, "Zerg Drone", P9, "Location "..12+(2*i), P10);
		
		MoveLocation("Location "..12+(2*i), "Zerg Drone", P9, "Location "..44+(i*2));
		CreateUnit(1, "랜덤 유닛 뽑기", "Location "..12+(2*i), CurrentPlayer);
		GiveUnits(1, "Zerg Drone", P9, "Location "..12+(2*i), P10);
		
		MoveLocation("Location "..12+(2*i), "Zerg Drone", P9, "Location "..44+(i*2));
		CreateUnit(1, "마법 유닛 뽑기", "Location "..12+(2*i), CurrentPlayer);
		GiveUnits(1, "Zerg Drone", P9, "Location "..12+(2*i), P10);
		
		MoveLocation("Location "..12+(2*i), "Zerg Drone", P9, "Location "..44+(i*2));
		CreateUnit(1, "마법 유닛 뽑기", "Location "..12+(2*i), CurrentPlayer);
		
		GiveUnits(All, "Zerg Drone", P10, "Location "..44+(i*2), P9);
		SetInvincibility(Enable, "마법 유닛 뽑기", CurrentPlayer, "Location 71");
		SetInvincibility(Enable, "랜덤 유닛 뽑기", CurrentPlayer, "Location 71");
	},
}
end

for i=1,6 do -- 
Trigger { --
	players = {i-1},
	conditions = {
		Switch("Switch 7", Set);
		Deaths(CurrentPlayer, Exactly, 2, "Vespene Sac (Zerg Type 1)");
		Deaths(CurrentPlayer, AtMost, 0, "Normal Mode");
	},
	actions = {
		PreserveTrigger();
		SetDeaths(CurrentPlayer, SetTo, 0, "Vespene Sac (Zerg Type 1)");
		
		RemoveUnitAt(All, "Men", "Location 214", CurrentPlayer); -- 싱글&팀플존 유닛 삭제
		RemoveUnitAt(All, "Men", "Location 214", P7);
		RemoveUnitAt(All, "Men", "Location 214", P8);
		RemoveUnitAt(All, "Men", "Location 214", P11);
		RemoveUnitAt(All, "Choice", "Location 146", CurrentPlayer); -- 재도전 시민 삭제
		RemoveUnitAt(All, "Men", "Location 205", CurrentPlayer); -- 대기 유닛 삭제
		RemoveUnitAt(All, "Men", "Location 206", CurrentPlayer); -- 뽑기 유닛 삭제
		RemoveUnitAt(All, "Men", "Location 159", P8); -- 8피 팀플 대기 유닛 삭제
		RemoveUnitAt(All, "Men", "Location 110", P8); -- 8피 싱글 대기 유닛 삭제
		
		SetDeaths(CurrentPlayer, SetTo, 1000, "Normal Mode"); -- 라운드 실패했을 때 유닛 보존할지 선택하기 전까지 대기용
		SetDeaths(CurrentPlayer, SetTo, 1000, "Hard Mode"); -- 유닛 보존 초기화
		GiveUnits(2, "Zerg Drone", P9, "Location "..44+(2*i), P10);
		
		MoveLocation("Location "..12+(2*i), "Zerg Drone", P9, "Location "..44+(i*2));
		CreateUnit(1, "랜덤 유닛 뽑기", "Location 65", CurrentPlayer);
		MoveUnit(1, "랜덤 유닛 뽑기", CurrentPlayer, "Location 65", "Location "..12+(2*i));
		GiveUnits(1, "Zerg Drone", P9, "Location "..12+(2*i), P10);
		
		MoveLocation("Location "..12+(2*i), "Zerg Drone", P9, "Location "..44+(i*2));
		CreateUnit(1, "마법 유닛 뽑기", "Location 65", CurrentPlayer);
		MoveUnit(1, "마법 유닛 뽑기", CurrentPlayer, "Location 65", "Location "..12+(2*i));
		
		GiveUnits(All, "Zerg Drone", P10, "Location "..44+(i*2), P9);
		SetInvincibility(Enable, "마법 유닛 뽑기", CurrentPlayer, "Location 71");
		SetInvincibility(Enable, "랜덤 유닛 뽑기", CurrentPlayer, "Location 71");
	},
}

Trigger { --
	players = {i-1},
	conditions = {
		Switch("Switch 7", Set);
		Deaths(CurrentPlayer, Exactly, 3, "Vespene Sac (Zerg Type 1)");
		Deaths(CurrentPlayer, AtMost, 0, "Normal Mode");
	},
	actions = {
		PreserveTrigger();
		SetDeaths(CurrentPlayer, SetTo, 0, "Vespene Sac (Zerg Type 1)");
		
		RemoveUnitAt(All, "Men", "Location 214", CurrentPlayer); -- 싱글&팀플존 유닛 삭제
		RemoveUnitAt(All, "Men", "Location 214", P7);
		RemoveUnitAt(All, "Men", "Location 214", P8);
		RemoveUnitAt(All, "Men", "Location 214", P11);
		RemoveUnitAt(All, "Choice", "Location 146", CurrentPlayer); -- 재도전 시민 삭제
		RemoveUnitAt(All, "Men", "Location 205", CurrentPlayer); -- 대기 유닛 삭제
		RemoveUnitAt(All, "Men", "Location 206", CurrentPlayer); -- 뽑기 유닛 삭제
		RemoveUnitAt(All, "Men", "Location 159", P8); -- 8피 팀플 대기 유닛 삭제
		RemoveUnitAt(All, "Men", "Location 110", P8); -- 8피 싱글 대기 유닛 삭제
		
		SetDeaths(CurrentPlayer, SetTo, 1000, "Normal Mode"); -- 라운드 실패했을 때 유닛 보존할지 선택하기 전까지 대기용
		SetDeaths(CurrentPlayer, SetTo, 1000, "Hard Mode"); -- 유닛 보존 초기화
		GiveUnits(1, "Zerg Drone", P9, "Location "..44+(2*i), P10);
		
		MoveLocation("Location "..12+(2*i), "Zerg Drone", P9, "Location "..44+(i*2));
		CreateUnit(1, "랜덤 유닛 뽑기", "Location 65", CurrentPlayer);
		MoveUnit(1, "랜덤 유닛 뽑기", CurrentPlayer, "Location 65", "Location "..12+(2*i));
		GiveUnits(1, "Zerg Drone", P9, "Location "..12+(2*i), P10);
		
		MoveLocation("Location "..12+(2*i), "Zerg Drone", P9, "Location "..44+(i*2));
		CreateUnit(1, "랜덤 유닛 뽑기", "Location 65", CurrentPlayer);
		MoveUnit(1, "랜덤 유닛 뽑기", CurrentPlayer, "Location 65", "Location "..12+(2*i));
		GiveUnits(1, "Zerg Drone", P9, "Location "..12+(2*i), P10);
		
		MoveLocation("Location "..12+(2*i), "Zerg Drone", P9, "Location "..44+(i*2));
		CreateUnit(1, "마법 유닛 뽑기", "Location 65", CurrentPlayer);
		MoveUnit(1, "마법 유닛 뽑기", CurrentPlayer, "Location 65", "Location "..12+(2*i));
		
		GiveUnits(All, "Zerg Drone", P10, "Location "..44+(i*2), P9);
		SetInvincibility(Enable, "마법 유닛 뽑기", CurrentPlayer, "Location 71");
		SetInvincibility(Enable, "랜덤 유닛 뽑기", CurrentPlayer, "Location 71");
	},
}

Trigger { --
	players = {i-1},
	conditions = {
		Switch("Switch 7", Set);
		Deaths(CurrentPlayer, Exactly, 4, "Vespene Sac (Zerg Type 1)");
		Deaths(CurrentPlayer, AtMost, 0, "Normal Mode");
	},
	actions = {
		PreserveTrigger();
		SetDeaths(CurrentPlayer, SetTo, 0, "Vespene Sac (Zerg Type 1)");
		
		RemoveUnitAt(All, "Men", "Location 214", CurrentPlayer); -- 싱글&팀플존 유닛 삭제
		RemoveUnitAt(All, "Men", "Location 214", P7);
		RemoveUnitAt(All, "Men", "Location 214", P8);
		RemoveUnitAt(All, "Men", "Location 214", P11);
		RemoveUnitAt(All, "Choice", "Location 146", CurrentPlayer); -- 재도전 시민 삭제
		RemoveUnitAt(All, "Men", "Location 205", CurrentPlayer); -- 대기 유닛 삭제
		RemoveUnitAt(All, "Men", "Location 206", CurrentPlayer); -- 뽑기 유닛 삭제
		RemoveUnitAt(All, "Men", "Location 159", P8); -- 8피 팀플 대기 유닛 삭제
		RemoveUnitAt(All, "Men", "Location 110", P8); -- 8피 싱글 대기 유닛 삭제
		
		SetDeaths(CurrentPlayer, SetTo, 1000, "Normal Mode"); -- 라운드 실패했을 때 유닛 보존할지 선택하기 전까지 대기용
		SetDeaths(CurrentPlayer, SetTo, 1000, "Hard Mode"); -- 유닛 보존 초기화
		
		MoveLocation("Location "..12+(2*i), "Zerg Drone", P9, "Location "..44+(i*2));
		CreateUnit(1, "랜덤 유닛 뽑기", "Location 65", CurrentPlayer);
		MoveUnit(1, "랜덤 유닛 뽑기", CurrentPlayer, "Location 65", "Location "..12+(2*i));
		GiveUnits(1, "Zerg Drone", P9, "Location "..12+(2*i), P10);
		
		MoveLocation("Location "..12+(2*i), "Zerg Drone", P9, "Location "..44+(i*2));
		CreateUnit(1, "랜덤 유닛 뽑기", "Location 65", CurrentPlayer);
		MoveUnit(1, "랜덤 유닛 뽑기", CurrentPlayer, "Location 65", "Location "..12+(2*i));
		GiveUnits(1, "Zerg Drone", P9, "Location "..12+(2*i), P10);
		
		MoveLocation("Location "..12+(2*i), "Zerg Drone", P9, "Location "..44+(i*2));
		CreateUnit(1, "마법 유닛 뽑기", "Location 65", CurrentPlayer);
		MoveUnit(1, "마법 유닛 뽑기", CurrentPlayer, "Location 65", "Location "..12+(2*i));
		GiveUnits(1, "Zerg Drone", P9, "Location "..12+(2*i), P10);
		
		MoveLocation("Location "..12+(2*i), "Zerg Drone", P9, "Location "..44+(i*2));
		CreateUnit(1, "마법 유닛 뽑기", "Location 65", CurrentPlayer);
		MoveUnit(1, "마법 유닛 뽑기", CurrentPlayer, "Location 65", "Location "..12+(2*i));
		
		GiveUnits(All, "Zerg Drone", P10, "Location "..44+(i*2), P9);
		SetInvincibility(Enable, "마법 유닛 뽑기", CurrentPlayer, "Location 71");
		SetInvincibility(Enable, "랜덤 유닛 뽑기", CurrentPlayer, "Location 71");
	},
}

Trigger { --
	players = {i-1},
	conditions = {
		Switch("Switch 7", Set);
		Deaths(CurrentPlayer, Exactly, 5, "Vespene Sac (Zerg Type 1)");
		Deaths(CurrentPlayer, AtMost, 0, "Normal Mode");
	},
	actions = {
		PreserveTrigger();
		SetDeaths(CurrentPlayer, SetTo, 0, "Vespene Sac (Zerg Type 1)");
		
		RemoveUnitAt(All, "Men", "Location 214", CurrentPlayer); -- 싱글&팀플존 유닛 삭제
		RemoveUnitAt(All, "Men", "Location 214", P7);
		RemoveUnitAt(All, "Men", "Location 214", P8);
		RemoveUnitAt(All, "Men", "Location 214", P11);
		RemoveUnitAt(All, "Choice", "Location 146", CurrentPlayer); -- 재도전 시민 삭제
		RemoveUnitAt(All, "Men", "Location 205", CurrentPlayer); -- 대기 유닛 삭제
		RemoveUnitAt(All, "Men", "Location 206", CurrentPlayer); -- 뽑기 유닛 삭제
		RemoveUnitAt(All, "Men", "Location 159", P8); -- 8피 팀플 대기 유닛 삭제
		RemoveUnitAt(All, "Men", "Location 110", P8); -- 8피 싱글 대기 유닛 삭제
		
		SetDeaths(CurrentPlayer, SetTo, 1000, "Normal Mode"); -- 라운드 실패했을 때 유닛 보존할지 선택하기 전까지 대기용
		SetDeaths(CurrentPlayer, SetTo, 1000, "Hard Mode"); -- 유닛 보존 초기화
		GiveUnits(3, "Zerg Drone", P9, "Location "..44+(2*i), P10);
		
		MoveLocation("Location "..12+(2*i), "Zerg Drone", P9, "Location "..44+(i*2));
		CreateUnit(1, "랜덤 유닛 뽑기", "Location 65", CurrentPlayer);
		MoveUnit(1, "랜덤 유닛 뽑기", CurrentPlayer, "Location 65", "Location "..12+(2*i));
		GiveUnits(1, "Zerg Drone", P9, "Location "..12+(2*i), P10);
		
		MoveLocation("Location "..12+(2*i), "Zerg Drone", P9, "Location "..44+(i*2));
		CreateUnit(1, "랜덤 유닛 뽑기", "Location 65", CurrentPlayer);
		MoveUnit(1, "랜덤 유닛 뽑기", CurrentPlayer, "Location 65", "Location "..12+(2*i));
		GiveUnits(1, "Zerg Drone", P9, "Location "..12+(2*i), P10);
		
		MoveLocation("Location "..12+(2*i), "Zerg Drone", P9, "Location "..44+(i*2));
		CreateUnit(1, "랜덤 유닛 뽑기", "Location 65", CurrentPlayer);
		MoveUnit(1, "랜덤 유닛 뽑기", CurrentPlayer, "Location 65", "Location "..12+(2*i));
		GiveUnits(1, "Zerg Drone", P9, "Location "..12+(2*i), P10);
		
		MoveLocation("Location "..12+(2*i), "Zerg Drone", P9, "Location "..44+(i*2));
		CreateUnit(1, "마법 유닛 뽑기", "Location 65", CurrentPlayer);
		MoveUnit(1, "마법 유닛 뽑기", CurrentPlayer, "Location 65", "Location "..12+(2*i));
		GiveUnits(1, "Zerg Drone", P9, "Location "..12+(2*i), P10);
		
		MoveLocation("Location "..12+(2*i), "Zerg Drone", P9, "Location "..44+(i*2));
		CreateUnit(1, "마법 유닛 뽑기", "Location 65", CurrentPlayer);
		MoveUnit(1, "마법 유닛 뽑기", CurrentPlayer, "Location 65", "Location "..12+(2*i));
		
		GiveUnits(All, "Zerg Drone", P10, "Location "..44+(i*2), P9);
		SetInvincibility(Enable, "마법 유닛 뽑기", CurrentPlayer, "Location 71");
		SetInvincibility(Enable, "랜덤 유닛 뽑기", CurrentPlayer, "Location 71");
	},
}

Trigger { --
	players = {i-1},
	conditions = {
		Switch("Switch 7", Set);
		Deaths(CurrentPlayer, Exactly, 6, "Vespene Sac (Zerg Type 1)");
		Deaths(CurrentPlayer, AtMost, 0, "Normal Mode");
	},
	actions = {
		PreserveTrigger();
		SetDeaths(CurrentPlayer, SetTo, 0, "Vespene Sac (Zerg Type 1)");
		
		RemoveUnitAt(All, "Men", "Location 214", CurrentPlayer); -- 싱글&팀플존 유닛 삭제
		RemoveUnitAt(All, "Men", "Location 214", P7);
		RemoveUnitAt(All, "Men", "Location 214", P8);
		RemoveUnitAt(All, "Men", "Location 214", P11);
		RemoveUnitAt(All, "Choice", "Location 146", CurrentPlayer); -- 재도전 시민 삭제
		RemoveUnitAt(All, "Men", "Location 205", CurrentPlayer); -- 대기 유닛 삭제
		RemoveUnitAt(All, "Men", "Location 206", CurrentPlayer); -- 뽑기 유닛 삭제
		RemoveUnitAt(All, "Men", "Location 159", P8); -- 8피 팀플 대기 유닛 삭제
		RemoveUnitAt(All, "Men", "Location 110", P8); -- 8피 싱글 대기 유닛 삭제
		
		SetDeaths(CurrentPlayer, SetTo, 1000, "Normal Mode"); -- 라운드 실패했을 때 유닛 보존할지 선택하기 전까지 대기용
		SetDeaths(CurrentPlayer, SetTo, 1000, "Hard Mode"); -- 유닛 보존 초기화
		GiveUnits(2, "Zerg Drone", P9, "Location "..44+(2*i), P10);
		
		MoveLocation("Location "..12+(2*i), "Zerg Drone", P9, "Location "..44+(i*2));
		CreateUnit(1, "랜덤 유닛 뽑기", "Location 65", CurrentPlayer);
		MoveUnit(1, "랜덤 유닛 뽑기", CurrentPlayer, "Location 65", "Location "..12+(2*i));
		GiveUnits(1, "Zerg Drone", P9, "Location "..12+(2*i), P10);
		
		MoveLocation("Location "..12+(2*i), "Zerg Drone", P9, "Location "..44+(i*2));
		CreateUnit(1, "랜덤 유닛 뽑기", "Location 65", CurrentPlayer);
		MoveUnit(1, "랜덤 유닛 뽑기", CurrentPlayer, "Location 65", "Location "..12+(2*i));
		GiveUnits(1, "Zerg Drone", P9, "Location "..12+(2*i), P10);
		
		MoveLocation("Location "..12+(2*i), "Zerg Drone", P9, "Location "..44+(i*2));
		CreateUnit(1, "랜덤 유닛 뽑기", "Location 65", CurrentPlayer);
		MoveUnit(1, "랜덤 유닛 뽑기", CurrentPlayer, "Location 65", "Location "..12+(2*i));
		GiveUnits(1, "Zerg Drone", P9, "Location "..12+(2*i), P10);
		
		MoveLocation("Location "..12+(2*i), "Zerg Drone", P9, "Location "..44+(i*2));
		CreateUnit(1, "랜덤 유닛 뽑기", "Location 65", CurrentPlayer);
		MoveUnit(1, "랜덤 유닛 뽑기", CurrentPlayer, "Location 65", "Location "..12+(2*i));
		GiveUnits(1, "Zerg Drone", P9, "Location "..12+(2*i), P10);
		
		MoveLocation("Location "..12+(2*i), "Zerg Drone", P9, "Location "..44+(i*2));
		CreateUnit(1, "마법 유닛 뽑기", "Location 65", CurrentPlayer);
		MoveUnit(1, "마법 유닛 뽑기", CurrentPlayer, "Location 65", "Location "..12+(2*i));
		GiveUnits(1, "Zerg Drone", P9, "Location "..12+(2*i), P10);
		
		MoveLocation("Location "..12+(2*i), "Zerg Drone", P9, "Location "..44+(i*2));
		CreateUnit(1, "마법 유닛 뽑기", "Location 65", CurrentPlayer);
		MoveUnit(1, "마법 유닛 뽑기", CurrentPlayer, "Location 65", "Location "..12+(2*i));
		
		GiveUnits(All, "Zerg Drone", P10, "Location "..44+(i*2), P9);
		SetInvincibility(Enable, "마법 유닛 뽑기", CurrentPlayer, "Location 71");
		SetInvincibility(Enable, "랜덤 유닛 뽑기", CurrentPlayer, "Location 71");
	},
}
end

Trigger { -- 유닛 보존 초기화
	players = {Force1},
	conditions = {
		Deaths(CurrentPlayer, AtLeast, 1000, "Hard Mode");
	},
	actions = {
		PreserveTrigger();
		SetDeaths(CurrentPlayer, SetTo, 0, "Hard Mode");
		
		SetDeaths(CurrentPlayer, SetTo, 0, unitbozon[1][1]);
		SetDeaths(CurrentPlayer, SetTo, 0, unitbozon[1][2]);
		SetDeaths(CurrentPlayer, SetTo, 0, unitbozon[1][3]);
		SetDeaths(CurrentPlayer, SetTo, 0, unitbozon[1][4]);
		SetDeaths(CurrentPlayer, SetTo, 0, unitbozon[1][5]);
		SetDeaths(CurrentPlayer, SetTo, 0, unitbozon[1][6]);
		SetDeaths(CurrentPlayer, SetTo, 0, unitbozon[1][7]);
		SetDeaths(CurrentPlayer, SetTo, 0, unitbozon[1][8]);
		SetDeaths(CurrentPlayer, SetTo, 0, unitbozon[1][9]);
		
		SetDeaths(CurrentPlayer, SetTo, 0, unitbozon[2][1]);
		SetDeaths(CurrentPlayer, SetTo, 0, unitbozon[2][2]);
		SetDeaths(CurrentPlayer, SetTo, 0, unitbozon[2][3]);
		SetDeaths(CurrentPlayer, SetTo, 0, unitbozon[2][4]);
		SetDeaths(CurrentPlayer, SetTo, 0, unitbozon[2][5]);
		SetDeaths(CurrentPlayer, SetTo, 0, unitbozon[2][6]);
		SetDeaths(CurrentPlayer, SetTo, 0, unitbozon[2][7]);
		SetDeaths(CurrentPlayer, SetTo, 0, unitbozon[2][8]);
		SetDeaths(CurrentPlayer, SetTo, 0, unitbozon[2][9]);
		SetDeaths(CurrentPlayer, SetTo, 0, unitbozon[2][10]);
		SetDeaths(CurrentPlayer, SetTo, 0, unitbozon[2][11]);
		SetDeaths(CurrentPlayer, SetTo, 0, unitbozon[2][12]);
		SetDeaths(CurrentPlayer, SetTo, 0, unitbozon[2][13]);
		
		SetDeaths(CurrentPlayer, SetTo, 0, unitbozon[3][1]);
		SetDeaths(CurrentPlayer, SetTo, 0, unitbozon[3][2]);
		SetDeaths(CurrentPlayer, SetTo, 0, unitbozon[3][3]);
	},
}

random1 = {};
                    -- 1 2 3 4 5  6  7  8   9   10
table.insert(random1, {1,2,4,8,16,32,64,128,256,512});

magic = {};

table.insert(magic, {113, 227, 340, 454, 568, 682, 796, 910, 1023});
table.insert(magic, {0,   114, 228, 341, 455, 569, 683, 797, 911});

table.insert(magic, {"퀸 \x031", "디파일러 \x031", "인페스티드 케리건 \x031",   "사이언스 배슬 \x031", "고스트 \x031", "메딕 \x031",   "커세어 [ 지상 공격 가능 ] \x031", "다크 아칸 \x031", "하이 템플러 \x031"}); -- 9개
table.insert(magic, {1,1,1,   1,1,1,   1,1,1});
table.insert(magic, {"퀸", "디파일러", "인페스티드 케리건",   "사이언스 배슬", "고스트", "메딕",   "커세어 [ 지상 공격 가능 ]", "다크 아칸", "하이 템플러"});
-- 위에 5개

normal = {};

table.insert(normal, {63,127,191,255,319,383,447,511,575,639,703,767,831});
table.insert(normal, {0, 64, 128,192,256,320,384,448,512,576,640,704,768});
-- 3
table.insert(normal, {"울트라리스크 \x032", "아칸 \x032", "탱크 \x032", "러커 \x033", "인페스티드 테란 \x034", "벌처 \x033", "히드라리스크 \x036", "드라군 \x034", "질럿 \x036", "다크 템플러 \x034", "저글링 \x0315", "골리앗 \x034", "발키리 [ 지상 공격 가능 ] \x033"}); -- 13개
--4					
table.insert(normal, {2,2,2,3,4,3,   6,4,6,4,15,4,3}); 
--5					
table.insert(normal, {"울트라리스크", "아칸", "탱크 (5)", "러커", "인페스티드 테란", "벌처", "히드라리스크", "드라군", "질럿", "다크 템플러", "저글링", "골리앗", "발키리 [ 지상 공격 가능 ]"});
-- 6,7
table.insert(normal, {895,959,1023});
table.insert(normal, {832,896,960});

--8
table.insert(normal, {"리버 \x031 \x04SCV \x031", "마린 \x036 \x04메딕 \x031", "파이어뱃 \x036 \x04메딕 \x031"}); -- 3개 (16개)
--9~12
table.insert(normal, {1,6,6});
table.insert(normal, {"리버", "마린", "파이어뱃"}); -- 10
table.insert(normal, {1,1,1});
table.insert(normal, {"SCV", "메딕", "메딕"}); -- 12

for i=1,6 do -- 랜덤 확률용 스위치&데스값 - 마법 유닛
for m=1,10 do
Trigger { --
	players = {i-1},
	conditions = {
		Always();
	},
	actions = {
		PreserveTrigger();
		SetSwitch("Switch "..i, Random);
	},
}

Trigger { --
	players = {i-1},
	conditions = {
		Switch("Switch "..i, Set);
	},
	actions = {
		PreserveTrigger();
		SetDeaths(CurrentPlayer, Add, random1[1][m], "Mineral Chunk (Type 2)");
	},
}
end
end

for i=1,6 do -- 마법 유닛 목록 / 테스트 포함
for m=1,9 do
Trigger { --
	players = {i-1},
	conditions = {
		Switch("Switch 7", Cleared);
		Deaths(CurrentPlayer, AtMost, magic[1][m], "Mineral Chunk (Type 2)");
		Deaths(CurrentPlayer, AtLeast, magic[2][m], "Mineral Chunk (Type 2)");
		Bring(CurrentPlayer, AtLeast, 1, "마법 유닛 뽑기", "Location "..45+(2*i));
	},
	actions = {
		PreserveTrigger();
		RemoveUnitAt(1, "마법 유닛 뽑기", "Location "..45+(2*i), CurrentPlayer);
		SetDeaths(CurrentPlayer, Add, 1, unitbozon[1][m]);
		DisplayText("\x04"..magic[3][m].."", 0);
		CreateUnit(magic[4][m], magic[5][m], "Location "..57+i, CurrentPlayer);
		PlayWAV("staredit\\wav\\ComBeep0.wav");
	},
}

Trigger { --
	players = {i-1},
	conditions = {
		Switch("Switch 7", Set);
		Deaths(CurrentPlayer, AtMost, magic[1][m], "Mineral Chunk (Type 2)");
		Deaths(CurrentPlayer, AtLeast, magic[2][m], "Mineral Chunk (Type 2)");
		Bring(CurrentPlayer, AtLeast, 1, "마법 유닛 뽑기", "Location "..45+(2*i));
	},
	actions = {
		PreserveTrigger();
		RemoveUnitAt(1, "마법 유닛 뽑기", "Location "..45+(2*i), CurrentPlayer);
		SetDeaths(CurrentPlayer, Add, 1, unitbozon[1][m]);
		DisplayText("\x04"..magic[3][m].."", 0);
		CreateUnit(magic[4][m], magic[5][m], "Location 65", CurrentPlayer);
		
		SetMemory(0x664114, Subtract, 8192); -- 저글링
		SetMemory(0x664118, Subtract, 8192); -- 히드라
		SetMemory(0x66411C, Subtract, 8192); -- 울트라
		SetMemory(0x664134, Subtract, 8192); -- 퀸
		SetMemory(0x664138, Subtract, 8192); -- 디파일러
		SetMemory(0x664148, Subtract, 8192); -- 인페 테란
		SetMemory(0x66414C, Subtract, 8192); -- 인페 케리건
		SetMemory(0x66421C, Subtract, 8192); -- 러커
		
		SetMemory(0x664080, Subtract, 8192); -- 마린
		SetMemory(0x664084, Subtract, 8192); -- 고스트
		SetMemory(0x664088, Subtract, 8192); -- 벌처
		SetMemory(0x66408C, Subtract, 8192); -- 골리앗
		SetMemory(0x664094, Subtract, 8192); -- 탱크(5)
		SetMemory(0x66409C, Subtract, 8192); -- SCV
		SetMemory(0x6640A4, Subtract, 8192); -- 배슬
		SetMemory(0x664100, Subtract, 8192); -- 파이어뱃
		SetMemory(0x664108, Subtract, 8192); -- 메딕
		SetMemory(0x664168, Subtract, 8192); -- 발키리

		SetMemory(0x664170, Subtract, 8192); -- 커세어
		SetMemory(0x664174, Subtract, 8192); -- 닥템
		SetMemory(0x66417C, Subtract, 8192); -- 다크 아칸
		SetMemory(0x664184, Subtract, 8192); -- 질럿
		SetMemory(0x664188, Subtract, 8192); -- 드라군
		SetMemory(0x66418C, Subtract, 8192); -- 하템
		SetMemory(0x664190, Subtract, 8192); -- 아칸
		SetMemory(0x6641CC, Subtract, 8192); -- 리버
		
		MoveUnit(All, "Men", CurrentPlayer, "Location 65", "Location "..57+i);
		
		SetMemory(0x664114, Add, 8192); -- 저글링
		SetMemory(0x664118, Add, 8192); -- 히드라
		SetMemory(0x66411C, Add, 8192); -- 울트라
		SetMemory(0x664134, Add, 8192); -- 퀸
		SetMemory(0x664138, Add, 8192); -- 디파일러
		SetMemory(0x664148, Add, 8192); -- 인페 테란
		SetMemory(0x66414C, Add, 8192); -- 인페 케리건
		SetMemory(0x66421C, Add, 8192); -- 러커
		
		SetMemory(0x664080, Add, 8192); -- 마린
		SetMemory(0x664084, Add, 8192); -- 고스트
		SetMemory(0x664088, Add, 8192); -- 벌처
		SetMemory(0x66408C, Add, 8192); -- 골리앗
		SetMemory(0x664094, Add, 8192); -- 탱크(5)
		SetMemory(0x66409C, Add, 8192); -- SCV
		SetMemory(0x6640A4, Add, 8192); -- 배슬
		SetMemory(0x664100, Add, 8192); -- 파이어뱃
		SetMemory(0x664108, Add, 8192); -- 메딕
		SetMemory(0x664168, Add, 8192); -- 발키리

		SetMemory(0x664170, Add, 8192); -- 커세어
		SetMemory(0x664174, Add, 8192); -- 닥템
		SetMemory(0x66417C, Add, 8192); -- 다크 아칸
		SetMemory(0x664184, Add, 8192); -- 질럿
		SetMemory(0x664188, Add, 8192); -- 드라군
		SetMemory(0x66418C, Add, 8192); -- 하템
		SetMemory(0x664190, Add, 8192); -- 아칸
		SetMemory(0x6641CC, Add, 8192); -- 리버
		
		PlayWAV("staredit\\wav\\ComBeep0.wav");
	},
}
end
end

for i=1,6 do -- 랜덤 확률용 데스값 초기화 - 마법 유닛
Trigger { --
	players = {i-1},
	conditions = {
		Always();
	},
	actions = {
		PreserveTrigger();
		SetDeaths(CurrentPlayer, SetTo, 0, "Mineral Chunk (Type 2)");
	},
}
end

for i=1,6 do -- 랜덤 확률용 스위치&데스값 - 일반 유닛
for m=1,10 do
Trigger { --
	players = {i-1},
	conditions = {
		Always();
	},
	actions = {
		PreserveTrigger();
		SetSwitch("Switch "..19+i, Random);
	},
}


Trigger { --
	players = {i-1},
	conditions = {
		Switch("Switch "..19+i, Set);
	},
	actions = {
		PreserveTrigger();
		SetDeaths(CurrentPlayer, Add, random1[1][m], "Independent Starport");
	},
}
end
end

for i=1,6 do -- 일반 유닛 목록 (1) / 테스트 포함
for m=1,13 do
Trigger { --
	players = {i-1},
	conditions = {
		Switch("Switch 7", Cleared);
		Deaths(CurrentPlayer, AtMost, normal[1][m], "Independent Starport");
		Deaths(CurrentPlayer, AtLeast, normal[2][m], "Independent Starport");
		Bring(CurrentPlayer, AtLeast, 1, "랜덤 유닛 뽑기", "Location "..45+(2*i));
	},
	actions = {
		PreserveTrigger();
		RemoveUnitAt(1, "랜덤 유닛 뽑기", "Location "..45+(2*i), CurrentPlayer);
		SetDeaths(CurrentPlayer, Add, 1, unitbozon[2][m]);
		DisplayText("\x04"..normal[3][m].."", 0);
		CreateUnit(normal[4][m], normal[5][m], "Location "..57+i, CurrentPlayer);
		PlayWAV("staredit\\wav\\ComBeep0.wav");
	},
}

Trigger { --
	players = {i-1},
	conditions = {
		Switch("Switch 7", Set);
		Deaths(CurrentPlayer, AtMost, normal[1][m], "Independent Starport");
		Deaths(CurrentPlayer, AtLeast, normal[2][m], "Independent Starport");
		Bring(CurrentPlayer, AtLeast, 1, "랜덤 유닛 뽑기", "Location "..45+(2*i));
	},
	actions = {
		PreserveTrigger();
		RemoveUnitAt(1, "랜덤 유닛 뽑기", "Location "..45+(2*i), CurrentPlayer);
		SetDeaths(CurrentPlayer, Add, 1, unitbozon[2][m]);
		DisplayText("\x04"..normal[3][m].."", 0);
		CreateUnit(normal[4][m], normal[5][m], "Location 65", CurrentPlayer);
		
		SetMemory(0x664114, Subtract, 8192); -- 저글링
		SetMemory(0x664118, Subtract, 8192); -- 히드라
		SetMemory(0x66411C, Subtract, 8192); -- 울트라
		SetMemory(0x664134, Subtract, 8192); -- 퀸
		SetMemory(0x664138, Subtract, 8192); -- 디파일러
		SetMemory(0x664148, Subtract, 8192); -- 인페 테란
		SetMemory(0x66414C, Subtract, 8192); -- 인페 케리건
		SetMemory(0x66421C, Subtract, 8192); -- 러커
		
		SetMemory(0x664080, Subtract, 8192); -- 마린
		SetMemory(0x664084, Subtract, 8192); -- 고스트
		SetMemory(0x664088, Subtract, 8192); -- 벌처
		SetMemory(0x66408C, Subtract, 8192); -- 골리앗
		SetMemory(0x664094, Subtract, 8192); -- 탱크(5)
		SetMemory(0x66409C, Subtract, 8192); -- SCV
		SetMemory(0x6640A4, Subtract, 8192); -- 배슬
		SetMemory(0x664100, Subtract, 8192); -- 파이어뱃
		SetMemory(0x664108, Subtract, 8192); -- 메딕
		SetMemory(0x664168, Subtract, 8192); -- 발키리

		SetMemory(0x664170, Subtract, 8192); -- 커세어
		SetMemory(0x664174, Subtract, 8192); -- 닥템
		SetMemory(0x66417C, Subtract, 8192); -- 다크 아칸
		SetMemory(0x664184, Subtract, 8192); -- 질럿
		SetMemory(0x664188, Subtract, 8192); -- 드라군
		SetMemory(0x66418C, Subtract, 8192); -- 하템
		SetMemory(0x664190, Subtract, 8192); -- 아칸
		SetMemory(0x6641CC, Subtract, 8192); -- 리버
		
		MoveUnit(All, "Men", CurrentPlayer, "Location 65", "Location "..57+i);
		
		SetMemory(0x664114, Add, 8192); -- 저글링
		SetMemory(0x664118, Add, 8192); -- 히드라
		SetMemory(0x66411C, Add, 8192); -- 울트라
		SetMemory(0x664134, Add, 8192); -- 퀸
		SetMemory(0x664138, Add, 8192); -- 디파일러
		SetMemory(0x664148, Add, 8192); -- 인페 테란
		SetMemory(0x66414C, Add, 8192); -- 인페 케리건
		SetMemory(0x66421C, Add, 8192); -- 러커
		
		SetMemory(0x664080, Add, 8192); -- 마린
		SetMemory(0x664084, Add, 8192); -- 고스트
		SetMemory(0x664088, Add, 8192); -- 벌처
		SetMemory(0x66408C, Add, 8192); -- 골리앗
		SetMemory(0x664094, Add, 8192); -- 탱크(5)
		SetMemory(0x66409C, Add, 8192); -- SCV
		SetMemory(0x6640A4, Add, 8192); -- 배슬
		SetMemory(0x664100, Add, 8192); -- 파이어뱃
		SetMemory(0x664108, Add, 8192); -- 메딕
		SetMemory(0x664168, Add, 8192); -- 발키리

		SetMemory(0x664170, Add, 8192); -- 커세어
		SetMemory(0x664174, Add, 8192); -- 닥템
		SetMemory(0x66417C, Add, 8192); -- 다크 아칸
		SetMemory(0x664184, Add, 8192); -- 질럿
		SetMemory(0x664188, Add, 8192); -- 드라군
		SetMemory(0x66418C, Add, 8192); -- 하템
		SetMemory(0x664190, Add, 8192); -- 아칸
		SetMemory(0x6641CC, Add, 8192); -- 리버
		
		PlayWAV("staredit\\wav\\ComBeep0.wav");
	},
}
end
end

for i=1,6 do -- 일반 유닛 목록 (2) / 테스트 포함
for m=1,3 do
Trigger { --
	players = {i-1},
	conditions = {
		Switch("Switch 7", Cleared);
		Deaths(CurrentPlayer, AtMost, normal[6][m], "Independent Starport");
		Deaths(CurrentPlayer, AtLeast, normal[7][m], "Independent Starport");
		Bring(CurrentPlayer, AtLeast, 1, "랜덤 유닛 뽑기", "Location "..45+(2*i));
	},
	actions = {
		PreserveTrigger();
		RemoveUnitAt(1, "랜덤 유닛 뽑기", "Location "..45+(2*i), CurrentPlayer);
		SetDeaths(CurrentPlayer, Add, 1, unitbozon[3][m]);
		DisplayText("\x04"..normal[8][m].."", 0);
		CreateUnit(normal[9][m], normal[10][m], "Location "..57+i, CurrentPlayer);
		CreateUnit(normal[11][m], normal[12][m], "Location "..57+i, CurrentPlayer);
		PlayWAV("staredit\\wav\\ComBeep0.wav");
	},
}

Trigger { --
	players = {i-1},
	conditions = {
		Switch("Switch 7", Set);
		Deaths(CurrentPlayer, AtMost, normal[6][m], "Independent Starport");
		Deaths(CurrentPlayer, AtLeast, normal[7][m], "Independent Starport");
		Bring(CurrentPlayer, AtLeast, 1, "랜덤 유닛 뽑기", "Location "..45+(2*i));
	},
	actions = {
		PreserveTrigger();
		RemoveUnitAt(1, "랜덤 유닛 뽑기", "Location "..45+(2*i), CurrentPlayer);
		SetDeaths(CurrentPlayer, Add, 1, unitbozon[3][m]);
		DisplayText("\x04"..normal[8][m].."", 0);
		CreateUnit(normal[9][m], normal[10][m], "Location 65", CurrentPlayer);
		CreateUnit(normal[11][m], normal[12][m], "Location 65", CurrentPlayer);
		
		SetMemory(0x664114, Subtract, 8192); -- 저글링
		SetMemory(0x664118, Subtract, 8192); -- 히드라
		SetMemory(0x66411C, Subtract, 8192); -- 울트라
		SetMemory(0x664134, Subtract, 8192); -- 퀸
		SetMemory(0x664138, Subtract, 8192); -- 디파일러
		SetMemory(0x664148, Subtract, 8192); -- 인페 테란
		SetMemory(0x66414C, Subtract, 8192); -- 인페 케리건
		SetMemory(0x66421C, Subtract, 8192); -- 러커
		
		SetMemory(0x664080, Subtract, 8192); -- 마린
		SetMemory(0x664084, Subtract, 8192); -- 고스트
		SetMemory(0x664088, Subtract, 8192); -- 벌처
		SetMemory(0x66408C, Subtract, 8192); -- 골리앗
		SetMemory(0x664094, Subtract, 8192); -- 탱크(5)
		SetMemory(0x66409C, Subtract, 8192); -- SCV
		SetMemory(0x6640A4, Subtract, 8192); -- 배슬
		SetMemory(0x664100, Subtract, 8192); -- 파이어뱃
		SetMemory(0x664108, Subtract, 8192); -- 메딕
		SetMemory(0x664168, Subtract, 8192); -- 발키리

		SetMemory(0x664170, Subtract, 8192); -- 커세어
		SetMemory(0x664174, Subtract, 8192); -- 닥템
		SetMemory(0x66417C, Subtract, 8192); -- 다크 아칸
		SetMemory(0x664184, Subtract, 8192); -- 질럿
		SetMemory(0x664188, Subtract, 8192); -- 드라군
		SetMemory(0x66418C, Subtract, 8192); -- 하템
		SetMemory(0x664190, Subtract, 8192); -- 아칸
		SetMemory(0x6641CC, Subtract, 8192); -- 리버
		
		MoveUnit(All, "Men", CurrentPlayer, "Location 65", "Location "..57+i);
		
		SetMemory(0x664114, Add, 8192); -- 저글링
		SetMemory(0x664118, Add, 8192); -- 히드라
		SetMemory(0x66411C, Add, 8192); -- 울트라
		SetMemory(0x664134, Add, 8192); -- 퀸
		SetMemory(0x664138, Add, 8192); -- 디파일러
		SetMemory(0x664148, Add, 8192); -- 인페 테란
		SetMemory(0x66414C, Add, 8192); -- 인페 케리건
		SetMemory(0x66421C, Add, 8192); -- 러커
		
		SetMemory(0x664080, Add, 8192); -- 마린
		SetMemory(0x664084, Add, 8192); -- 고스트
		SetMemory(0x664088, Add, 8192); -- 벌처
		SetMemory(0x66408C, Add, 8192); -- 골리앗
		SetMemory(0x664094, Add, 8192); -- 탱크(5)
		SetMemory(0x66409C, Add, 8192); -- SCV
		SetMemory(0x6640A4, Add, 8192); -- 배슬
		SetMemory(0x664100, Add, 8192); -- 파이어뱃
		SetMemory(0x664108, Add, 8192); -- 메딕
		SetMemory(0x664168, Add, 8192); -- 발키리

		SetMemory(0x664170, Add, 8192); -- 커세어
		SetMemory(0x664174, Add, 8192); -- 닥템
		SetMemory(0x66417C, Add, 8192); -- 다크 아칸
		SetMemory(0x664184, Add, 8192); -- 질럿
		SetMemory(0x664188, Add, 8192); -- 드라군
		SetMemory(0x66418C, Add, 8192); -- 하템
		SetMemory(0x664190, Add, 8192); -- 아칸
		SetMemory(0x6641CC, Add, 8192); -- 리버
		
		PlayWAV("staredit\\wav\\ComBeep0.wav");
	},
}
end
end

for i=1,6 do -- 랜덤 확률용 데스값 초기화 - 일반 유닛
Trigger { --
	players = {i-1},
	conditions = {
		Always();
	},
	actions = {
		PreserveTrigger();
		SetDeaths(CurrentPlayer, SetTo, 0, "Independent Starport");
	},
}
end

for i=1,6 do -- 플레이어 유닛 싱글존으로 이동 / 마나, 무적, 체력, 쉴드 설정
Trigger { -- 
	players = {i-1},
	conditions = {
		Switch("Switch 7", Cleared);
		Bring(CurrentPlayer, AtLeast, 1, "Men", "Location "..57+i);
	},
	actions = {
		PreserveTrigger();
		SetInvincibility(Enable, "Men", CurrentPlayer, "Location "..57+i);
		ModifyUnitEnergy(All, "Men", CurrentPlayer, "Location "..57+i, 100);
		ModifyUnitHitPoints(All, "Men", CurrentPlayer, "Location "..57+i, 100);
		ModifyUnitShields(All, "Men", CurrentPlayer, "Location "..57+i, 100);
		
		SetMemory(0x664114, Subtract, 8192); -- 저글링
		SetMemory(0x664118, Subtract, 8192); -- 히드라
		SetMemory(0x66411C, Subtract, 8192); -- 울트라
		SetMemory(0x664120, Subtract, 8192); -- 브루들링
		SetMemory(0x664134, Subtract, 8192); -- 퀸
		SetMemory(0x664138, Subtract, 8192); -- 디파일러
		SetMemory(0x664148, Subtract, 8192); -- 인페 테란
		SetMemory(0x66414C, Subtract, 8192); -- 인페 케리건
		SetMemory(0x66421C, Subtract, 8192); -- 러커
		
		SetMemory(0x664080, Subtract, 8192); -- 마린
		SetMemory(0x664084, Subtract, 8192); -- 고스트
		SetMemory(0x664088, Subtract, 8192); -- 벌처
		SetMemory(0x66408C, Subtract, 8192); -- 골리앗
		SetMemory(0x664094, Subtract, 8192); -- 탱크(5)
		SetMemory(0x66409C, Subtract, 8192); -- SCV
		SetMemory(0x6640A4, Subtract, 8192); -- 배슬
		SetMemory(0x6640F8, Subtract, 8192); -- 탱크(30)
		SetMemory(0x664100, Subtract, 8192); -- 파이어뱃
		SetMemory(0x664108, Subtract, 8192); -- 메딕
		SetMemory(0x664168, Subtract, 8192); -- 발키리

		SetMemory(0x664170, Subtract, 8192); -- 커세어
		SetMemory(0x664174, Subtract, 8192); -- 닥템
		SetMemory(0x66417C, Subtract, 8192); -- 다크 아칸
		SetMemory(0x664184, Subtract, 8192); -- 질럿
		SetMemory(0x664188, Subtract, 8192); -- 드라군
		SetMemory(0x66418C, Subtract, 8192); -- 하템
		SetMemory(0x664190, Subtract, 8192); -- 아칸
		SetMemory(0x6641CC, Subtract, 8192); -- 리버
		
		MoveUnit(All, "Men", CurrentPlayer, "Location "..57+i, "Location "..57+i);
		MoveUnit(All, "Men", CurrentPlayer, "Location "..57+i, "Location "..75+(2*i));
		
		SetMemory(0x664114, Add, 8192); -- 저글링
		SetMemory(0x664118, Add, 8192); -- 히드라
		SetMemory(0x66411C, Add, 8192); -- 울트라
		SetMemory(0x664120, Add, 8192); -- 브루들링
		SetMemory(0x664134, Add, 8192); -- 퀸
		SetMemory(0x664138, Add, 8192); -- 디파일러
		SetMemory(0x664148, Add, 8192); -- 인페 테란
		SetMemory(0x66414C, Add, 8192); -- 인페 케리건
		SetMemory(0x66421C, Add, 8192); -- 러커
		
		SetMemory(0x664080, Add, 8192); -- 마린
		SetMemory(0x664084, Add, 8192); -- 고스트
		SetMemory(0x664088, Add, 8192); -- 벌처
		SetMemory(0x66408C, Add, 8192); -- 골리앗
		SetMemory(0x664094, Add, 8192); -- 탱크(5)
		SetMemory(0x66409C, Add, 8192); -- SCV
		SetMemory(0x6640A4, Add, 8192); -- 배슬
		SetMemory(0x6640F8, Add, 8192); -- 탱크(30)
		SetMemory(0x664100, Add, 8192); -- 파이어뱃
		SetMemory(0x664108, Add, 8192); -- 메딕
		SetMemory(0x664168, Add, 8192); -- 발키리

		SetMemory(0x664170, Add, 8192); -- 커세어
		SetMemory(0x664174, Add, 8192); -- 닥템
		SetMemory(0x66417C, Add, 8192); -- 다크 아칸
		SetMemory(0x664184, Add, 8192); -- 질럿
		SetMemory(0x664188, Add, 8192); -- 드라군
		SetMemory(0x66418C, Add, 8192); -- 하템
		SetMemory(0x664190, Add, 8192); -- 아칸
		SetMemory(0x6641CC, Add, 8192); -- 리버
	},
}

Trigger { -- 
	players = {i-1},
	conditions = {
		Switch("Switch 7", Set);
		Bring(CurrentPlayer, AtLeast, 1, "Men", "Location "..57+i);
	},
	actions = {
		PreserveTrigger();
		SetInvincibility(Enable, "Men", CurrentPlayer, "Location "..57+i);
		ModifyUnitEnergy(All, "Men", CurrentPlayer, "Location "..57+i, 100);
		ModifyUnitHitPoints(All, "Men", CurrentPlayer, "Location "..57+i, 100);
		ModifyUnitShields(All, "Men", CurrentPlayer, "Location "..57+i, 100);
		
		SetMemory(0x664114, Subtract, 8192); -- 저글링
		SetMemory(0x664118, Subtract, 8192); -- 히드라
		SetMemory(0x66411C, Subtract, 8192); -- 울트라
		SetMemory(0x664134, Subtract, 8192); -- 퀸
		SetMemory(0x664138, Subtract, 8192); -- 디파일러
		SetMemory(0x664148, Subtract, 8192); -- 인페 테란
		SetMemory(0x66414C, Subtract, 8192); -- 인페 케리건
		SetMemory(0x66421C, Subtract, 8192); -- 러커
		
		SetMemory(0x664080, Subtract, 8192); -- 마린
		SetMemory(0x664084, Subtract, 8192); -- 고스트
		SetMemory(0x664088, Subtract, 8192); -- 벌처
		SetMemory(0x66408C, Subtract, 8192); -- 골리앗
		SetMemory(0x664094, Subtract, 8192); -- 탱크(5)
		SetMemory(0x66409C, Subtract, 8192); -- SCV
		SetMemory(0x6640A4, Subtract, 8192); -- 배슬
		SetMemory(0x6640F8, Subtract, 8192); -- 탱크(30)
		SetMemory(0x664100, Subtract, 8192); -- 파이어뱃
		SetMemory(0x664108, Subtract, 8192); -- 메딕
		SetMemory(0x664168, Subtract, 8192); -- 발키리

		SetMemory(0x664170, Subtract, 8192); -- 커세어
		SetMemory(0x664174, Subtract, 8192); -- 닥템
		SetMemory(0x66417C, Subtract, 8192); -- 다크 아칸
		SetMemory(0x664184, Subtract, 8192); -- 질럿
		SetMemory(0x664188, Subtract, 8192); -- 드라군
		SetMemory(0x66418C, Subtract, 8192); -- 하템
		SetMemory(0x664190, Subtract, 8192); -- 아칸
		SetMemory(0x6641CC, Subtract, 8192); -- 리버
		
		GiveUnits(All, "Men", CurrentPlayer, "Location "..57+i, P12);
		MoveUnit(All, "Men", P12, "Location "..57+i, "Location "..57+i);
		MoveUnit(All, "Men", P12, "Location "..57+i, "Location "..75+(2*i));
		GiveUnits(All, "Men", P12, "Location "..75+(2*i), CurrentPlayer);
		
		SetMemory(0x664114, Add, 8192); -- 저글링
		SetMemory(0x664118, Add, 8192); -- 히드라
		SetMemory(0x66411C, Add, 8192); -- 울트라
		SetMemory(0x664134, Add, 8192); -- 퀸
		SetMemory(0x664138, Add, 8192); -- 디파일러
		SetMemory(0x664148, Add, 8192); -- 인페 테란
		SetMemory(0x66414C, Add, 8192); -- 인페 케리건
		SetMemory(0x66421C, Add, 8192); -- 러커
		
		SetMemory(0x664080, Add, 8192); -- 마린
		SetMemory(0x664084, Add, 8192); -- 고스트
		SetMemory(0x664088, Add, 8192); -- 벌처
		SetMemory(0x66408C, Add, 8192); -- 골리앗
		SetMemory(0x664094, Add, 8192); -- 탱크(5)
		SetMemory(0x66409C, Add, 8192); -- SCV
		SetMemory(0x6640A4, Add, 8192); -- 배슬
		SetMemory(0x6640F8, Add, 8192); -- 탱크(30)
		SetMemory(0x664100, Add, 8192); -- 파이어뱃
		SetMemory(0x664108, Add, 8192); -- 메딕
		SetMemory(0x664168, Add, 8192); -- 발키리

		SetMemory(0x664170, Add, 8192); -- 커세어
		SetMemory(0x664174, Add, 8192); -- 닥템
		SetMemory(0x66417C, Add, 8192); -- 다크 아칸
		SetMemory(0x664184, Add, 8192); -- 질럿
		SetMemory(0x664188, Add, 8192); -- 드라군
		SetMemory(0x66418C, Add, 8192); -- 하템
		SetMemory(0x664190, Add, 8192); -- 아칸
		SetMemory(0x6641CC, Add, 8192); -- 리버
	},
}
end

roundmodech = {}; -- 라운드, 난이도 인식

table.insert(roundmodech, { 1,1,1, 2,2,2, 3,3,3, 4,4,4, 5,5,5, 6,6,6, 7,7,7, 8,8,8, 9,9,9, 10,10,10, 11,11,11, 12,12,12, 13,13,13, 14,14,14, 15,15,15, 16,16,16, 17,17,17, 18,18,18, 19,19,19, 20,20,20, 21,21,21, 22,22,22, 23,23,23, 24,24,24, 25,25,25, 26,26,26, 27,27,27, 28,28,28, 29,29,29, 30,30,30 });
table.insert(roundmodech, { 1,2,3, 1,2,3, 1,2,3, 1,2,3, 1,2,3, 1,2,3, 1,2,3, 1,2,3, 1,2,3, 1,2,3,    1,2,3,    1,2,3,    1,2,3,    1,2,3,    1,2,3,    1,2,3,    1,2,3,    1,2,3,    1,2,3,    1,2,3,    1,2,3,    1,2,3,    1,2,3,    1,2,3,    1,2,3,    1,2,3,    1,2,3,    1,2,3,    1,2,3,    1,2,3 });

singcre1 = {}; -- 03-2. 싱글존 유닛 생성 및 라운드 진행 / 뽑기 유닛, 재도전 유닛 삭제

table.insert(singcre1, { {6, "저글링", 0x664114}, {2, "히드라리스크", 0x664118} });
table.insert(singcre1, { {9, "저글링", 0x664114}, {3, "히드라리스크", 0x664118} });
table.insert(singcre1, { {12, "저글링", 0x664114}, {4, "히드라리스크", 0x664118} });
table.insert(singcre1, { {3, "질럿", 0x664184}, {2, "드라군", 0x664188} });
table.insert(singcre1, { {4, "질럿", 0x664184}, {3, "드라군", 0x664188} });
table.insert(singcre1, { {5, "질럿", 0x664184}, {4, "드라군", 0x664188} });
table.insert(singcre1, { {1, "파이어뱃", 0x664100}, {4, "마린", 0x664080}, {2, "메딕", 0x664108} });
table.insert(singcre1, { {2, "파이어뱃", 0x664100}, {6, "마린", 0x664080}, {2, "메딕", 0x664108} });
table.insert(singcre1, { {3, "파이어뱃", 0x664100}, {8, "마린", 0x664080}, {2, "메딕", 0x664108} });
table.insert(singcre1, { {4, "스카웃", 0x664198} });
table.insert(singcre1, { {5, "스카웃", 0x664198} });
table.insert(singcre1, { {6, "스카웃", 0x664198} });
table.insert(singcre1, { {3, "드라군", 0x664188}, {1, "리버", 0x6641CC} });
table.insert(singcre1, { {4, "드라군", 0x664188}, {1, "리버", 0x6641CC} });
table.insert(singcre1, { {5, "드라군", 0x664188}, {2, "리버", 0x6641CC} });

table.insert(singcre1, { {1, "아칸", 0x664190}, {1, "하이 템플러", 0x66418C} }); -- 6번째
table.insert(singcre1, { {2, "아칸", 0x664190}, {2, "하이 템플러", 0x66418C} });
table.insert(singcre1, { {3, "아칸", 0x664190}, {3, "하이 템플러", 0x66418C} });
table.insert(singcre1, { {2, "울트라리스크", 0x66411C}, {4, "저글링", 0x664114} });
table.insert(singcre1, { {2, "울트라리스크", 0x66411C}, {6, "저글링", 0x664114} });
table.insert(singcre1, { {2, "울트라리스크", 0x66411C}, {8, "저글링", 0x664114} });
table.insert(singcre1, { {3, "다크 템플러", 0x664174}, {1, "탱크 (5)", 0x664094} });
table.insert(singcre1, { {4, "다크 템플러", 0x664174}, {2, "탱크 (5)", 0x664094} });
table.insert(singcre1, { {5, "다크 템플러", 0x664174}, {3, "탱크 (5)", 0x664094} });
table.insert(singcre1, { {6, "히드라리스크", 0x664118}, {1, "메딕", 0x664108} });
table.insert(singcre1, { {8, "히드라리스크", 0x664118}, {2, "메딕", 0x664108} });
table.insert(singcre1, { {10, "히드라리스크", 0x664118}, {3, "메딕", 0x664108} });
table.insert(singcre1, { {3, "골리앗", 0x66408C}, {1, "탱크 (5)", 0x664094}, {1, "사이언스 배슬", 0x6640A4} });
table.insert(singcre1, { {4, "골리앗", 0x66408C}, {1, "탱크 (5)", 0x664094}, {1, "사이언스 배슬", 0x6640A4} });
table.insert(singcre1, { {5, "골리앗", 0x66408C}, {1, "탱크 (5)", 0x664094}, {1, "사이언스 배슬", 0x6640A4} });

table.insert(singcre1, { {12, "저글링", 0x664114}, {5, "뮤탈리스크", 0x66412C}, {2, "퀸", 0x664134} }); -- 11번째
table.insert(singcre1, { {15, "저글링", 0x664114}, {6, "뮤탈리스크", 0x66412C}, {2, "퀸", 0x664134} });
table.insert(singcre1, { {18, "저글링", 0x664114}, {7, "뮤탈리스크", 0x66412C}, {2, "퀸", 0x664134} });
table.insert(singcre1, { {6, "드라군", 0x664188}, {2, "캐리어", 0x6641A0} });
table.insert(singcre1, { {8, "드라군", 0x664188}, {2, "캐리어", 0x6641A0} });
table.insert(singcre1, { {10, "드라군", 0x664188}, {2, "캐리어", 0x6641A0} });
table.insert(singcre1, { {15, "마린", 0x664080}, {2, "고스트", 0x664084}, {1, "메딕", 0x664108} });
table.insert(singcre1, { {18, "마린", 0x664080}, {2, "고스트", 0x664084}, {2, "메딕", 0x664108} });
table.insert(singcre1, { {21, "마린", 0x664080}, {2, "고스트", 0x664084}, {3, "메딕", 0x664108} });
table.insert(singcre1, { {4, "배틀크루저", 0x6640B0} });
table.insert(singcre1, { {5, "배틀크루저", 0x6640B0} });
table.insert(singcre1, { {6, "배틀크루저", 0x6640B0} });
table.insert(singcre1, { {5, "디바우러 [ 지상 공격 가능 ]", 0x664178}, {5, "커세어 [ 지상 공격 가능 ]", 0x664170} });
table.insert(singcre1, { {6, "디바우러 [ 지상 공격 가능 ]", 0x664178}, {6, "커세어 [ 지상 공격 가능 ]", 0x664170} });
table.insert(singcre1, { {7, "디바우러 [ 지상 공격 가능 ]", 0x664178}, {7, "커세어 [ 지상 공격 가능 ]", 0x664170} });

table.insert(singcre1, { {4, "가디언", 0x664130}, {6, "히드라리스크", 0x664118}, {1, "아비터", 0x66419C} }); -- 16번째
table.insert(singcre1, { {4, "가디언", 0x664130}, {9, "히드라리스크", 0x664118}, {1, "아비터", 0x66419C} });
table.insert(singcre1, { {4, "가디언", 0x664130}, {12, "히드라리스크", 0x664118}, {1, "아비터", 0x66419C} });
table.insert(singcre1, { {5, "질럿", 0x664184}, {3, "드라군", 0x664188}, {1, "다크 아칸", 0x66417C}, {1, "하이 템플러", 0x66418C} });
table.insert(singcre1, { {6, "질럿", 0x664184}, {4, "드라군", 0x664188}, {1, "다크 아칸", 0x66417C}, {1, "하이 템플러", 0x66418C} });
table.insert(singcre1, { {7, "질럿", 0x664184}, {5, "드라군", 0x664188}, {1, "다크 아칸", 0x66417C}, {1, "하이 템플러", 0x66418C} });
table.insert(singcre1, { {2, "사이언스 배슬", 0x6640A4}, {9, "레이스", 0x6640A0} });
table.insert(singcre1, { {2, "사이언스 배슬", 0x6640A4}, {12, "레이스", 0x6640A0} });
table.insert(singcre1, { {2, "사이언스 배슬", 0x6640A4}, {15, "레이스", 0x6640A0} });
table.insert(singcre1, { {1, "울트라리스크", 0x66411C}, {12, "저글링", 0x664114}, {2, "디파일러", 0x664138} });
table.insert(singcre1, { {2, "울트라리스크", 0x66411C}, {15, "저글링", 0x664114}, {2, "디파일러", 0x664138} });
table.insert(singcre1, { {3, "울트라리스크", 0x66411C}, {18, "저글링", 0x664114}, {2, "디파일러", 0x664138} });
table.insert(singcre1, { {6, "디바우러 [ 지상 공격 가능 ]", 0x664178}, {3, "발키리 [ 지상 공격 가능 ]", 0x664168} });
table.insert(singcre1, { {8, "디바우러 [ 지상 공격 가능 ]", 0x664178}, {3, "발키리 [ 지상 공격 가능 ]", 0x664168} });
table.insert(singcre1, { {10, "디바우러 [ 지상 공격 가능 ]", 0x664178}, {3, "발키리 [ 지상 공격 가능 ]", 0x664168} });

table.insert(singcre1, { {3, "아칸", 0x664190}, {3, "드라군", 0x664188}, {2, "아비터", 0x66419C} }); -- 21번째
table.insert(singcre1, { {4, "아칸", 0x664190}, {4, "드라군", 0x664188}, {2, "아비터", 0x66419C} });
table.insert(singcre1, { {5, "아칸", 0x664190}, {5, "드라군", 0x664188}, {2, "아비터", 0x66419C} });
table.insert(singcre1, { {1, "배틀크루저", 0x6640B0}, {4, "탱크 (5)", 0x664094}, {2, "사이언스 배슬", 0x6640A4} });
table.insert(singcre1, { {2, "배틀크루저", 0x6640B0}, {4, "탱크 (5)", 0x664094}, {2, "사이언스 배슬", 0x6640A4} });
table.insert(singcre1, { {3, "배틀크루저", 0x6640B0}, {4, "탱크 (5)", 0x664094}, {2, "사이언스 배슬", 0x6640A4} });
table.insert(singcre1, { {4, "가디언", 0x664130}, {2, "리버", 0x6641CC}, {2, "하이 템플러", 0x66418C} });
table.insert(singcre1, { {6, "가디언", 0x664130}, {2, "리버", 0x6641CC}, {2, "하이 템플러", 0x66418C} });
table.insert(singcre1, { {8, "가디언", 0x664130}, {2, "리버", 0x6641CC}, {2, "하이 템플러", 0x66418C} });
table.insert(singcre1, { {15, "벌처", 0x664088}, {4, "고스트", 0x664084}, {4, "메딕", 0x664108} });
table.insert(singcre1, { {20, "벌처", 0x664088}, {4, "고스트", 0x664084}, {4, "메딕", 0x664108} });
table.insert(singcre1, { {25, "벌처", 0x664088}, {4, "고스트", 0x664084}, {4, "메딕", 0x664108} });
table.insert(singcre1, { {2, "울트라리스크", 0x66411C}, {6, "히드라리스크", 0x664118}, {2, "아비터", 0x66419C} });
table.insert(singcre1, { {3, "울트라리스크", 0x66411C}, {7, "히드라리스크", 0x664118}, {2, "아비터", 0x66419C} });
table.insert(singcre1, { {4, "울트라리스크", 0x66411C}, {8, "히드라리스크", 0x664118}, {2, "아비터", 0x66419C} });

table.insert(singcre1, { {4, "골리앗", 0x66408C}, {2, "탱크 (5)", 0x664094}, {2, "아비터", 0x66419C} }); -- 26번째
table.insert(singcre1, { {6, "골리앗", 0x66408C}, {2, "탱크 (5)", 0x664094}, {2, "아비터", 0x66419C} });
table.insert(singcre1, { {8, "골리앗", 0x66408C}, {2, "탱크 (5)", 0x664094}, {2, "아비터", 0x66419C} });
table.insert(singcre1, { {6, "스카웃", 0x664198}, {2, "고스트", 0x664084}, {2, "퀸", 0x664134} });
table.insert(singcre1, { {8, "스카웃", 0x664198}, {2, "고스트", 0x664084}, {2, "퀸", 0x664134} });
table.insert(singcre1, { {10, "스카웃", 0x664198}, {2, "고스트", 0x664084}, {2, "퀸", 0x664134} });
table.insert(singcre1, { {6, "디바우러 [ 지상 공격 가능 ]", 0x664178}, {5, "뮤탈리스크", 0x66412C} });
table.insert(singcre1, { {8, "디바우러 [ 지상 공격 가능 ]", 0x664178}, {7, "뮤탈리스크", 0x66412C} });
table.insert(singcre1, { {10, "디바우러 [ 지상 공격 가능 ]", 0x664178}, {9, "뮤탈리스크", 0x66412C} });
table.insert(singcre1, { {15, "마린", 0x664080}, {2, "메딕", 0x664108}, {2, "탱크 (5)", 0x664094}, {1, "사이언스 배슬", 0x6640A4} });
table.insert(singcre1, { {18, "마린", 0x664080}, {2, "메딕", 0x664108}, {2, "탱크 (5)", 0x664094}, {1, "사이언스 배슬", 0x6640A4} });
table.insert(singcre1, { {21, "마린", 0x664080}, {2, "메딕", 0x664108}, {2, "탱크 (5)", 0x664094}, {1, "사이언스 배슬", 0x6640A4} });
table.insert(singcre1, { {1, "인페스티드 케리건", 0x66414C}, {3, "아칸", 0x664190}, {2, "하이 템플러", 0x66418C} });
table.insert(singcre1, { {2, "인페스티드 케리건", 0x66414C}, {4, "아칸", 0x664190}, {2, "하이 템플러", 0x66418C} });
table.insert(singcre1, { {3, "인페스티드 케리건", 0x66414C}, {5, "아칸", 0x664190}, {2, "하이 템플러", 0x66418C} });

for i=1,#singcre1 do -- 싱글존 유닛 생산
action_scre1 = {};
for j=1,#singcre1[i] do
table.insert(action_scre1, SetMemory(singcre1[i][j][3], Subtract, 8192));
table.insert(action_scre1, CreateUnit(singcre1[i][j][1], singcre1[i][j][2], "Location 65", P8));
table.insert(action_scre1, MoveUnit(singcre1[i][j][1], singcre1[i][j][2], P8, "Location 65", "Location 66"));
table.insert(action_scre1, CreateUnit(singcre1[i][j][1], singcre1[i][j][2], "Location 65", P8));
table.insert(action_scre1, MoveUnit(singcre1[i][j][1], singcre1[i][j][2], P8, "Location 65", "Location 67"));
table.insert(action_scre1, CreateUnit(singcre1[i][j][1], singcre1[i][j][2], "Location 65", P8));
table.insert(action_scre1, MoveUnit(singcre1[i][j][1], singcre1[i][j][2], P8, "Location 65", "Location 68"));
table.insert(action_scre1, CreateUnit(singcre1[i][j][1], singcre1[i][j][2], "Location 65", P8));
table.insert(action_scre1, MoveUnit(singcre1[i][j][1], singcre1[i][j][2], P8, "Location 65", "Location 69"));
table.insert(action_scre1, CreateUnit(singcre1[i][j][1], singcre1[i][j][2], "Location 65", P8));
table.insert(action_scre1, MoveUnit(singcre1[i][j][1], singcre1[i][j][2], P8, "Location 65", "Location 70"));
table.insert(action_scre1, CreateUnit(singcre1[i][j][1], singcre1[i][j][2], "Location 65", P8));
table.insert(action_scre1, SetMemory(singcre1[i][j][3], Add, 8192));
end

Trigger { --
	players = {P7},
	conditions = {
		Deaths(P7, Exactly, roundmodech[1][i], "Mineral Chunk (Type 1)"); -- 라운드 인식
		Deaths(P7, Exactly, roundmodech[2][i], "Vespene Sac (Zerg Type 2)"); -- 난이도 인식
		Deaths(P7, Exactly, 1049, "Young Chrysalis");
		CountdownTimer(AtMost, 0);
	},
	actions = {
		PreserveTrigger();
		SetDeaths(P7, SetTo, 1050, "Young Chrysalis");
		SetDeaths(P7, SetTo, 0, "Flag"); -- 싱글존 공격 쿨타임
		RemoveUnitAt(All, "마법 유닛 뽑기", "Location 71", Force1);
		RemoveUnitAt(All, "랜덤 유닛 뽑기", "Location 71", Force1);
		RemoveUnitAt(All, "Choice", "Location 146", Force1);
		
		action_scre1;
		
		SetInvincibility(Enable, "Men", P8, "Location 71", 100);
		ModifyUnitEnergy(All, "Men", P8, "Location 71", 100);
		ModifyUnitHitPoints(All, "Men", P8, "Location 71", 100);
		ModifyUnitShields(All, "Men", P8, "Location 71", 100);
	},
}
end

Trigger { -- 28 라운드 디바&뮤탈 추가 생산
	players = {P7},
	conditions = {
		Switch("Switch 38", Cleared);
		Deaths(P7, Exactly, 28, "Mineral Chunk (Type 1)"); -- 라운드 인식
		Deaths(P7, AtLeast, 1050, "Young Chrysalis");
	},
	actions = {
		PreserveTrigger();
		SetSwitch("Switch 38", Set);
		
		SetMemory(0x66412C, Subtract, 8192);
		
		MoveUnit(2, "뮤탈리스크", P8, "Location 65", "Location 237");
		MoveUnit(3, "뮤탈리스크", P8, "Location 65", "Location 238");
		
		MoveUnit(2, "뮤탈리스크", P8, "Location 66", "Location 239");
		MoveUnit(3, "뮤탈리스크", P8, "Location 66", "Location 240");
		
		MoveUnit(2, "뮤탈리스크", P8, "Location 67", "Location 227");
		MoveUnit(3, "뮤탈리스크", P8, "Location 67", "Location 228");
		
		MoveUnit(2, "뮤탈리스크", P8, "Location 68", "Location 229");
		MoveUnit(3, "뮤탈리스크", P8, "Location 68", "Location 230");
		
		MoveUnit(2, "뮤탈리스크", P8, "Location 69", "Location 231");
		MoveUnit(3, "뮤탈리스크", P8, "Location 69", "Location 232");
		
		MoveUnit(2, "뮤탈리스크", P8, "Location 70", "Location 233");
		MoveUnit(3, "뮤탈리스크", P8, "Location 70", "Location 234");

		CreateUnit(5, "뮤탈리스크", "Location 65", P8);
		MoveUnit(5, "뮤탈리스크", P8, "Location 65", "Location 66");
		CreateUnit(5, "뮤탈리스크", "Location 65", P8);
		MoveUnit(5, "뮤탈리스크", P8, "Location 65", "Location 67");
		CreateUnit(5, "뮤탈리스크", "Location 65", P8);
		MoveUnit(5, "뮤탈리스크", P8, "Location 65", "Location 68");
		CreateUnit(5, "뮤탈리스크", "Location 65", P8);
		MoveUnit(5, "뮤탈리스크", P8, "Location 65", "Location 69");
		CreateUnit(5, "뮤탈리스크", "Location 65", P8);
		MoveUnit(5, "뮤탈리스크", P8, "Location 65", "Location 70");
		CreateUnit(5, "뮤탈리스크", "Location 65", P8);

		SetMemory(0x66412C, Add, 8192);
		
		SetInvincibility(Enable, "Men", P8, "Location 159", 100);
		ModifyUnitEnergy(All, "Men", P8, "Location 159", 100);
		ModifyUnitHitPoints(All, "Men", P8, "Location 159", 100);
		ModifyUnitShields(All, "Men", P8, "Location 159", 100);
	},
}

singmove1 = {}; -- 싱글존 유닛 이동
-- 줄드론수, 무브할유닛수, 유닛, 일자라인로케번호
table.insert(singmove1, { {3, 6, "저글링", 168, 0x664114}, {3, 2, "히드라리스크", 169, 0x664118} });
table.insert(singmove1, { {3, 9, "저글링", 168, 0x664114}, {3, 3, "히드라리스크", 169, 0x664118} });
table.insert(singmove1, { {3, 12, "저글링", 168, 0x664114}, {3, 4, "히드라리스크", 169, 0x664118} });
table.insert(singmove1, { {3, 3, "질럿", 168, 0x664184}, {3, 2, "드라군", 169, 0x664188} });
table.insert(singmove1, { {3, 4, "질럿", 168, 0x664184}, {3, 3, "드라군", 169, 0x664188} });
table.insert(singmove1, { {3, 5, "질럿", 168, 0x664184}, {3, 4, "드라군", 169, 0x664188} });
table.insert(singmove1, { {3, 1, "파이어뱃", 167, 0x664100}, {3, 4, "마린", 168, 0x664080}, {3, 2, "메딕", 169, 0x664108} });
table.insert(singmove1, { {3, 2, "파이어뱃", 167, 0x664100}, {3, 6, "마린", 168, 0x664080}, {3, 2, "메딕", 169, 0x664108} });
table.insert(singmove1, { {3, 3, "파이어뱃", 167, 0x664100}, {3, 8, "마린", 168, 0x664080}, {3, 2, "메딕", 169, 0x664108} });
table.insert(singmove1, { {3, 4, "스카웃", 168, 0x664198} });
table.insert(singmove1, { {3, 5, "스카웃", 168, 0x664198} });
table.insert(singmove1, { {3, 6, "스카웃", 168, 0x664198} });
table.insert(singmove1, { {3, 3, "드라군", 168, 0x664188}, {3, 1, "리버", 169, 0x6641CC} });
table.insert(singmove1, { {3, 4, "드라군", 168, 0x664188}, {3, 1, "리버", 169, 0x6641CC} });
table.insert(singmove1, { {3, 5, "드라군", 168, 0x664188}, {2, 1, "리버", 169, 0x6641CC}, {2, 1, "리버", 169, 0x6641CC} });

table.insert(singmove1, { {3, 1, "아칸", 167, 0x664190}, {3, 1, "하이 템플러", 169, 0x66418C} }); -- 6번째
table.insert(singmove1, { {2, 1, "아칸", 167, 0x664190}, {2, 1, "아칸", 167, 0x664190}, {3, 2, "하이 템플러", 169, 0x66418C} });
table.insert(singmove1, { {2, 1, "아칸", 167, 0x664190}, {1, 1, "아칸", 167, 0x664190}, {1, 1, "아칸", 167, 0x664190}, {3, 3, "하이 템플러", 169, 0x66418C} });
table.insert(singmove1, { {2, 1, "울트라리스크", 168, 0x66411C}, {2, 1, "울트라리스크", 168, 0x66411C}, {3, 4, "저글링", 169, 0x664114} });
table.insert(singmove1, { {2, 1, "울트라리스크", 168, 0x66411C}, {2, 1, "울트라리스크", 168, 0x66411C}, {3, 6, "저글링", 169, 0x664114} });
table.insert(singmove1, { {2, 1, "울트라리스크", 168, 0x66411C}, {2, 1, "울트라리스크", 168, 0x66411C}, {3, 8, "저글링", 169, 0x664114} });
table.insert(singmove1, { {3, 3, "다크 템플러", 168, 0x664174}, {3, 1, "탱크 (5)", 169, 0x664094}, {3, 1, "탱크 (30)", 169, 0x6640F8} });
table.insert(singmove1, { {3, 4, "다크 템플러", 168, 0x664174}, {3, 2, "탱크 (5)", 169, 0x664094}, {3, 2, "탱크 (30)", 169, 0x6640F8} });
table.insert(singmove1, { {3, 5, "다크 템플러", 168, 0x664174}, {3, 3, "탱크 (5)", 169, 0x664094}, {3, 3, "탱크 (30)", 169, 0x6640F8} });
table.insert(singmove1, { {3, 6, "히드라리스크", 168, 0x664118}, {3, 1, "메딕", 169, 0x664108} });
table.insert(singmove1, { {3, 8, "히드라리스크", 168, 0x664118}, {3, 2, "메딕", 169, 0x664108} });
table.insert(singmove1, { {3, 10, "히드라리스크", 168, 0x664118}, {3, 3, "메딕", 169, 0x664108} });
table.insert(singmove1, { {3, 3, "골리앗", 167, 0x66408C}, {3, 1, "탱크 (5)", 168, 0x664094}, {3, 1, "사이언스 배슬", 170, 0x6640A4}, {3, 1, "탱크 (30)", 168, 0x6640F8} });
table.insert(singmove1, { {3, 4, "골리앗", 167, 0x66408C}, {3, 1, "탱크 (5)", 168, 0x664094}, {3, 1, "사이언스 배슬", 170, 0x6640A4}, {3, 1, "탱크 (30)", 168, 0x6640F8} });
table.insert(singmove1, { {3, 5, "골리앗", 167, 0x66408C}, {3, 1, "탱크 (5)", 168, 0x664094}, {3, 1, "사이언스 배슬", 170, 0x6640A4}, {3, 1, "탱크 (30)", 168, 0x6640F8} });

table.insert(singmove1, { {3, 12, "저글링", 167, 0x664114}, {3, 5, "뮤탈리스크", 169, 0x66412C}, {2, 1, "퀸", 170, 0x664134}, {2, 1, "퀸", 170, 0x664134} }); -- 11번째
table.insert(singmove1, { {3, 15, "저글링", 167, 0x664114}, {3, 6, "뮤탈리스크", 169, 0x66412C}, {2, 1, "퀸", 170, 0x664134}, {2, 1, "퀸", 170, 0x664134} });
table.insert(singmove1, { {3, 18, "저글링", 167, 0x664114}, {3, 7, "뮤탈리스크", 169, 0x66412C}, {2, 1, "퀸", 170, 0x664134}, {2, 1, "퀸", 170, 0x664134} });
table.insert(singmove1, { {3, 6, "드라군", 167, 0x664188}, {2, 1, "캐리어", 169, 0x6641A0}, {2, 1, "캐리어", 169, 0x6641A0} });
table.insert(singmove1, { {3, 8, "드라군", 167, 0x664188}, {2, 1, "캐리어", 169, 0x6641A0}, {2, 1, "캐리어", 169, 0x6641A0} });
table.insert(singmove1, { {3, 10, "드라군", 167, 0x664188}, {2, 1, "캐리어", 169, 0x6641A0}, {2, 1, "캐리어", 169, 0x6641A0} });
table.insert(singmove1, { {3, 15, "마린", 167, 0x664080}, {3, 2, "고스트", 168, 0x664084}, {3, 1, "메딕", 169, 0x664108} });
table.insert(singmove1, { {3, 18, "마린", 167, 0x664080}, {3, 2, "고스트", 168, 0x664084}, {3, 2, "메딕", 169, 0x664108} });
table.insert(singmove1, { {3, 21, "마린", 167, 0x664080}, {3, 2, "고스트", 168, 0x664084}, {3, 3, "메딕", 169, 0x664108} });
table.insert(singmove1, { {1, 1, "배틀크루저", 168, 0x6640B0}, {1, 1, "배틀크루저", 168, 0x6640B0}, {2, 1, "배틀크루저", 168, 0x6640B0}, {1, 1, "배틀크루저", 168, 0x6640B0} });
table.insert(singmove1, { {1, 1, "배틀크루저", 168, 0x6640B0}, {1, 1, "배틀크루저", 168, 0x6640B0}, {1, 1, "배틀크루저", 168, 0x6640B0}, {1, 1, "배틀크루저", 168, 0x6640B0}, {1, 1, "배틀크루저", 168, 0x6640B0} });
table.insert(singmove1, { {2, 1, "배틀크루저", 168, 0x6640B0}, {1, 1, "배틀크루저", 168, 0x6640B0}, {1, 1, "배틀크루저", 168, 0x6640B0}, {2, 1, "배틀크루저", 169, 0x6640B0}, {1, 1, "배틀크루저", 169, 0x6640B0}, {1, 1, "배틀크루저", 169, 0x6640B0} });
table.insert(singmove1, { {3, 5, "디바우러 [ 지상 공격 가능 ]", 167, 0x664178}, {3, 5, "커세어 [ 지상 공격 가능 ]", 169, 0x664170} });
table.insert(singmove1, { {3, 6, "디바우러 [ 지상 공격 가능 ]", 167, 0x664178}, {3, 6, "커세어 [ 지상 공격 가능 ]", 169, 0x664170} });
table.insert(singmove1, { {3, 7, "디바우러 [ 지상 공격 가능 ]", 167, 0x664178}, {3, 7, "커세어 [ 지상 공격 가능 ]", 169, 0x664170} });

table.insert(singmove1, { {3, 4, "가디언", 167, 0x664130}, {3, 1, "아비터", 169, 0x66419C}, {3, 6, "히드라리스크", 170, 0x664118} }); -- 16번째
table.insert(singmove1, { {3, 4, "가디언", 167, 0x664130}, {3, 1, "아비터", 169, 0x66419C}, {3, 9, "히드라리스크", 170, 0x664118} });
table.insert(singmove1, { {3, 4, "가디언", 167, 0x664130}, {3, 1, "아비터", 169, 0x66419C}, {3, 12, "히드라리스크", 170, 0x664118} });
table.insert(singmove1, { {3, 5, "질럿", 167, 0x664184}, {3, 3, "드라군", 168, 0x664188}, {3, 1, "다크 아칸", 169, 0x66417C}, {3, 1, "하이 템플러", 170, 0x66418C} });
table.insert(singmove1, { {3, 6, "질럿", 167, 0x664184}, {3, 4, "드라군", 168, 0x664188}, {3, 1, "다크 아칸", 169, 0x66417C}, {3, 1, "하이 템플러", 170, 0x66418C} });
table.insert(singmove1, { {3, 7, "질럿", 167, 0x664184}, {3, 5, "드라군", 168, 0x664188}, {3, 1, "다크 아칸", 169, 0x66417C}, {3, 1, "하이 템플러", 170, 0x66418C} });
table.insert(singmove1, { {2, 1, "사이언스 배슬", 167, 0x6640A4}, {2, 1, "사이언스 배슬", 167, 0x6640A4}, {1, 3, "레이스", 169, 0x6640A0}, {2, 3, "레이스", 169, 0x6640A0}, {2, 3, "레이스", 169, 0x6640A0} });
table.insert(singmove1, { {2, 1, "사이언스 배슬", 167, 0x6640A4}, {2, 1, "사이언스 배슬", 167, 0x6640A4}, {1, 4, "레이스", 169, 0x6640A0}, {2, 4, "레이스", 169, 0x6640A0}, {2, 4, "레이스", 169, 0x6640A0} });
table.insert(singmove1, { {2, 1, "사이언스 배슬", 167, 0x6640A4}, {2, 1, "사이언스 배슬", 167, 0x6640A4}, {1, 5, "레이스", 169, 0x6640A0}, {2, 5, "레이스", 169, 0x6640A0}, {2, 5, "레이스", 169, 0x6640A0} });
table.insert(singmove1, { {3, 1, "울트라리스크", 167, 0x66411C}, {3, 12, "저글링", 168, 0x664114}, {2, 1, "디파일러", 170, 0x664138}, {2, 1, "디파일러", 170, 0x664138} });
table.insert(singmove1, { {2, 1, "울트라리스크", 167, 0x66411C}, {2, 1, "울트라리스크", 167, 0x66411C}, {3, 15, "저글링", 168, 0x664114}, {2, 1, "디파일러", 170, 0x664138}, {2, 1, "디파일러", 170, 0x664138} });
table.insert(singmove1, { {2, 1, "울트라리스크", 167, 0x66411C}, {1, 1, "울트라리스크", 167, 0x66411C}, {1, 1, "울트라리스크", 167, 0x66411C}, {3, 18, "저글링", 168, 0x664114}, {2, 1, "디파일러", 170, 0x664138}, {2, 1, "디파일러", 170, 0x664138} });
table.insert(singmove1, { {3, 6, "디바우러 [ 지상 공격 가능 ]", 167, 0x664178}, {3, 3, "발키리 [ 지상 공격 가능 ]", 169, 0x664168} });
table.insert(singmove1, { {3, 8, "디바우러 [ 지상 공격 가능 ]", 167, 0x664178}, {3, 3, "발키리 [ 지상 공격 가능 ]", 169, 0x664168} });
table.insert(singmove1, { {3, 10, "디바우러 [ 지상 공격 가능 ]", 167, 0x664178}, {3, 3, "발키리 [ 지상 공격 가능 ]", 169, 0x664168} });

table.insert(singmove1, { {2, 1, "아칸", 167, 0x664190}, {1, 1, "아칸", 167, 0x664190}, {1, 1, "아칸", 167, 0x664190}, {3, 3, "드라군", 169, 0x664188}, {2, 1, "아비터", 170, 0x66419C}, {2, 1, "아비터", 170, 0x66419C} }); -- 21번째
table.insert(singmove1, { {1, 1, "아칸", 167, 0x664190}, {1, 1, "아칸", 167, 0x664190}, {2, 1, "아칸", 167, 0x664190}, {1, 1, "아칸", 167, 0x664190}, {3, 4, "드라군", 169, 0x664188}, {2, 1, "아비터", 170, 0x66419C}, {2, 1, "아비터", 170, 0x66419C} });
table.insert(singmove1, { {1, 1, "아칸", 167, 0x664190}, {1, 1, "아칸", 167, 0x664190}, {1, 1, "아칸", 167, 0x664190}, {1, 1, "아칸", 167, 0x664190}, {1, 1, "아칸", 167, 0x664190}, {3, 5, "드라군", 169, 0x664188}, {2, 1, "아비터", 170, 0x66419C}, {2, 1, "아비터", 170, 0x66419C} });
table.insert(singmove1, { {3, 1, "배틀크루저", 167, 0x6640B0}, {3, 4, "탱크 (5)", 169, 0x664094}, {2, 1, "사이언스 배슬", 170, 0x6640A4}, {2, 1, "사이언스 배슬", 170, 0x6640A4}, {3, 4, "탱크 (30)", 169, 0x6640F8} });
table.insert(singmove1, { {2, 1, "배틀크루저", 167, 0x6640B0}, {2, 1, "배틀크루저", 167, 0x6640B0}, {3, 4, "탱크 (5)", 169, 0x664094}, {2, 1, "사이언스 배슬", 170, 0x6640A4}, {2, 1, "사이언스 배슬", 170, 0x6640A4}, {3, 4, "탱크 (30)", 169, 0x6640F8} });
table.insert(singmove1, { {2, 1, "배틀크루저", 167, 0x6640B0}, {1, 1, "배틀크루저", 167, 0x6640B0}, {1, 1, "배틀크루저", 167, 0x6640B0}, {3, 4, "탱크 (5)", 169, 0x664094}, {2, 1, "사이언스 배슬", 170, 0x6640A4}, {2, 1, "사이언스 배슬", 170, 0x6640A4}, {3, 4, "탱크 (30)", 169, 0x6640F8} });
table.insert(singmove1, { {2, 2, "가디언", 167, 0x664130}, {2, 2, "가디언", 167, 0x664130}, {2, 1, "리버", 169, 0x6641CC}, {2, 1, "리버", 169, 0x6641CC}, {2, 1, "하이 템플러", 170, 0x66418C}, {2, 1, "하이 템플러", 170, 0x66418C} });
table.insert(singmove1, { {2, 3, "가디언", 167, 0x664130}, {2, 3, "가디언", 167, 0x664130}, {2, 1, "리버", 169, 0x6641CC}, {2, 1, "리버", 169, 0x6641CC}, {2, 1, "하이 템플러", 170, 0x66418C}, {2, 1, "하이 템플러", 170, 0x66418C} });
table.insert(singmove1, { {2, 4, "가디언", 167, 0x664130}, {2, 4, "가디언", 167, 0x664130}, {2, 1, "리버", 169, 0x6641CC}, {2, 1, "리버", 169, 0x6641CC}, {2, 1, "하이 템플러", 170, 0x66418C}, {2, 1, "하이 템플러", 170, 0x66418C} });
table.insert(singmove1, { {1, 5, "벌처", 167, 0x664088}, {2, 5, "벌처", 167, 0x664088}, {2, 5, "벌처", 167, 0x664088}, {3, 4, "고스트", 169, 0x664084}, {3, 4, "메딕", 170, 0x664108} });
table.insert(singmove1, { {1, 5, "벌처", 167, 0x664088}, {1, 5, "벌처", 167, 0x664088}, {2, 5, "벌처", 167, 0x664088}, {1, 5, "벌처", 167, 0x664088}, {3, 4, "고스트", 169, 0x664084}, {3, 4, "메딕", 170, 0x664108} });
table.insert(singmove1, { {1, 5, "벌처", 167, 0x664088}, {1, 5, "벌처", 167, 0x664088}, {1, 5, "벌처", 167, 0x664088}, {1, 5, "벌처", 167, 0x664088}, {1, 5, "벌처", 167, 0x664088}, {3, 4, "고스트", 169, 0x664084}, {3, 4, "메딕", 170, 0x664108} });
table.insert(singmove1, { {2, 1, "울트라리스크", 167, 0x66411C}, {2, 1, "울트라리스크", 167, 0x66411C}, {3, 6, "히드라리스크", 169, 0x664118}, {2, 1, "아비터", 170, 0x66419C}, {2, 1, "아비터", 170, 0x66419C} });
table.insert(singmove1, { {1, 1, "울트라리스크", 167, 0x66411C}, {2, 1, "울트라리스크", 167, 0x66411C}, {2, 1, "울트라리스크", 167, 0x66411C}, {3, 7, "히드라리스크", 169, 0x664118}, {2, 1, "아비터", 170, 0x66419C}, {2, 1, "아비터", 170, 0x66419C} });
table.insert(singmove1, { {1, 1, "울트라리스크", 167, 0x66411C}, {1, 1, "울트라리스크", 167, 0x66411C}, {2, 1, "울트라리스크", 167, 0x66411C}, {1, 1, "울트라리스크", 167, 0x66411C}, {3, 8, "히드라리스크", 169, 0x664118}, {2, 1, "아비터", 170, 0x66419C}, {2, 1, "아비터", 170, 0x66419C} });

table.insert(singmove1, { {2, 2, "골리앗", 167, 0x66408C}, {2, 2, "골리앗", 167, 0x66408C}, {3, 2, "탱크 (5)", 168, 0x664094}, {2, 1, "아비터", 169, 0x66419C}, {2, 1, "아비터", 169, 0x66419C}, {3, 2, "탱크 (30)", 168, 0x6640F8} }); -- 26번째
table.insert(singmove1, { {2, 3, "골리앗", 167, 0x66408C}, {2, 3, "골리앗", 167, 0x66408C}, {3, 2, "탱크 (5)", 168, 0x664094}, {2, 1, "아비터", 169, 0x66419C}, {2, 1, "아비터", 169, 0x66419C}, {3, 2, "탱크 (30)", 168, 0x6640F8} });
table.insert(singmove1, { {2, 4, "골리앗", 167, 0x66408C}, {2, 4, "골리앗", 167, 0x66408C}, {3, 2, "탱크 (5)", 168, 0x664094}, {2, 1, "아비터", 169, 0x66419C}, {2, 1, "아비터", 169, 0x66419C}, {3, 2, "탱크 (30)", 168, 0x6640F8} });
table.insert(singmove1, { {2, 3, "스카웃", 167, 0x664198}, {2, 3, "스카웃", 167, 0x664198}, {3, 2, "고스트", 168, 0x664084}, {2, 1, "퀸", 169, 0x664134}, {2, 1, "퀸", 169, 0x664134} });
table.insert(singmove1, { {2, 4, "스카웃", 167, 0x664198}, {2, 4, "스카웃", 167, 0x664198}, {3, 2, "고스트", 168, 0x664084}, {2, 1, "퀸", 169, 0x664134}, {2, 1, "퀸", 169, 0x664134} });
table.insert(singmove1, { {2, 5, "스카웃", 167, 0x664198}, {2, 5, "스카웃", 167, 0x664198}, {3, 2, "고스트", 168, 0x664084}, {2, 1, "퀸", 169, 0x664134}, {2, 1, "퀸", 169, 0x664134} });
table.insert(singmove1, { {2, 3, "디바우러 [ 지상 공격 가능 ]", 167, 0x664178}, {2, 3, "디바우러 [ 지상 공격 가능 ]", 167, 0x664178}, {2, 5, "뮤탈리스크", 169, 0x66412C}, {2, 5, "뮤탈리스크", 169, 0x66412C} });
table.insert(singmove1, { {2, 4, "디바우러 [ 지상 공격 가능 ]", 167, 0x664178}, {2, 4, "디바우러 [ 지상 공격 가능 ]", 167, 0x664178}, {2, 6, "뮤탈리스크", 169, 0x66412C}, {2, 6, "뮤탈리스크", 169, 0x66412C} });
table.insert(singmove1, { {2, 5, "디바우러 [ 지상 공격 가능 ]", 167, 0x664178}, {2, 5, "디바우러 [ 지상 공격 가능 ]", 167, 0x664178}, {2, 7, "뮤탈리스크", 169, 0x66412C}, {2, 7, "뮤탈리스크", 169, 0x66412C} });
table.insert(singmove1, { {1, 5, "마린", 167, 0x664080}, {2, 5, "마린", 167, 0x664080}, {2, 5, "마린", 167, 0x664080}, {3, 2, "메딕", 168, 0x664108}, {3, 2, "탱크 (5)", 169, 0x664094}, {3, 1, "사이언스 배슬", 170, 0x6640A4}, {3, 2, "탱크 (30)", 169, 0x6640F8} });
table.insert(singmove1, { {1, 6, "마린", 167, 0x664080}, {2, 6, "마린", 167, 0x664080}, {2, 6, "마린", 167, 0x664080}, {3, 2, "메딕", 168, 0x664108}, {3, 2, "탱크 (5)", 169, 0x664094}, {3, 1, "사이언스 배슬", 170, 0x6640A4}, {3, 2, "탱크 (30)", 169, 0x6640F8} });
table.insert(singmove1, { {1, 7, "마린", 167, 0x664080}, {2, 7, "마린", 167, 0x664080}, {2, 7, "마린", 167, 0x664080}, {3, 2, "메딕", 168, 0x664108}, {3, 2, "탱크 (5)", 169, 0x664094}, {3, 1, "사이언스 배슬", 170, 0x6640A4}, {3, 2, "탱크 (30)", 169, 0x6640F8} });
table.insert(singmove1, { {3, 1, "인페스티드 케리건", 167, 0x66414C}, {3, 3, "아칸", 168, 0x664190}, {2, 1, "하이 템플러", 170, 0x66418C}, {2, 1, "하이 템플러", 170, 0x66418C} });
table.insert(singmove1, { {3, 2, "인페스티드 케리건", 167, 0x66414C}, {3, 4, "아칸", 168, 0x664190}, {2, 1, "하이 템플러", 170, 0x66418C}, {2, 1, "하이 템플러", 170, 0x66418C} });
table.insert(singmove1, { {3, 3, "인페스티드 케리건", 167, 0x66414C}, {3, 5, "아칸", 168, 0x664190}, {2, 1, "하이 템플러", 170, 0x66418C}, {2, 1, "하이 템플러", 170, 0x66418C} });

for i=1,#singmove1 do -- 싱글존으로 유닛 이동
for m=1,6 do -- 각각 플레이어 나누기
action_smove1 = {};
for j=1,#singmove1[i] do
table.insert(action_smove1, GiveUnits(singmove1[i][j][1], "Zerg Drone", P9, "Location "..singmove1[i][j][4]+(4*(m-1)), P10));
table.insert(action_smove1, MoveLocation("Location 109", "Zerg Drone", P9, "Location "..singmove1[i][j][4]+(4*(m-1))));
table.insert(action_smove1, SetMemory(singmove1[i][j][5], Subtract, 8192));
table.insert(action_smove1, MoveUnit(singmove1[i][j][2], singmove1[i][j][3], P8, "Location "..64+m, "Location 109"));
table.insert(action_smove1, SetMemory(singmove1[i][j][5], Add, 8192));
end

Trigger { --
	players = {P7},
	conditions = {
		Deaths(P7, Exactly, roundmodech[1][i], "Mineral Chunk (Type 1)"); -- 라운드 인식
		Deaths(P7, Exactly, roundmodech[2][i], "Vespene Sac (Zerg Type 2)"); -- 난이도 인식
		Deaths(P7, Exactly, 1050, "Young Chrysalis");
		Bring(P8, AtLeast, 1, "Men", "Location "..64+m);
	},
	actions = {
		PreserveTrigger();
		
		action_smove1;	
		GiveUnits(All, "Zerg Drone", P10, "Location "..74+(2*m), P9); -- 초기화
	},
}
end
end

Trigger { -- 28 라운드 뮤탈 추가 이동
	players = {P7},
	conditions = {
		Deaths(P7, Exactly, 28, "Mineral Chunk (Type 1)"); -- 라운드 인식
		Deaths(P7, Exactly, 1050, "Young Chrysalis");
		Bring(P8, AtLeast, 1, "Men", "Location 159");
	},
	actions = {
		PreserveTrigger();
		SetMemory(0x66412C, Subtract, 8192);
		
		GiveUnits(4, "Zerg Drone", P9, "Location 169", P10);
		MoveLocation("Location 109", "Zerg Drone", P9, "Location 169");
		MoveUnit(3, "뮤탈리스크", P8, "Location 237", "Location 109");
		MoveUnit(3, "뮤탈리스크", P8, "Location 238", "Location 109");	
		GiveUnits(All, "Zerg Drone", P10, "Location 76", P9); -- 초기화
		
		GiveUnits(4, "Zerg Drone", P9, "Location 173", P10);
		MoveLocation("Location 109", "Zerg Drone", P9, "Location 173");
		MoveUnit(3, "뮤탈리스크", P8, "Location 239", "Location 109");
		MoveUnit(3, "뮤탈리스크", P8, "Location 240", "Location 109");	
		GiveUnits(All, "Zerg Drone", P10, "Location 78", P9); -- 초기화
		
		GiveUnits(4, "Zerg Drone", P9, "Location 177", P10);
		MoveLocation("Location 109", "Zerg Drone", P9, "Location 177");
		MoveUnit(3, "뮤탈리스크", P8, "Location 227", "Location 109");
		MoveUnit(3, "뮤탈리스크", P8, "Location 228", "Location 109");	
		GiveUnits(All, "Zerg Drone", P10, "Location 80", P9); -- 초기화
		
		GiveUnits(4, "Zerg Drone", P9, "Location 181", P10);
		MoveLocation("Location 109", "Zerg Drone", P9, "Location 181");
		MoveUnit(3, "뮤탈리스크", P8, "Location 229", "Location 109");
		MoveUnit(3, "뮤탈리스크", P8, "Location 230", "Location 109");	
		GiveUnits(All, "Zerg Drone", P10, "Location 82", P9); -- 초기화
		
		GiveUnits(4, "Zerg Drone", P9, "Location 185", P10);
		MoveLocation("Location 109", "Zerg Drone", P9, "Location 185");
		MoveUnit(3, "뮤탈리스크", P8, "Location 231", "Location 109");
		MoveUnit(3, "뮤탈리스크", P8, "Location 232", "Location 109");	
		GiveUnits(All, "Zerg Drone", P10, "Location 84", P9); -- 초기화
		
		GiveUnits(4, "Zerg Drone", P9, "Location 189", P10);
		MoveLocation("Location 109", "Zerg Drone", P9, "Location 189");
		MoveUnit(3, "뮤탈리스크", P8, "Location 233", "Location 109");
		MoveUnit(3, "뮤탈리스크", P8, "Location 234", "Location 109");	
		GiveUnits(All, "Zerg Drone", P10, "Location 86", P9); -- 초기화
		
		SetMemory(0x66412C, Add, 8192);
	},
}

for i=1,6 do -- 8피 유닛 생성존에 있을 때 움직임 봉인+무적
Trigger { --
	players = {P7},
	conditions = {
		Bring(P8, AtLeast, 1, "Men", "Location "..64+i);
	},
	actions = {
		PreserveTrigger();
		Order("Men", P8, "Location "..64+i, Move, "Location "..64+i);
		SetInvincibility(Enable, "Men", P8, "Location "..64+i);
	},
}
end

for i=1,6 do -- 싱글존 유닛 이동 후 최초 1회 공격 / 테스트 포함
Trigger { --
	players = {P7},
	conditions = {
		Switch("Switch 7", Cleared);
		Switch("Switch "..8+i, Cleared);
		Deaths(P7, Exactly, 1050, "Young Chrysalis");
		Bring(P8, AtLeast, 1, "Men", "Location "..159+i);
	},
	actions = {
		PreserveTrigger();
		SetSwitch("Switch "..8+i, Set);
		SetSwitch("Switch 30", Random);
		SetDeaths(Force1, SetTo, 100, "Independent Command Center"); -- 특정 라운드 소리
		Order("Men", P8, "Location "..159+i, Patrol, "Location "..101+i);
	},
}

Trigger { --
	players = {P7},
	conditions = {
		Switch("Switch 7", Set);
		Switch("Switch "..8+i, Cleared);
		Deaths(P7, Exactly, 1050, "Young Chrysalis");
		Bring(P8, AtLeast, 1, "Men", "Location "..159+i);
	},
	actions = {
		PreserveTrigger();
		SetSwitch("Switch "..8+i, Set);
		SetSwitch("Switch 30", Random);
		SetDeaths(Force1, SetTo, 100, "Independent Command Center"); -- 특정 라운드 소리
		Order("Men", P8, "Location "..159+i, Patrol, "Location "..101+i);
		
		Order("Men", P3, "Location 80", Patrol, "Location 177"); -- 테스트용 트리거
		Order("Men", P4, "Location 82", Patrol, "Location 181");
		
		RemoveUnitAt(All, "Men", "Location 76", P8); --1피 지역 8 없애기
		RemoveUnitAt(All, "Men", "Location 78", P8); --2피 지역 8 없애기
		RemoveUnitAt(All, "Men", "Location 82", P8); --4피 지역 8 없애기
		RemoveUnitAt(All, "Men", "Location 84", P8); --5피 지역 8 없애기
		RemoveUnitAt(All, "Men", "Location 80", P3); --3피 플레이어 없애기
	},
}
end

stimsound = {};

table.insert(stimsound, {Cleared, Set});
table.insert(stimsound, {0, 1});

for i=1,2 do -- 특정 라운드 소리 (통합)
Trigger { -- 
	players = {Force1},
	conditions = {
		Switch("Switch 30", stimsound[1][i]);
		Deaths(CurrentPlayer, AtLeast, 100, "Independent Command Center");
		Command(P8, AtLeast, 1, "마린");
	},
	actions = {
		PreserveTrigger();
		SetDeaths(CurrentPlayer, SetTo, 0, "Independent Command Center"); -- 특정 라운드 소리 (통합)
		PlayWAV("sound\\Terran\\MARINE\\TMaSti0"..stimsound[2][i]..".WAV");
	},
}

Trigger { -- 
	players = {Force1},
	conditions = {
		Switch("Switch 30", stimsound[1][i]);
		Deaths(CurrentPlayer, AtLeast, 100, "Independent Command Center");
		Command(P8, AtLeast, 1, "파이어뱃");
	},
	actions = {
		PreserveTrigger();
		SetDeaths(CurrentPlayer, SetTo, 0, "Independent Command Center"); 
		PlayWAV("sound\\Terran\\MARINE\\TMaSti0"..stimsound[2][i]..".WAV");
	},
}

Trigger { -- 
	players = {Force1},
	conditions = {
		Switch("Switch 30", stimsound[1][i]);
		Deaths(CurrentPlayer, AtLeast, 100, "Independent Command Center");
		Command(P8, AtLeast, 1, "고스트");
	},
	actions = {
		PreserveTrigger();
		SetDeaths(CurrentPlayer, SetTo, 0, "Independent Command Center");
		PlayWAV("sound\\Terran\\MARINE\\TMaSti0"..stimsound[2][i]..".WAV");
	},
}
end

Trigger { -- 
	players = {Force1},
	conditions = {
		Deaths(CurrentPlayer, AtLeast, 100, "Independent Command Center");
	},
	actions = {
		PreserveTrigger();
		SetDeaths(CurrentPlayer, SetTo, 0, "Independent Command Center");
	},
}

Trigger { -- 싱글존 공격 카운트
	players = {P7},
	conditions = {
		Deaths(P7, AtMost, 999, "Flag");
		Bring(P8, AtLeast, 1, "Men", "Location 72");
	},
	actions = {
		PreserveTrigger();
		SetDeaths(P7, Add, 1, "Flag");
	},
}

Trigger { -- 
	players = {P7},
	conditions = {
		Deaths(P7, AtLeast, 1, "Flag");
		Bring(P8, Exactly, 0, "Men", "Location 72");
	},
	actions = {
		PreserveTrigger();
		SetDeaths(P7, SetTo, 0, "Flag");
	},
}

Trigger { -- 
	players = {P7},
	conditions = {
		Deaths(P7, AtLeast, 144, "Flag");
		Bring(P8, AtLeast, 1, "Men", "Location 72");
	},
	actions = {
		PreserveTrigger();
		SetDeaths(P7, SetTo, 0, "Flag");
		Order("Men", P8, "Location 160", Patrol, "Location 102");
		Order("Men", P8, "Location 161", Patrol, "Location 103");
		Order("Men", P8, "Location 162", Patrol, "Location 104");
		Order("Men", P8, "Location 163", Patrol, "Location 105");
		Order("Men", P8, "Location 164", Patrol, "Location 106");
		Order("Men", P8, "Location 165", Patrol, "Location 107");
	},
}

for i=1,6 do -- 싱글 라운드 시작 인식 / 패배 경우
Trigger { --
	players = {i-1},
	conditions = {
		Deaths(CurrentPlayer, AtMost, 23, "처음부터 하기");
		Deaths(P7, Exactly, 1050, "Young Chrysalis");
		Bring(CurrentPlayer, Exactly, 0, "Men", "Location "..110+i);
		Bring(P7, Exactly, 0, "Men", "Location "..110+i); -- 마인 인식용도
		Bring(CurrentPlayer, AtLeast, 1, "라이프", "Location "..110+i);
	},
	actions = {
		PreserveTrigger();
		KillUnitAt(1, "라이프", "Location "..110+i, CurrentPlayer);
	},
}

Trigger { --
	players = {i-1},
	conditions = {
		Deaths(CurrentPlayer, AtMost, 23, "처음부터 하기");
		Deaths(P7, Exactly, 1050, "Young Chrysalis");
		Bring(CurrentPlayer, AtLeast, 1, "Men", "Location 72");
		Bring(CurrentPlayer, Exactly, 0, "라이프", "Location "..110+i);
	},
	actions = {
		PreserveTrigger();
		KillUnitAt(All, "Men", "Location 72", CurrentPlayer);
		KillUnitAt(All, "Men", "Location "..159+i, P7);
	},
}

Trigger { --
	players = {P7},
	conditions = {
		Deaths(P7, Exactly, 1050, "Young Chrysalis");
		Bring(P7, AtLeast, 1, "Men", "Location "..159+i); -- 마인 인식
		Bring(i-1, Exactly, 0, "라이프", "Location "..110+i);
	},
	actions = {
		PreserveTrigger();
		KillUnitAt(All, "Men", "Location "..159+i, P7);
	},
}

Trigger { -- 패배하면 8피 유닛 11피로 바꾸고 무적 후 오더
	players = {P7},
	conditions = {
		Deaths(P7, Exactly, 1050, "Young Chrysalis");
		Bring(i-1, Exactly, 0, "Men", "Location "..110+i);
		Bring(i-1, Exactly, 0, "라이프", "Location "..110+i);
		Bring(P8, AtLeast, 1, "Men", "Location "..159+i);
	},
	actions = {
		PreserveTrigger();
		GiveUnits(All, "Men", P8, "Location "..159+i, P11);
		SetInvincibility(Enable, "Men", P11, "Location "..159+i);
		Order("Men", P11, "Location "..159+i, Move, "Location "..75+(2*i));
	},
}
end

Trigger { -- 싱글 라운드 전원 패배시 재시작
	players = {P7},
	conditions = {
		Switch("Switch 15", Cleared);
		Deaths(P7, Exactly, 1050, "Young Chrysalis");
		Deaths(P7, AtMost, 35, "Left Wall Flame Trap");
		Bring(Force1, Exactly, 0, "Men", "Location 72");
		Bring(Force1, Exactly, 0, "라이프", "Location 72");
	},
	actions = {
		PreserveTrigger();
		SetDeaths(P7, Add, 1, "Left Wall Flame Trap");
	},
}

singallde = {};

table.insert(singallde, { "라이프", "Men" });

for i=1,2 do --
Trigger { -- 
	players = {P7},
	conditions = {
		Deaths(P7, AtLeast, 1, "Left Wall Flame Trap");
		Bring(Force1, AtLeast, 1, singallde[1][i], "Location 72");
	},
	actions = {
		PreserveTrigger();
		SetDeaths(P7, SetTo, 0, "Left Wall Flame Trap");
	},
}
end

Trigger { --
	players = {P7},
	conditions = {
		Deaths(P7, AtLeast, 36, "Left Wall Flame Trap");
	},
	actions = {
		PreserveTrigger();
		SetDeaths(P7, SetTo, 0, "Left Wall Flame Trap");
		SetDeaths(P7, SetTo, 0, "Young Chrysalis");
		SetDeaths(Force1, SetTo, 1000, "Psi Disrupter"); -- 재시작하는 데스값
		SetDeaths(Force1, SetTo, 1, "Kyadarin Crystal Formation"); -- 싱글존 유닛 알림 메시지
		SetDeaths(Force1, SetTo, 0, "Ruins"); -- 팀플존 유닛 알림 메시지
		
		RemoveUnitAt(All, "Men", "Location 214", Force1); -- 싱글&팀플존 유닛 삭제
		RemoveUnitAt(All, "Men", "Location 214", P7);
		RemoveUnitAt(All, "Men", "Location 214", P8);
		RemoveUnitAt(All, "Men", "Location 214", P11);
		RemoveUnitAt(All, "Choice", "Location 146", Force1); -- 재도전 시민 삭제
		RemoveUnitAt(All, "Men", "Location 205", Force1); -- 대기 유닛 삭제
		RemoveUnitAt(All, "Men", "Location 206", Force1); -- 뽑기 유닛 삭제
		RemoveUnitAt(All, "Men", "Location 159", P8); -- 8피 팀플 대기 유닛 삭제
		RemoveUnitAt(All, "Men", "Location 110", P8); -- 8피 싱글 대기 유닛 삭제
		
		SetSwitch("Switch 19", Set); -- 재시작이면 카운트 다운 시간 3초 더 줌
	},
}

Trigger { -- 재시작 하는 구역 시민 생산
	players = {Force1},
	conditions = {
		Deaths(CurrentPlayer, AtMost, 1001, "Psi Disrupter");
		Deaths(CurrentPlayer, AtLeast, 1000, "Psi Disrupter");
	},
	actions = {
		PreserveTrigger();
		SetDeaths(CurrentPlayer, Add, 1, "Psi Disrupter"); -- 재시작하는 데스값
	},
}

for i=1,6 do -- 테스트 포함
Trigger { --
	players = {i-1},
	conditions = {
		Switch("Switch 7", Cleared);
		Deaths(CurrentPlayer, AtLeast, 1002, "Psi Disrupter");
	},
	actions = {
		PreserveTrigger();
		SetDeaths(CurrentPlayer, SetTo, 0, "Psi Disrupter"); -- 재시작하는 데스값
		CreateUnit(1, "Choice", "Location "..206+i, CurrentPlayer);
		SetInvincibility(Enable, "Choice", CurrentPlayer, "Location 146");
		CenterView("Location 146");
	},
}

Trigger { --
	players = {i-1},
	conditions = {
		Switch("Switch 7", Set);
		Deaths(CurrentPlayer, AtLeast, 1002, "Psi Disrupter");
	},
	actions = {
		PreserveTrigger();
		SetDeaths(CurrentPlayer, SetTo, 0, "Psi Disrupter"); -- 재시작하는 데스값
		CreateUnit(1, "Choice", "Location 65", CurrentPlayer);
		MoveUnit(1, "Choice", CurrentPlayer, "Location 65", "Location "..206+i);
		SetInvincibility(Enable, "Choice", CurrentPlayer, "Location 146");
		CenterView("Location 146");
	},
}
end

for i=1,30 do -- 재시작 랜덤 뽑기 유닛 선택
Trigger { --
	players = {Force1},
	conditions = {
		Deaths(P7, Exactly, i, "Mineral Chunk (Type 1)"); -- 라운드 인식
		Bring(CurrentPlayer, AtLeast, 1, "Choice", "Location 73");
	},
	actions = {
		PreserveTrigger();
		RemoveUnitAt(1, "Choice", "Location 73", CurrentPlayer);
		RemoveUnitAt(All, "Men", "Location 214", CurrentPlayer); -- 싱글&팀플존 유닛 삭제
		RemoveUnitAt(All, "Men", "Location 205", CurrentPlayer); -- 대기 유닛 삭제
		RemoveUnitAt(All, "Men", "Location 206", CurrentPlayer); -- 뽑기 유닛 삭제
		SetDeaths(CurrentPlayer, SetTo, round[1][i], "Vespene Sac (Zerg Type 1)"); -- 라운드에 따른 뽑기용 프로브 숫자
		SetDeaths(CurrentPlayer, SetTo, 0, "Normal Mode"); -- 뽑기용 프로브 생산 억제 해제
	},
}
end

for i=1,6 do -- 재시작 전에 썼던 유닛 다시 쓰기 선택
Trigger { --
	players = {i-1},
	conditions = {
		Bring(CurrentPlayer, AtLeast, 1, "Choice", "Location 74");
	},
	actions = {
		PreserveTrigger();
		RemoveUnitAt(1, "Choice", "Location 74", CurrentPlayer);
		RemoveUnitAt(All, "Men", "Location 214", CurrentPlayer); -- 싱글&팀플존 유닛 삭제
		RemoveUnitAt(All, "Men", "Location 205", CurrentPlayer); -- 대기 유닛 삭제
		RemoveUnitAt(All, "Men", "Location 206", CurrentPlayer); -- 뽑기 유닛 삭제
		SetDeaths(CurrentPlayer, SetTo, 0, "Vespene Sac (Zerg Type 1)"); -- 라운드에 따른 뽑기용 프로브 숫자
		SetDeaths(CurrentPlayer, SetTo, 1000, "Warp Gate"); -- 전에 썼던 유닛 다시 사용
		CenterView("Location "..75+(2*i));
	},
}
end

for i=1,6 do -- 마법 / 테스트 포함
for m=1,9 do
for j=1,2 do
Trigger { -- 
	players = {i-1},
	conditions = {
		Switch("Switch 7", Cleared);
		Deaths(CurrentPlayer, AtLeast, 1000, "Warp Gate");
		Deaths(CurrentPlayer, Exactly, j, unitbozon[1][m]);
	},
	actions = {
		PreserveTrigger();
		CreateUnit(magic[4][m]*j, magic[5][m], "Location "..57+i, CurrentPlayer);
	},
}

Trigger { -- 
	players = {i-1},
	conditions = {
		Switch("Switch 7", Set);
		Deaths(CurrentPlayer, AtLeast, 1000, "Warp Gate");
		Deaths(CurrentPlayer, Exactly, j, unitbozon[1][m]);
	},
	actions = {
		PreserveTrigger();
		
		SetMemory(0x664114, Subtract, 8192); -- 저글링
		SetMemory(0x664118, Subtract, 8192); -- 히드라
		SetMemory(0x66411C, Subtract, 8192); -- 울트라
		SetMemory(0x664120, Subtract, 8192); -- 브루들링
		SetMemory(0x664134, Subtract, 8192); -- 퀸
		SetMemory(0x664138, Subtract, 8192); -- 디파일러
		SetMemory(0x664148, Subtract, 8192); -- 인페 테란
		SetMemory(0x66414C, Subtract, 8192); -- 인페 케리건
		SetMemory(0x66421C, Subtract, 8192); -- 러커
		
		SetMemory(0x664080, Subtract, 8192); -- 마린
		SetMemory(0x664084, Subtract, 8192); -- 고스트
		SetMemory(0x664088, Subtract, 8192); -- 벌처
		SetMemory(0x66408C, Subtract, 8192); -- 골리앗
		SetMemory(0x664094, Subtract, 8192); -- 탱크(5)
		SetMemory(0x66409C, Subtract, 8192); -- SCV
		SetMemory(0x6640A4, Subtract, 8192); -- 배슬
		SetMemory(0x6640F8, Subtract, 8192); -- 탱크(30)
		SetMemory(0x664100, Subtract, 8192); -- 파이어뱃
		SetMemory(0x664108, Subtract, 8192); -- 메딕
		SetMemory(0x664168, Subtract, 8192); -- 발키리

		SetMemory(0x664170, Subtract, 8192); -- 커세어
		SetMemory(0x664174, Subtract, 8192); -- 닥템
		SetMemory(0x66417C, Subtract, 8192); -- 다크 아칸
		SetMemory(0x664184, Subtract, 8192); -- 질럿
		SetMemory(0x664188, Subtract, 8192); -- 드라군
		SetMemory(0x66418C, Subtract, 8192); -- 하템
		SetMemory(0x664190, Subtract, 8192); -- 아칸
		SetMemory(0x6641CC, Subtract, 8192); -- 리버
		
		CreateUnit(magic[4][m]*j, magic[5][m], "Location 65", CurrentPlayer);
		MoveUnit(magic[4][m]*j, magic[5][m], CurrentPlayer, "Location 65", "Location "..57+i);
		
		SetMemory(0x664114, Add, 8192); -- 저글링
		SetMemory(0x664118, Add, 8192); -- 히드라
		SetMemory(0x66411C, Add, 8192); -- 울트라
		SetMemory(0x664120, Add, 8192); -- 브루들링
		SetMemory(0x664134, Add, 8192); -- 퀸
		SetMemory(0x664138, Add, 8192); -- 디파일러
		SetMemory(0x664148, Add, 8192); -- 인페 테란
		SetMemory(0x66414C, Add, 8192); -- 인페 케리건
		SetMemory(0x66421C, Add, 8192); -- 러커
		
		SetMemory(0x664080, Add, 8192); -- 마린
		SetMemory(0x664084, Add, 8192); -- 고스트
		SetMemory(0x664088, Add, 8192); -- 벌처
		SetMemory(0x66408C, Add, 8192); -- 골리앗
		SetMemory(0x664094, Add, 8192); -- 탱크(5)
		SetMemory(0x66409C, Add, 8192); -- SCV
		SetMemory(0x6640A4, Add, 8192); -- 배슬
		SetMemory(0x6640F8, Add, 8192); -- 탱크(30)
		SetMemory(0x664100, Add, 8192); -- 파이어뱃
		SetMemory(0x664108, Add, 8192); -- 메딕
		SetMemory(0x664168, Add, 8192); -- 발키리

		SetMemory(0x664170, Add, 8192); -- 커세어
		SetMemory(0x664174, Add, 8192); -- 닥템
		SetMemory(0x66417C, Add, 8192); -- 다크 아칸
		SetMemory(0x664184, Add, 8192); -- 질럿
		SetMemory(0x664188, Add, 8192); -- 드라군
		SetMemory(0x66418C, Add, 8192); -- 하템
		SetMemory(0x664190, Add, 8192); -- 아칸
		SetMemory(0x6641CC, Add, 8192); -- 리버
	},
}
end
end
end

for i=1,6 do -- 일반 (1) / 테스트 포함
for m=1,13 do
for j=1,4 do
Trigger { -- 
	players = {i-1},
	conditions = {
		Switch("Switch 7", Cleared);
		Deaths(CurrentPlayer, AtLeast, 1000, "Warp Gate");
		Deaths(CurrentPlayer, Exactly, j, unitbozon[2][m]);
	},
	actions = {
		PreserveTrigger();		
		CreateUnit(normal[4][m]*j, normal[5][m], "Location "..57+i, CurrentPlayer);
	},
}

Trigger { -- 
	players = {i-1},
	conditions = {
		Switch("Switch 7", Set);
		Deaths(CurrentPlayer, AtLeast, 1000, "Warp Gate");
		Deaths(CurrentPlayer, Exactly, j, unitbozon[2][m]);
	},
	actions = {
		PreserveTrigger();
		
		SetMemory(0x664114, Subtract, 8192); -- 저글링
		SetMemory(0x664118, Subtract, 8192); -- 히드라
		SetMemory(0x66411C, Subtract, 8192); -- 울트라
		SetMemory(0x664120, Subtract, 8192); -- 브루들링
		SetMemory(0x664134, Subtract, 8192); -- 퀸
		SetMemory(0x664138, Subtract, 8192); -- 디파일러
		SetMemory(0x664148, Subtract, 8192); -- 인페 테란
		SetMemory(0x66414C, Subtract, 8192); -- 인페 케리건
		SetMemory(0x66421C, Subtract, 8192); -- 러커
		
		SetMemory(0x664080, Subtract, 8192); -- 마린
		SetMemory(0x664084, Subtract, 8192); -- 고스트
		SetMemory(0x664088, Subtract, 8192); -- 벌처
		SetMemory(0x66408C, Subtract, 8192); -- 골리앗
		SetMemory(0x664094, Subtract, 8192); -- 탱크(5)
		SetMemory(0x66409C, Subtract, 8192); -- SCV
		SetMemory(0x6640A4, Subtract, 8192); -- 배슬
		SetMemory(0x6640F8, Subtract, 8192); -- 탱크(30)
		SetMemory(0x664100, Subtract, 8192); -- 파이어뱃
		SetMemory(0x664108, Subtract, 8192); -- 메딕
		SetMemory(0x664168, Subtract, 8192); -- 발키리

		SetMemory(0x664170, Subtract, 8192); -- 커세어
		SetMemory(0x664174, Subtract, 8192); -- 닥템
		SetMemory(0x66417C, Subtract, 8192); -- 다크 아칸
		SetMemory(0x664184, Subtract, 8192); -- 질럿
		SetMemory(0x664188, Subtract, 8192); -- 드라군
		SetMemory(0x66418C, Subtract, 8192); -- 하템
		SetMemory(0x664190, Subtract, 8192); -- 아칸
		SetMemory(0x6641CC, Subtract, 8192); -- 리버
		
		CreateUnit(normal[4][m]*j, normal[5][m], "Location 65", CurrentPlayer);
		MoveUnit(normal[4][m]*j, normal[5][m], CurrentPlayer, "Location 65", "Location "..57+i);
		
		SetMemory(0x664114, Add, 8192); -- 저글링
		SetMemory(0x664118, Add, 8192); -- 히드라
		SetMemory(0x66411C, Add, 8192); -- 울트라
		SetMemory(0x664120, Add, 8192); -- 브루들링
		SetMemory(0x664134, Add, 8192); -- 퀸
		SetMemory(0x664138, Add, 8192); -- 디파일러
		SetMemory(0x664148, Add, 8192); -- 인페 테란
		SetMemory(0x66414C, Add, 8192); -- 인페 케리건
		SetMemory(0x66421C, Add, 8192); -- 러커
		
		SetMemory(0x664080, Add, 8192); -- 마린
		SetMemory(0x664084, Add, 8192); -- 고스트
		SetMemory(0x664088, Add, 8192); -- 벌처
		SetMemory(0x66408C, Add, 8192); -- 골리앗
		SetMemory(0x664094, Add, 8192); -- 탱크(5)
		SetMemory(0x66409C, Add, 8192); -- SCV
		SetMemory(0x6640A4, Add, 8192); -- 배슬
		SetMemory(0x6640F8, Add, 8192); -- 탱크(30)
		SetMemory(0x664100, Add, 8192); -- 파이어뱃
		SetMemory(0x664108, Add, 8192); -- 메딕
		SetMemory(0x664168, Add, 8192); -- 발키리

		SetMemory(0x664170, Add, 8192); -- 커세어
		SetMemory(0x664174, Add, 8192); -- 닥템
		SetMemory(0x66417C, Add, 8192); -- 다크 아칸
		SetMemory(0x664184, Add, 8192); -- 질럿
		SetMemory(0x664188, Add, 8192); -- 드라군
		SetMemory(0x66418C, Add, 8192); -- 하템
		SetMemory(0x664190, Add, 8192); -- 아칸
		SetMemory(0x6641CC, Add, 8192); -- 리버
	},
}
end
end
end

for i=1,6 do -- 일반 (2) / 테스트 포함
for m=1,3 do
for j=1,4 do
Trigger { -- 
	players = {i-1},
	conditions = {
		Switch("Switch 7", Cleared);
		Deaths(CurrentPlayer, AtLeast, 1000, "Warp Gate");
		Deaths(CurrentPlayer, Exactly, j, unitbozon[3][m]);
	},
	actions = {
		PreserveTrigger();
		CreateUnit(normal[9][m]*j, normal[10][m], "Location "..57+i, CurrentPlayer);
		CreateUnit(normal[11][m]*j, normal[12][m], "Location "..57+i, CurrentPlayer);
	},
}

Trigger { -- 
	players = {i-1},
	conditions = {
		Switch("Switch 7", Set);
		Deaths(CurrentPlayer, AtLeast, 1000, "Warp Gate");
		Deaths(CurrentPlayer, Exactly, j, unitbozon[3][m]);
	},
	actions = {
		PreserveTrigger();
		
		SetMemory(0x664114, Subtract, 8192); -- 저글링
		SetMemory(0x664118, Subtract, 8192); -- 히드라
		SetMemory(0x66411C, Subtract, 8192); -- 울트라
		SetMemory(0x664120, Subtract, 8192); -- 브루들링
		SetMemory(0x664134, Subtract, 8192); -- 퀸
		SetMemory(0x664138, Subtract, 8192); -- 디파일러
		SetMemory(0x664148, Subtract, 8192); -- 인페 테란
		SetMemory(0x66414C, Subtract, 8192); -- 인페 케리건
		SetMemory(0x66421C, Subtract, 8192); -- 러커
		
		SetMemory(0x664080, Subtract, 8192); -- 마린
		SetMemory(0x664084, Subtract, 8192); -- 고스트
		SetMemory(0x664088, Subtract, 8192); -- 벌처
		SetMemory(0x66408C, Subtract, 8192); -- 골리앗
		SetMemory(0x664094, Subtract, 8192); -- 탱크(5)
		SetMemory(0x66409C, Subtract, 8192); -- SCV
		SetMemory(0x6640A4, Subtract, 8192); -- 배슬
		SetMemory(0x6640F8, Subtract, 8192); -- 탱크(30)
		SetMemory(0x664100, Subtract, 8192); -- 파이어뱃
		SetMemory(0x664108, Subtract, 8192); -- 메딕
		SetMemory(0x664168, Subtract, 8192); -- 발키리

		SetMemory(0x664170, Subtract, 8192); -- 커세어
		SetMemory(0x664174, Subtract, 8192); -- 닥템
		SetMemory(0x66417C, Subtract, 8192); -- 다크 아칸
		SetMemory(0x664184, Subtract, 8192); -- 질럿
		SetMemory(0x664188, Subtract, 8192); -- 드라군
		SetMemory(0x66418C, Subtract, 8192); -- 하템
		SetMemory(0x664190, Subtract, 8192); -- 아칸
		SetMemory(0x6641CC, Subtract, 8192); -- 리버
		
		CreateUnit(normal[9][m]*j, normal[10][m], "Location 65", CurrentPlayer);
		MoveUnit(normal[9][m]*j, normal[10][m], CurrentPlayer, "Location 65", "Location "..57+i);
		CreateUnit(normal[11][m]*j, normal[12][m], "Location 65", CurrentPlayer);
		MoveUnit(normal[11][m]*j, normal[12][m], CurrentPlayer, "Location 65", "Location "..57+i);
		
		SetMemory(0x664114, Add, 8192); -- 저글링
		SetMemory(0x664118, Add, 8192); -- 히드라
		SetMemory(0x66411C, Add, 8192); -- 울트라
		SetMemory(0x664120, Add, 8192); -- 브루들링
		SetMemory(0x664134, Add, 8192); -- 퀸
		SetMemory(0x664138, Add, 8192); -- 디파일러
		SetMemory(0x664148, Add, 8192); -- 인페 테란
		SetMemory(0x66414C, Add, 8192); -- 인페 케리건
		SetMemory(0x66421C, Add, 8192); -- 러커
		
		SetMemory(0x664080, Add, 8192); -- 마린
		SetMemory(0x664084, Add, 8192); -- 고스트
		SetMemory(0x664088, Add, 8192); -- 벌처
		SetMemory(0x66408C, Add, 8192); -- 골리앗
		SetMemory(0x664094, Add, 8192); -- 탱크(5)
		SetMemory(0x66409C, Add, 8192); -- SCV
		SetMemory(0x6640A4, Add, 8192); -- 배슬
		SetMemory(0x6640F8, Add, 8192); -- 탱크(30)
		SetMemory(0x664100, Add, 8192); -- 파이어뱃
		SetMemory(0x664108, Add, 8192); -- 메딕
		SetMemory(0x664168, Add, 8192); -- 발키리

		SetMemory(0x664170, Add, 8192); -- 커세어
		SetMemory(0x664174, Add, 8192); -- 닥템
		SetMemory(0x66417C, Add, 8192); -- 다크 아칸
		SetMemory(0x664184, Add, 8192); -- 질럿
		SetMemory(0x664188, Add, 8192); -- 드라군
		SetMemory(0x66418C, Add, 8192); -- 하템
		SetMemory(0x664190, Add, 8192); -- 아칸
		SetMemory(0x6641CC, Add, 8192); -- 리버
	},
}
end
end
end

Trigger { -- 
	players = {Force1},
	conditions = {
		Deaths(CurrentPlayer, AtLeast, 1000, "Warp Gate");
	},
	actions = {
		PreserveTrigger();
		SetDeaths(CurrentPlayer, SetTo, 0, "Warp Gate");
	},
}

Trigger { -- 시간 내에 안 고르면 그냥 74로케(썼던 거 다시 쓰기)로 이동
	players = {Force1},
	conditions = {
		CountdownTimer(AtMost, 2);
		CountdownTimer(AtLeast, 1);
		Bring(CurrentPlayer, AtLeast, 1, "Choice", "Location 146");
	},
	actions = {
		PreserveTrigger();
		MoveUnit(1, "Choice", CurrentPlayer, "Location 146", "Location 74");
	},
}

for i=1,6 do -- 싱글 라운드 시작 인식 / 승리 경우 + 화면 이동, 라이프 무적, 승리 인식
Trigger { --
	players = {i-1},
	conditions = {
		Deaths(P7, Exactly, 1050, "Young Chrysalis");
		Deaths(CurrentPlayer, AtMost, 23, "처음부터 하기");
		Bring(CurrentPlayer, AtLeast, 1, "라이프", "Location "..110+i);
		Bring(CurrentPlayer, AtLeast, 1, "Men", "Location 72");
		Bring(P8, Exactly, 0, "Men", "Location "..159+i);
		Bring(P11, Exactly, 0, "Men", "Location "..159+i);
		Bring(P8, Exactly, 0, "Men", "Location "..64+i);
	},
	actions = {
		PreserveTrigger();
		SetDeaths(CurrentPlayer, Add, 1, "처음부터 하기");
	},
}

Trigger { --
	players = {i-1},
	conditions = {
		Deaths(CurrentPlayer, AtLeast, 1, "처음부터 하기");
		Bring(P8, AtLeast, 1, "Men", "Location "..159+i);
	},
	actions = {
		PreserveTrigger();
		SetDeaths(CurrentPlayer, SetTo, 0, "처음부터 하기");
	},
}

Trigger { --
	players = {i-1},
	conditions = {
		Deaths(CurrentPlayer, AtLeast, 1, "처음부터 하기");
		Bring(P11, AtLeast, 1, "Men", "Location "..159+i);
	},
	actions = {
		PreserveTrigger();
		SetDeaths(CurrentPlayer, SetTo, 0, "처음부터 하기");
	},
}

Trigger { --
	players = {i-1},
	conditions = {
		Deaths(CurrentPlayer, AtLeast, 1, "처음부터 하기");
		Bring(P8, AtLeast, 1, "Men", "Location "..64+i);
	},
	actions = {
		PreserveTrigger();
		SetDeaths(CurrentPlayer, SetTo, 0, "처음부터 하기");
	},
}

Trigger { --
	players = {i-1},
	conditions = {
		Deaths(P7, Exactly, 1050, "Young Chrysalis");
		Deaths(CurrentPlayer, AtMost, 29, "처음부터 하기");
		Deaths(CurrentPlayer, AtLeast, 24, "처음부터 하기");
	},
	actions = {
		PreserveTrigger();
		SetDeaths(CurrentPlayer, SetTo, 30, "처음부터 하기");
		SetInvincibility(Enable, "라이프", CurrentPlayer, "Location "..110+i);
		ModifyUnitHitPoints(1, "라이프", CurrentPlayer, "Location "..110+i, 100);
		CenterView("Location "..90+i);
		SetSwitch("Switch 15", Set); -- 싱글존 승리 인식 스위치
	},
}
end

for i=1,2 do -- 1~2피
Trigger { --
	players = {i-1},
	conditions = {
		Deaths(P7, Exactly, 1050, "Young Chrysalis");
		Deaths(CurrentPlayer, AtLeast, 30, "처음부터 하기");
		Bring(CurrentPlayer, AtLeast, 1, "Men", "Location 72");
	},
	actions = {
		PreserveTrigger();
		
		SetMemory(0x664114, Subtract, 8192); -- 저글링
		SetMemory(0x664118, Subtract, 8192); -- 히드라
		SetMemory(0x66411C, Subtract, 8192); -- 울트라
		SetMemory(0x664120, Subtract, 8192); -- 브루들링
		SetMemory(0x664134, Subtract, 8192); -- 퀸
		SetMemory(0x664138, Subtract, 8192); -- 디파일러
		SetMemory(0x664148, Subtract, 8192); -- 인페 테란
		SetMemory(0x66414C, Subtract, 8192); -- 인페 케리건
		SetMemory(0x66421C, Subtract, 8192); -- 러커
		
		SetMemory(0x664080, Subtract, 8192); -- 마린
		SetMemory(0x664084, Subtract, 8192); -- 고스트
		SetMemory(0x664088, Subtract, 8192); -- 벌처
		SetMemory(0x66408C, Subtract, 8192); -- 골리앗
		SetMemory(0x664094, Subtract, 8192); -- 탱크(5)
		SetMemory(0x66409C, Subtract, 8192); -- SCV
		SetMemory(0x6640A4, Subtract, 8192); -- 배슬
		SetMemory(0x6640F8, Subtract, 8192); -- 탱크(30)
		SetMemory(0x664100, Subtract, 8192); -- 파이어뱃
		SetMemory(0x664108, Subtract, 8192); -- 메딕
		SetMemory(0x664168, Subtract, 8192); -- 발키리

		SetMemory(0x664170, Subtract, 8192); -- 커세어
		SetMemory(0x664174, Subtract, 8192); -- 닥템
		SetMemory(0x66417C, Subtract, 8192); -- 다크 아칸
		SetMemory(0x664184, Subtract, 8192); -- 질럿
		SetMemory(0x664188, Subtract, 8192); -- 드라군
		SetMemory(0x66418C, Subtract, 8192); -- 하템
		SetMemory(0x664190, Subtract, 8192); -- 아칸
		SetMemory(0x6641CC, Subtract, 8192); -- 리버
		
		MoveUnit(All, "Men", CurrentPlayer, "Location 72", "Location "..110+i);
		MoveUnit(All, "Men", CurrentPlayer, "Location "..110+i, "Location "..88+i);
		MoveUnit(All, "Men", CurrentPlayer, "Location "..88+i, "Location "..90+i);
		RemoveUnitAt(All, "Men", "Location "..159+i, P7);
		
		SetMemory(0x664114, Add, 8192); -- 저글링
		SetMemory(0x664118, Add, 8192); -- 히드라
		SetMemory(0x66411C, Add, 8192); -- 울트라
		SetMemory(0x664120, Add, 8192); -- 브루들링
		SetMemory(0x664134, Add, 8192); -- 퀸
		SetMemory(0x664138, Add, 8192); -- 디파일러
		SetMemory(0x664148, Add, 8192); -- 인페 테란
		SetMemory(0x66414C, Add, 8192); -- 인페 케리건
		SetMemory(0x66421C, Add, 8192); -- 러커
		
		SetMemory(0x664080, Add, 8192); -- 마린
		SetMemory(0x664084, Add, 8192); -- 고스트
		SetMemory(0x664088, Add, 8192); -- 벌처
		SetMemory(0x66408C, Add, 8192); -- 골리앗
		SetMemory(0x664094, Add, 8192); -- 탱크(5)
		SetMemory(0x66409C, Add, 8192); -- SCV
		SetMemory(0x6640A4, Add, 8192); -- 배슬
		SetMemory(0x6640F8, Add, 8192); -- 탱크(30)
		SetMemory(0x664100, Add, 8192); -- 파이어뱃
		SetMemory(0x664108, Add, 8192); -- 메딕
		SetMemory(0x664168, Add, 8192); -- 발키리

		SetMemory(0x664170, Add, 8192); -- 커세어
		SetMemory(0x664174, Add, 8192); -- 닥템
		SetMemory(0x66417C, Add, 8192); -- 다크 아칸
		SetMemory(0x664184, Add, 8192); -- 질럿
		SetMemory(0x664188, Add, 8192); -- 드라군
		SetMemory(0x66418C, Add, 8192); -- 하템
		SetMemory(0x664190, Add, 8192); -- 아칸
		SetMemory(0x6641CC, Add, 8192); -- 리버
	},
}

Trigger { --
	players = {i-1},
	conditions = {
		Deaths(P7, Exactly, 1050, "Young Chrysalis");
		Deaths(CurrentPlayer, AtLeast, 30, "처음부터 하기");
		Bring(CurrentPlayer, AtLeast, 1, "Men", "Location 72");
	},
	actions = {
		PreserveTrigger();
		
		SetMemory(0x6640A0, Subtract, 8192); -- 레이스
		SetMemory(0x6640B0, Subtract, 8192); -- 배틀
		SetMemory(0x66412C, Subtract, 8192); -- 뮤탈
		SetMemory(0x664130, Subtract, 8192); -- 가디언
		SetMemory(0x664178, Subtract, 8192); -- 디바
		SetMemory(0x664198, Subtract, 8192); -- 스카웃
		SetMemory(0x66419C, Subtract, 8192); -- 아비터
		SetMemory(0x6641A0, Subtract, 8192); -- 캐리어
		
		MoveUnit(All, "Men", CurrentPlayer, "Location 72", "Location "..110+i);
		MoveUnit(All, "Men", CurrentPlayer, "Location "..110+i, "Location "..88+i);
		MoveUnit(All, "Men", CurrentPlayer, "Location "..88+i, "Location "..90+i);
		RemoveUnitAt(All, "Men", "Location "..159+i, P7);
		
		SetMemory(0x6640A0, Add, 8192); -- 레이스
		SetMemory(0x6640B0, Add, 8192); -- 배틀
		SetMemory(0x66412C, Add, 8192); -- 뮤탈
		SetMemory(0x664130, Add, 8192); -- 가디언
		SetMemory(0x664178, Add, 8192); -- 디바
		SetMemory(0x664198, Add, 8192); -- 스카웃
		SetMemory(0x66419C, Add, 8192); -- 아비터
		SetMemory(0x6641A0, Add, 8192); -- 캐리어
	},
}
end

for i=1,4 do -- 3~6피
Trigger { --
	players = {i+1},
	conditions = {
		Deaths(P7, Exactly, 1050, "Young Chrysalis");
		Deaths(CurrentPlayer, AtLeast, 30, "처음부터 하기");
		Bring(CurrentPlayer, AtLeast, 1, "Men", "Location 72");
	},
	actions = {
		PreserveTrigger();
		
		SetMemory(0x664114, Subtract, 8192); -- 저글링
		SetMemory(0x664118, Subtract, 8192); -- 히드라
		SetMemory(0x66411C, Subtract, 8192); -- 울트라
		SetMemory(0x664120, Subtract, 8192); -- 브루들링
		SetMemory(0x664134, Subtract, 8192); -- 퀸
		SetMemory(0x664138, Subtract, 8192); -- 디파일러
		SetMemory(0x664148, Subtract, 8192); -- 인페 테란
		SetMemory(0x66414C, Subtract, 8192); -- 인페 케리건
		SetMemory(0x66421C, Subtract, 8192); -- 러커
		
		SetMemory(0x664080, Subtract, 8192); -- 마린
		SetMemory(0x664084, Subtract, 8192); -- 고스트
		SetMemory(0x664088, Subtract, 8192); -- 벌처
		SetMemory(0x66408C, Subtract, 8192); -- 골리앗
		SetMemory(0x664094, Subtract, 8192); -- 탱크(5)
		SetMemory(0x66409C, Subtract, 8192); -- SCV
		SetMemory(0x6640A4, Subtract, 8192); -- 배슬
		SetMemory(0x6640F8, Subtract, 8192); -- 탱크(30)
		SetMemory(0x664100, Subtract, 8192); -- 파이어뱃
		SetMemory(0x664108, Subtract, 8192); -- 메딕
		SetMemory(0x664168, Subtract, 8192); -- 발키리

		SetMemory(0x664170, Subtract, 8192); -- 커세어
		SetMemory(0x664174, Subtract, 8192); -- 닥템
		SetMemory(0x66417C, Subtract, 8192); -- 다크 아칸
		SetMemory(0x664184, Subtract, 8192); -- 질럿
		SetMemory(0x664188, Subtract, 8192); -- 드라군
		SetMemory(0x66418C, Subtract, 8192); -- 하템
		SetMemory(0x664190, Subtract, 8192); -- 아칸
		SetMemory(0x6641CC, Subtract, 8192); -- 리버
		
		MoveUnit(All, "Men", CurrentPlayer, "Location 72", "Location "..112+i);
		MoveUnit(All, "Men", CurrentPlayer, "Location "..112+i, "Location "..92+i);
		RemoveUnitAt(All, "Men", "Location "..161+i, P7);
		
		SetMemory(0x664114, Add, 8192); -- 저글링
		SetMemory(0x664118, Add, 8192); -- 히드라
		SetMemory(0x66411C, Add, 8192); -- 울트라
		SetMemory(0x664120, Add, 8192); -- 브루들링
		SetMemory(0x664134, Add, 8192); -- 퀸
		SetMemory(0x664138, Add, 8192); -- 디파일러
		SetMemory(0x664148, Add, 8192); -- 인페 테란
		SetMemory(0x66414C, Add, 8192); -- 인페 케리건
		SetMemory(0x66421C, Add, 8192); -- 러커
		
		SetMemory(0x664080, Add, 8192); -- 마린
		SetMemory(0x664084, Add, 8192); -- 고스트
		SetMemory(0x664088, Add, 8192); -- 벌처
		SetMemory(0x66408C, Add, 8192); -- 골리앗
		SetMemory(0x664094, Add, 8192); -- 탱크(5)
		SetMemory(0x66409C, Add, 8192); -- SCV
		SetMemory(0x6640A4, Add, 8192); -- 배슬
		SetMemory(0x6640F8, Add, 8192); -- 탱크(30)
		SetMemory(0x664100, Add, 8192); -- 파이어뱃
		SetMemory(0x664108, Add, 8192); -- 메딕
		SetMemory(0x664168, Add, 8192); -- 발키리

		SetMemory(0x664170, Add, 8192); -- 커세어
		SetMemory(0x664174, Add, 8192); -- 닥템
		SetMemory(0x66417C, Add, 8192); -- 다크 아칸
		SetMemory(0x664184, Add, 8192); -- 질럿
		SetMemory(0x664188, Add, 8192); -- 드라군
		SetMemory(0x66418C, Add, 8192); -- 하템
		SetMemory(0x664190, Add, 8192); -- 아칸
		SetMemory(0x6641CC, Add, 8192); -- 리버
	},
}

Trigger { --
	players = {i+1},
	conditions = {
		Deaths(P7, Exactly, 1050, "Young Chrysalis");
		Deaths(CurrentPlayer, AtLeast, 30, "처음부터 하기");
		Bring(CurrentPlayer, AtLeast, 1, "Men", "Location 72");
	},
	actions = {
		PreserveTrigger();
		
		SetMemory(0x6640A0, Subtract, 8192); -- 레이스
		SetMemory(0x6640B0, Subtract, 8192); -- 배틀
		SetMemory(0x66412C, Subtract, 8192); -- 뮤탈
		SetMemory(0x664130, Subtract, 8192); -- 가디언
		SetMemory(0x664178, Subtract, 8192); -- 디바
		SetMemory(0x664198, Subtract, 8192); -- 스카웃
		SetMemory(0x66419C, Subtract, 8192); -- 아비터
		SetMemory(0x6641A0, Subtract, 8192); -- 캐리어
		
		MoveUnit(All, "Men", CurrentPlayer, "Location 72", "Location "..112+i);
		MoveUnit(All, "Men", CurrentPlayer, "Location "..112+i, "Location "..92+i);
		RemoveUnitAt(All, "Men", "Location "..161+i, P7);
		
		SetMemory(0x6640A0, Add, 8192); -- 레이스
		SetMemory(0x6640B0, Add, 8192); -- 배틀
		SetMemory(0x66412C, Add, 8192); -- 뮤탈
		SetMemory(0x664130, Add, 8192); -- 가디언
		SetMemory(0x664178, Add, 8192); -- 디바
		SetMemory(0x664198, Add, 8192); -- 스카웃
		SetMemory(0x66419C, Add, 8192); -- 아비터
		SetMemory(0x6641A0, Add, 8192); -- 캐리어
	},
}
end

Trigger { -- 싱글존 1명이라도 클리어해서 끝났을 경우 팀플존 넘어가기
	players = {P7},
	conditions = {
		Switch("Switch 15", Set);
		Deaths(P7, Exactly, 1050, "Young Chrysalis");
		Deaths(P7, AtMost, 23, "Right Wall Flame Trap");
		Bring(P8, Exactly, 0, "Men", "Location 72");
		Bring(Force1, Exactly, 0, "Men", "Location 72");
		Bring(P8, Exactly, 0, "Men", "Location 110");
	},
	actions = {
		PreserveTrigger();
		SetDeaths(P7, Add, 1, "Right Wall Flame Trap");
	},
}

Trigger { --
	players = {P7},
	conditions = {
		Switch("Switch 15", Cleared);
		Deaths(P7, AtLeast, 1, "Right Wall Flame Trap");
	},
	actions = {
		PreserveTrigger();
		SetDeaths(P7, SetTo, 0, "Right Wall Flame Trap");
	},
}

Trigger { --
	players = {P7},
	conditions = {
		Deaths(P7, Exactly, 1050, "Young Chrysalis");
		Deaths(P7, AtLeast, 24, "Right Wall Flame Trap");
	},
	actions = {
		PreserveTrigger();
		SetDeaths(P7, SetTo, 0, "Right Wall Flame Trap");
		SetDeaths(P7, SetTo, 1051, "Young Chrysalis");
	},
}

teammove1 = {}; -- 싱글존 유닛이 팀플존으로 이동 
                     -- 드론주는수, 일자 로케 번호
table.insert(teammove1, { {1,2,3, 5,6,7}, 151, 152 }); -- 탱크 153
table.insert(teammove1, { {1,2,3, 5,6,7}, 151, 153 }); -- 히드라 152
table.insert(teammove1, { {1,2,3, 5,6,7}, 151, 152, 153 }); -- 배틀 149
table.insert(teammove1, { {1,2,3, 5,6,7}, 153 }); -- 레이스 151
table.insert(teammove1, { {1,2,3, 5,6,7}, 151, 152 }); -- 가디언 154

table.insert(teammove1, { {1,2,3, 5,6,7}, 152, 153 }); -- 6번째 / 질럿 151
table.insert(teammove1, { {1,2,3, 5,6,7}, 151, 152 }); -- 커세어 154
table.insert(teammove1, { {1,2,3, 5,6,7}, 149, 150 }); -- 디바우러 153
table.insert(teammove1, { {1,2,3, 5,6,7}, 153, 154 }); -- 파이어뱃 150
table.insert(teammove1, { {1,2,3, 5,6,7}, 153, 154, 155 }); -- SCV 149

table.insert(teammove1, { {1,2,3, 5,6,7}, 152, 153, 154 }); -- 11번째 / 울트라 150
table.insert(teammove1, { {1,2,3, 5,6,7}, 149, 151 }); -- 골리앗 / 153
table.insert(teammove1, { {1,2,3, 5,6,7}, 149, 150, 151 }); -- 리버 / 152
table.insert(teammove1, { {1,2,3, 5,6,7}, 149 }); -- 아칸 / 152
table.insert(teammove1, { {1,2,3, 5,6,7}, 152, 154 }); -- 닥템 / 149

table.insert(teammove1, { {1,2,3, 5,6,7}, 149, 150, 151 }); -- 16번째 / 뮤탈 153
table.insert(teammove1, { {1,2,3, 5,6,7}, 152, 153, 154, 155 }); -- 저글링 149
table.insert(teammove1, { {1,2,3, 5,6,7}, 149, 150 }); -- 스카웃 153
table.insert(teammove1, { {1,2,3, 5,6,7}, 149, 150, 155 }); -- 인페 케리건 152
table.insert(teammove1, { {1,2,3, 5,6,7}, 149, 151 }); -- 벌처 153

table.insert(teammove1, { {1,2,3, 5,6,7}, 149, 150, 155 }); -- 21번째 / 마린 152,153
table.insert(teammove1, { {1,2,3, 5,6,7}, 149, 154, 155 }); -- 고스트 151,152
table.insert(teammove1, { {1,2,3, 5,6,7}, 149, 150, 155 }); -- 캐리어 152,153
table.insert(teammove1, { {1,2,3, 5,6,7}, 149, 150, 151 }); -- 드라군 153,154
table.insert(teammove1, { {1,2,3, 5,6,7}, 149, 151, 150 }); -- 발키리 153,154

table.insert(teammove1, { {1,2,3, 5,6,7}, 149, 151, 152 }); -- 26번째 / 영웅 리버 153,154
table.insert(teammove1, { {1,2,3, 5,6,7}, 152, 153, 154 }); -- 영웅 하템 149
table.insert(teammove1, { {1,2,3, 5,6,7}, 152, 154 }); -- 영웅 배틀 149
table.insert(teammove1, { {1,2,3, 5,6,7}, 149, 150, 151, 152 }); -- 영웅 퀸 154
table.insert(teammove1, { {1,2,3, 5,6,7}, 149, 150, 155 }); -- 영웅 다칸 152,153

for i=1,#teammove1 do -- 싱글존 유닛이 팀플존으로 이동
for m=1,6 do
action_tmove1 = {};
for j=1,#teammove1[i]-1 do
table.insert(action_tmove1, GiveUnits(teammove1[i][1][m], "Zerg Drone", P9, "Location "..teammove1[i][j+1], P10));
table.insert(action_tmove1, MoveLocation("Location 148", "Zerg Drone", P9, "Location "..teammove1[i][j+1]));
table.insert(action_tmove1, SetMemory(singcre1[3*i][j][3], Subtract, 8192));
table.insert(action_tmove1, MoveUnit(All, singcre1[3*i][j][2], P11, "Location "..159+m, "Location 148"));
table.insert(action_tmove1, SetMemory(singcre1[3*i][j][3], Add, 8192));
end

Trigger { --
	players = {P7},
	conditions = {
		Deaths(P7, Exactly, roundmodech[1][i*3], "Mineral Chunk (Type 1)"); -- 라운드 인식
		Deaths(P7, Exactly, 1101, "Young Chrysalis");
		Bring(P11, AtLeast, 1, "Men", "Location "..159+m);
	},
	actions = {
		PreserveTrigger();
		
		action_tmove1;
		GiveUnits(All, "Men", P11, "Location 166", P8);
		GiveUnits(All, "Zerg Drone", P10, "Location 117", P9); -- 초기화
		SetSwitch("Switch 17", Set); -- 팀플존 최초 공격 보조
	},
}
end
end

for m=1,6 do -- 마컨, 시즈 등으로 안 가는 유닛도 이동 시키기
Trigger { --
	players = {P7},
	conditions = {
		Deaths(P7, AtLeast, 1, "Mineral Chunk (Type 1)"); -- 라운드 인식
		Deaths(P7, Exactly, 1101, "Young Chrysalis");
		Bring(P11, AtLeast, 1, "Men", "Location "..159+m);
	},
	actions = {
		PreserveTrigger();
		
		SetMemory(0x664114, Subtract, 8192); -- 저글링
		SetMemory(0x664118, Subtract, 8192); -- 히드라
		SetMemory(0x66411C, Subtract, 8192); -- 울트라
		SetMemory(0x664120, Subtract, 8192); -- 브루들링
		SetMemory(0x664134, Subtract, 8192); -- 퀸
		SetMemory(0x664138, Subtract, 8192); -- 디파일러
		SetMemory(0x664148, Subtract, 8192); -- 인페 테란
		SetMemory(0x66414C, Subtract, 8192); -- 인페 케리건
		SetMemory(0x66421C, Subtract, 8192); -- 러커
		
		SetMemory(0x664080, Subtract, 8192); -- 마린
		SetMemory(0x664084, Subtract, 8192); -- 고스트
		SetMemory(0x664088, Subtract, 8192); -- 벌처
		SetMemory(0x66408C, Subtract, 8192); -- 골리앗
		SetMemory(0x664094, Subtract, 8192); -- 탱크(5)
		SetMemory(0x66409C, Subtract, 8192); -- SCV
		SetMemory(0x6640A4, Subtract, 8192); -- 배슬
		SetMemory(0x6640F8, Subtract, 8192); -- 탱크(30)
		SetMemory(0x664100, Subtract, 8192); -- 파이어뱃
		SetMemory(0x664108, Subtract, 8192); -- 메딕
		SetMemory(0x664168, Subtract, 8192); -- 발키리

		SetMemory(0x664170, Subtract, 8192); -- 커세어
		SetMemory(0x664174, Subtract, 8192); -- 닥템
		SetMemory(0x66417C, Subtract, 8192); -- 다크 아칸
		SetMemory(0x664184, Subtract, 8192); -- 질럿
		SetMemory(0x664188, Subtract, 8192); -- 드라군
		SetMemory(0x66418C, Subtract, 8192); -- 하템
		SetMemory(0x664190, Subtract, 8192); -- 아칸
		SetMemory(0x6641CC, Subtract, 8192); -- 리버
		
		MoveUnit(1, "Men", P11, "Location "..159+m, "Location 241");
		MoveUnit(1, "Men", P11, "Location "..159+m, "Location 242");
		MoveUnit(1, "Men", P11, "Location "..159+m, "Location 243");
		MoveUnit(1, "Men", P11, "Location "..159+m, "Location 244");
		MoveUnit(1, "Men", P11, "Location "..159+m, "Location 245");
		MoveUnit(1, "Men", P11, "Location "..159+m, "Location 246");
		GiveUnits(All, "Men", P11, "Location 166", P8);
		
		SetMemory(0x664114, Add, 8192); -- 저글링
		SetMemory(0x664118, Add, 8192); -- 히드라
		SetMemory(0x66411C, Add, 8192); -- 울트라
		SetMemory(0x664120, Add, 8192); -- 브루들링
		SetMemory(0x664134, Add, 8192); -- 퀸
		SetMemory(0x664138, Add, 8192); -- 디파일러
		SetMemory(0x664148, Add, 8192); -- 인페 테란
		SetMemory(0x66414C, Add, 8192); -- 인페 케리건
		SetMemory(0x66421C, Add, 8192); -- 러커
		
		SetMemory(0x664080, Add, 8192); -- 마린
		SetMemory(0x664084, Add, 8192); -- 고스트
		SetMemory(0x664088, Add, 8192); -- 벌처
		SetMemory(0x66408C, Add, 8192); -- 골리앗
		SetMemory(0x664094, Add, 8192); -- 탱크(5)
		SetMemory(0x66409C, Add, 8192); -- SCV
		SetMemory(0x6640A4, Add, 8192); -- 배슬
		SetMemory(0x6640F8, Add, 8192); -- 탱크(30)
		SetMemory(0x664100, Add, 8192); -- 파이어뱃
		SetMemory(0x664108, Add, 8192); -- 메딕
		SetMemory(0x664168, Add, 8192); -- 발키리

		SetMemory(0x664170, Add, 8192); -- 커세어
		SetMemory(0x664174, Add, 8192); -- 닥템
		SetMemory(0x66417C, Add, 8192); -- 다크 아칸
		SetMemory(0x664184, Add, 8192); -- 질럿
		SetMemory(0x664188, Add, 8192); -- 드라군
		SetMemory(0x66418C, Add, 8192); -- 하템
		SetMemory(0x664190, Add, 8192); -- 아칸
		SetMemory(0x6641CC, Add, 8192); -- 리버
	},
}

Trigger { --
	players = {P7},
	conditions = {
		Deaths(P7, AtLeast, 1, "Mineral Chunk (Type 1)"); -- 라운드 인식
		Deaths(P7, Exactly, 1101, "Young Chrysalis");
		Bring(P11, AtLeast, 1, "Men", "Location "..159+m);
	},
	actions = {
		PreserveTrigger();
		
		SetMemory(0x6640A0, Subtract, 8192); -- 레이스
		SetMemory(0x6640B0, Subtract, 8192); -- 배틀
		SetMemory(0x66412C, Subtract, 8192); -- 뮤탈
		SetMemory(0x664130, Subtract, 8192); -- 가디언
		SetMemory(0x664178, Subtract, 8192); -- 디바
		SetMemory(0x664198, Subtract, 8192); -- 스카웃
		SetMemory(0x66419C, Subtract, 8192); -- 아비터
		SetMemory(0x6641A0, Subtract, 8192); -- 캐리어
		
		MoveUnit(1, "Men", P11, "Location "..159+m, "Location 241");
		MoveUnit(1, "Men", P11, "Location "..159+m, "Location 242");
		MoveUnit(1, "Men", P11, "Location "..159+m, "Location 243");
		MoveUnit(1, "Men", P11, "Location "..159+m, "Location 244");
		MoveUnit(1, "Men", P11, "Location "..159+m, "Location 245");
		MoveUnit(1, "Men", P11, "Location "..159+m, "Location 246");
		GiveUnits(All, "Men", P11, "Location 166", P8);
		
		SetMemory(0x6640A0, Add, 8192); -- 레이스
		SetMemory(0x6640B0, Add, 8192); -- 배틀
		SetMemory(0x66412C, Add, 8192); -- 뮤탈
		SetMemory(0x664130, Add, 8192); -- 가디언
		SetMemory(0x664178, Add, 8192); -- 디바
		SetMemory(0x664198, Add, 8192); -- 스카웃
		SetMemory(0x66419C, Add, 8192); -- 아비터
		SetMemory(0x6641A0, Add, 8192); -- 캐리어
	},
}
end

for i=1,30 do -- 싱글존 전원 클리어해서 팀플존으로 이동할 유닛이 없을 경우에도 스위치 17켜주기
Trigger { -- 
	players = {P7},
	conditions = {
		Switch("Switch 17", Cleared);
		Deaths(P7, Exactly, i, "Mineral Chunk (Type 1)"); -- 라운드 인식
		Deaths(P7, Exactly, 1101, "Young Chrysalis");
		Bring(P11, Exactly, 0, "Men", "Location 72");
	},
	actions = {
		PreserveTrigger();
		SetSwitch("Switch 17", Set); -- 팀플존 최초 공격 보조(1)
	},
}
end

Trigger { -- 03-3. 팀플존 카운트 / 30라운드 이하 / 테스트 포함
	players = {P7},
	conditions = {
		Switch("Switch 7", Cleared);
		Deaths(P7, AtMost, 40, "Mineral Chunk (Type 1)");
		Deaths(P7, Exactly, 1051, "Young Chrysalis");
	},
	actions = {
		PreserveTrigger();
		SetDeaths(P7, SetTo, 1052, "Young Chrysalis");
		SetCountdownTimer(SetTo, 21);
	},
}

Trigger { -- 팀플존 카운트 테스트 타이머 고정
	players = {P7},
	conditions = {
		Switch("Switch 7", Set);
		Switch("Switch 29", Cleared);
		Deaths(P7, Exactly, 1051, "Young Chrysalis");
	},
	actions = {
		PreserveTrigger();
		SetSwitch("Switch 29", Set);
		SetDeaths(P7, SetTo, 1052, "Young Chrysalis");
		SetCountdownTimer(SetTo, 21);
	},
}

Trigger { -- 팀플존 카운트 21 전에 잠시 대기 데스값
	players = {P7},
	conditions = {
		Deaths(P7, AtMost, 1099, "Young Chrysalis");
		Deaths(P7, AtLeast, 1052, "Young Chrysalis");
	},
	actions = {
		PreserveTrigger();
		SetDeaths(P7, Add, 1, "Young Chrysalis");
	},
}

teamcre1 = {}; -- 팀플존 추가 유닛 생성 / 유닛 생성
                       -- 유닛수, 유닛, 로케번호
table.insert(teamcre1, { "탱크 (5)", 0x664094, {8, 156} });
table.insert(teamcre1, { "탱크 (5)", 0x664094, {12, 156} });
table.insert(teamcre1, { "탱크 (5)", 0x664094, {16, 156} });
table.insert(teamcre1, { "히드라리스크", 0x664118, {24, 156} });
table.insert(teamcre1, { "히드라리스크", 0x664118, {36, 156} });
table.insert(teamcre1, { "히드라리스크", 0x664118, {48, 156} });
table.insert(teamcre1, { "배틀크루저", 0x6640B0, {4, 156}, {4, 157} });
table.insert(teamcre1, { "배틀크루저", 0x6640B0, {4, 156}, {4, 157}, {4, 158} });
table.insert(teamcre1, { "배틀크루저", 0x6640B0, {4, 156}, {4, 157}, {4, 158}, {4, 66} });
table.insert(teamcre1, { "레이스", 0x6640A0, {24, 156} });
table.insert(teamcre1, { "레이스", 0x6640A0, {36, 156} });
table.insert(teamcre1, { "레이스", 0x6640A0, {36, 156}, {12, 157} });
table.insert(teamcre1, { "가디언", 0x664130, {14, 156}, {2, 157} });
table.insert(teamcre1, { "가디언", 0x664130, {14, 156}, {10, 157} });
table.insert(teamcre1, { "가디언", 0x664130, {14, 156}, {14, 157}, {4, 157} });

table.insert(teamcre1, { "질럿", 0x664184, {24, 156} }); -- 6번째
table.insert(teamcre1, { "질럿", 0x664184, {24, 156}, {12, 157} });
table.insert(teamcre1, { "질럿", 0x664184, {24, 156}, {24, 157} });
table.insert(teamcre1, { "커세어 [ 지상 공격 가능 ]", 0x664170, {16, 156} });
table.insert(teamcre1, { "커세어 [ 지상 공격 가능 ]", 0x664170, {20, 156}, {4, 157} });
table.insert(teamcre1, { "커세어 [ 지상 공격 가능 ]", 0x664170, {20, 156}, {12, 157} });
table.insert(teamcre1, { "디바우러 [ 지상 공격 가능 ]", 0x664178, {20, 156}, {4, 157} });
table.insert(teamcre1, { "디바우러 [ 지상 공격 가능 ]", 0x664178, {20, 156}, {8, 157}, {8, 158} });
table.insert(teamcre1, { "디바우러 [ 지상 공격 가능 ]", 0x664178, {20, 156}, {20, 157}, {8, 158} });
table.insert(teamcre1, { "파이어뱃", 0x664100, {48, 156} });
table.insert(teamcre1, { "파이어뱃", 0x664100, {60, 156}, {12, 157} });
table.insert(teamcre1, { "파이어뱃", 0x664100, {60, 156}, {36, 157} });
table.insert(teamcre1, { "SCV", 0x66409C, {60, 156}, {40, 227}, {40, 228}, {40, 229}, {12, 230} });
table.insert(teamcre1, { "SCV", 0x66409C, {60, 156}, {40, 227}, {40, 228}, {40, 229}, {40, 230}, {40, 231}, {28, 232} });
table.insert(teamcre1, { "SCV", 0x66409C, {64, 156}, {40, 227}, {40, 228}, {40, 229}, {40, 230}, {40, 231}, {40, 232}, {40, 233}, {40, 234} });

table.insert(teamcre1, { "울트라리스크", 0x66411C, {16, 156} }); -- 11번째
table.insert(teamcre1, { "울트라리스크", 0x66411C, {20, 156}, {4, 157} });
table.insert(teamcre1, { "울트라리스크", 0x66411C, {20, 156}, {12, 157} });
table.insert(teamcre1, { "골리앗", 0x66408C, {32, 156} });
table.insert(teamcre1, { "골리앗", 0x66408C, {40, 156}, {8, 157} });
table.insert(teamcre1, { "골리앗", 0x66408C, {40, 156}, {24, 157} });
table.insert(teamcre1, { "리버", 0x6641CC, {10, 156} });
table.insert(teamcre1, { "리버", 0x6641CC, {15, 156} });
table.insert(teamcre1, { "리버", 0x6641CC, {20, 156} });
table.insert(teamcre1, { "아칸", 0x664190, {16, 156} }); 
table.insert(teamcre1, { "아칸", 0x664190, {24, 156} });
table.insert(teamcre1, { "아칸", 0x664190, {24, 156}, {8, 157} });
table.insert(teamcre1, { "다크 템플러", 0x664174, {48, 156} });
table.insert(teamcre1, { "다크 템플러", 0x664174, {50, 156}, {22, 157} });
table.insert(teamcre1, { "다크 템플러", 0x664174, {50, 156}, {46, 157} }); 

table.insert(teamcre1, { "뮤탈리스크", 0x66412C, {11, 237}, {11, 238}, {11, 239}, {11, 240}, {4, 227} }); -- 16번째
table.insert(teamcre1, { "뮤탈리스크", 0x66412C, {11, 237}, {11, 238}, {10, 239}, {10, 240}, {10, 227}, {10, 228}, {10, 229} });
table.insert(teamcre1, { "뮤탈리스크", 0x66412C, {11, 237}, {11, 238}, {11, 239}, {11, 240}, {11, 227}, {11, 228}, {10, 229}, {10, 230}, {10, 231} });
table.insert(teamcre1, { "저글링", 0x664114, {30, 237}, {30, 238}, {30, 239}, {30, 240}, {30, 227}, {30, 228}, {30, 229}, {30, 230} });
table.insert(teamcre1, { "저글링", 0x664114, {30, 237}, {30, 238}, {30, 239}, {30, 240}, {30, 227}, {30, 228}, {30, 229}, {30, 230}, {30, 231}, {30, 232}, {30, 233}, {30, 234} });
table.insert(teamcre1, { "저글링", 0x664114, {30, 237}, {30, 238}, {30, 239}, {30, 240}, {30, 227}, {30, 228}, {30, 229}, {30, 230}, {30, 231}, {30, 232}, {30, 233}, {30, 234}, {60, 66}, {60, 67} });
table.insert(teamcre1, { "스카웃", 0x664198, {15, 237}, {15, 238}, {2, 239} });
table.insert(teamcre1, { "스카웃", 0x664198, {15, 237}, {15, 238}, {15, 239}, {3, 240} });
table.insert(teamcre1, { "스카웃", 0x664198, {15, 237}, {15, 238}, {15, 239}, {15, 240}, {4, 227} });
table.insert(teamcre1, { "인페스티드 케리건", 0x66414C, {16, 237} });
table.insert(teamcre1, { "인페스티드 케리건", 0x66414C, {24, 237} });
table.insert(teamcre1, { "인페스티드 케리건", 0x66414C, {24, 237}, {8, 238} });
table.insert(teamcre1, { "벌처", 0x664088, {20, 237}, {20, 238}, {20, 239}, {20, 240} });
table.insert(teamcre1, { "벌처", 0x664088, {20, 237}, {20, 238}, {20, 239}, {20, 240}, {20, 227}, {20, 228} });
table.insert(teamcre1, { "벌처", 0x664088, {20, 237}, {20, 238}, {20, 239}, {20, 240}, {20, 227}, {20, 228}, {20, 229}, {20, 230} });

table.insert(teamcre1, { "마린", 0x664080, {25, 237}, {25, 238}, {25, 239}, {25, 240}, {25, 227}, {25, 228}, {25, 229}, {5, 230} }); -- 21번째
table.insert(teamcre1, { "마린", 0x664080, {25, 237}, {25, 238}, {25, 239}, {25, 240}, {25, 227}, {25, 228}, {25, 229}, {25, 230}, {25, 231}, {25, 232}, {20, 233} });
table.insert(teamcre1, { "마린", 0x664080, {25, 237}, {25, 238}, {25, 239}, {25, 240}, {25, 227}, {25, 228}, {25, 229}, {25, 230}, {25, 231}, {25, 232}, {25, 233}, {25, 234}, {50, 66}, {10, 67} });
table.insert(teamcre1, { "고스트", 0x664084, {25, 237}, {25, 238}, {22, 239} });
table.insert(teamcre1, { "고스트", 0x664084, {25, 237}, {25, 238}, {25, 239}, {25, 240}, {8, 227} });
table.insert(teamcre1, { "고스트", 0x664084, {25, 237}, {25, 238}, {25, 239}, {25, 240}, {25, 227}, {19, 228} });
table.insert(teamcre1, { "캐리어", 0x6641A0, {4, 237}, {4, 238}, {4, 239}, {4, 240}, {4, 227}, {4, 228} });
table.insert(teamcre1, { "캐리어", 0x6641A0, {4, 237}, {4, 238}, {4, 239}, {4, 240}, {4, 227}, {4, 228}, {4, 229}, {4, 230}, {4, 231} });
table.insert(teamcre1, { "캐리어", 0x6641A0, {4, 237}, {4, 238}, {4, 239}, {4, 240}, {4, 227}, {4, 228}, {4, 229}, {4, 230}, {4, 231}, {4, 232}, {4, 233}, {4, 234} });
table.insert(teamcre1, { "드라군", 0x664188, {10, 237}, {10, 238}, {10, 239}, {10, 240}, {10, 227}, {10, 228}, {4, 229} });
table.insert(teamcre1, { "드라군", 0x664188, {10, 237}, {10, 238}, {10, 239}, {10, 240}, {10, 227}, {10, 228}, {10, 229}, {10, 230}, {10, 231}, {6, 232} });
table.insert(teamcre1, { "드라군", 0x664188, {10, 237}, {10, 238}, {10, 239}, {10, 240}, {10, 227}, {10, 228}, {10, 229}, {10, 230}, {10, 231}, {10, 232}, {10, 233}, {10, 234}, {8, 66} });
table.insert(teamcre1, { "발키리 [ 지상 공격 가능 ]", 0x664168, {10, 237}, {10, 238}, {10, 239} });
table.insert(teamcre1, { "발키리 [ 지상 공격 가능 ]", 0x664168, {11, 237}, {11, 238}, {11, 239}, {11, 240}, {1, 227} });
table.insert(teamcre1, { "발키리 [ 지상 공격 가능 ]", 0x664168, {10, 237}, {10, 238}, {10, 239}, {10, 240}, {10, 227}, {10, 228} });

table.insert(teamcre1, { "영웅 리버", 0x6641C4, {10, 237}, {8, 238} });  --26번째
table.insert(teamcre1, { "영웅 리버", 0x6641C4, {10, 237}, {10, 238}, {4, 239} });
table.insert(teamcre1, { "영웅 리버", 0x6641C4, {10, 237}, {10, 238}, {5, 239}, {5, 240} });
table.insert(teamcre1, { "영웅 하이 템플러", 0x6641BC, {10, 237}, {8, 238} });
table.insert(teamcre1, { "영웅 하이 템플러", 0x6641BC, {10, 237}, {10, 238}, {4, 239} });
table.insert(teamcre1, { "영웅 하이 템플러", 0x6641BC, {10, 237}, {10, 238}, {5, 239}, {5, 240} });
table.insert(teamcre1, { "영웅 배틀크루저", 0x6640F0, {4, 237}, {4, 238}, {4, 239}, {4, 240}, {2, 227} });
table.insert(teamcre1, { "영웅 배틀크루저", 0x6640F0, {4, 237}, {4, 238}, {4, 239}, {4, 240}, {4, 227}, {4, 228} });
table.insert(teamcre1, { "영웅 배틀크루저", 0x6640F0, {4, 237}, {4, 238}, {4, 239}, {4, 240}, {4, 227}, {4, 228}, {4, 229}, {2, 230} });
table.insert(teamcre1, { "영웅 퀸", 0x66415C, {10, 237}, {8, 238} });
table.insert(teamcre1, { "영웅 퀸", 0x66415C, {10, 237}, {10, 238}, {4, 239} });
table.insert(teamcre1, { "영웅 퀸", 0x66415C, {10, 237}, {10, 238}, {5, 239}, {5, 240} });
table.insert(teamcre1, { "영웅 다크 아칸", 0x66420C, {10, 237}, {4, 238} });
table.insert(teamcre1, { "영웅 다크 아칸", 0x66420C, {10, 237}, {10, 238}, {1, 239} });
table.insert(teamcre1, { "영웅 다크 아칸", 0x66420C, {10, 237}, {10, 238}, {4, 239}, {4, 240} });

for i=1,#teamcre1 do -- 팀플존 추가 유닛 생성
action_tcre1 = {};
for j=1,#teamcre1[i]-2 do
table.insert(action_tcre1, CreateUnit(teamcre1[i][j+2][1], teamcre1[i][1], "Location 65", P8));
table.insert(action_tcre1, MoveUnit(teamcre1[i][j+2][1], teamcre1[i][1], P8, "Location 65", "Location "..teamcre1[i][j+2][2]));
end

Trigger { --
	players = {P7},
	conditions = {
		Deaths(P7, Exactly, roundmodech[1][i], "Mineral Chunk (Type 1)"); -- 라운드 인식
		Deaths(P7, Exactly, roundmodech[2][i], "Vespene Sac (Zerg Type 2)"); -- 난이도 인식
		Deaths(P7, Exactly, 1100, "Young Chrysalis");
		CountdownTimer(AtMost, 0);
	},
	actions = {
		PreserveTrigger();
		SetDeaths(P7, SetTo, 1101, "Young Chrysalis");
		
		SetMemory(teamcre1[i][2], Subtract, 8192);
		action_tcre1;
		SetMemory(teamcre1[i][2], Add, 8192);
	},
}
end

Trigger { -- 팀플존 추가 유닛 체력, 마나, 무적, 고정 등 설정
	players = {P7},
	conditions = {
		Bring(P8, AtLeast, 1, "Men", "Location 159");
	},
	actions = {
		PreserveTrigger();
		
		Order("Men", P8, "Location 237", Move, "Location 237");
		Order("Men", P8, "Location 238", Move, "Location 238");
		Order("Men", P8, "Location 239", Move, "Location 239");
		Order("Men", P8, "Location 240", Move, "Location 240");
		
		Order("Men", P8, "Location 227", Move, "Location 227");
		Order("Men", P8, "Location 228", Move, "Location 228");
		Order("Men", P8, "Location 229", Move, "Location 229");
		Order("Men", P8, "Location 230", Move, "Location 230");
		
		Order("Men", P8, "Location 231", Move, "Location 231");
		Order("Men", P8, "Location 232", Move, "Location 232");
		Order("Men", P8, "Location 233", Move, "Location 233");
		Order("Men", P8, "Location 234", Move, "Location 234");
		
		SetInvincibility(Enable, "Men", P8, "Location 159", 100);
		ModifyUnitEnergy(All, "Men", P8, "Location 159", 100);
		ModifyUnitHitPoints(All, "Men", P8, "Location 159", 100);
		ModifyUnitShields(All, "Men", P8, "Location 159", 100);
	},
}

teammove2 = {}; -- 팀플존 추가 유닛이 팀플존으로 이동
                      -- 일자로케, 유닛, 무브셋메모리용도, 줄드론수, 유닛수	
table.insert(teammove2, { 153, "탱크 (5)", 0x664094, {3, 4}, {2, 4} });
table.insert(teammove2, { 153, "탱크 (5)", 0x664094, {2, 4}, {2, 4}, {2, 4} });
table.insert(teammove2, { 153, "탱크 (5)", 0x664094, {2, 5}, {2, 6}, {2, 5} });
table.insert(teammove2, { 152, "히드라리스크", 0x664118, {3, 12}, {2, 12} });
table.insert(teammove2, { 152, "히드라리스크", 0x664118, {2, 12}, {2, 12}, {2, 12} });
table.insert(teammove2, { 152, "히드라리스크", 0x664118, {2, 16}, {2, 16}, {2, 16} });
table.insert(teammove2, { 149, "배틀크루저", 0x6640B0, {1, 2}, {2, 2}, {2, 2}, {2, 2} });
table.insert(teammove2, { 149, "배틀크루저", 0x6640B0, {1, 3}, {2, 3}, {2, 3}, {2, 3} });
table.insert(teammove2, { 149, "배틀크루저", 0x6640B0, {1, 4}, {2, 4}, {2, 4}, {2, 4} });
table.insert(teammove2, { 151, "레이스", 0x6640A0, {2, 8}, {2, 8}, {2, 8} });
table.insert(teammove2, { 151, "레이스", 0x6640A0, {2, 12}, {2, 12}, {2, 12} });
table.insert(teammove2, { 151, "레이스", 0x6640A0, {1, 12}, {2, 12}, {2, 12}, {2, 12} });
table.insert(teammove2, { 154, "가디언", 0x664130, {1, 4}, {2, 4}, {2, 4}, {2, 4} });
table.insert(teammove2, { 154, "가디언", 0x664130, {1, 6}, {2, 6}, {2, 6}, {2, 6} });
table.insert(teammove2, { 154, "가디언", 0x664130, {1, 8}, {2, 8}, {2, 8}, {2, 8} });

table.insert(teammove2, { 151, "질럿", 0x664184, {3, 12}, {2, 12} }); -- 6번째
table.insert(teammove2, { 151, "질럿", 0x664184, {2, 12}, {2, 12}, {2, 12} });
table.insert(teammove2, { 151, "질럿", 0x664184, {2, 16}, {2, 16}, {2, 16} });
table.insert(teammove2, { 154, "커세어 [ 지상 공격 가능 ]", 0x664170, {1, 4}, {2, 4}, {2, 4}, {2, 4} });
table.insert(teammove2, { 154, "커세어 [ 지상 공격 가능 ]", 0x664170, {1, 6}, {2, 6}, {2, 6}, {2, 6} });
table.insert(teammove2, { 154, "커세어 [ 지상 공격 가능 ]", 0x664170, {1, 8}, {2, 8}, {2, 8}, {2, 8} });
table.insert(teammove2, { 153, "디바우러 [ 지상 공격 가능 ]", 0x664178, {2, 8}, {2, 8}, {2, 8} });
table.insert(teammove2, { 153, "디바우러 [ 지상 공격 가능 ]", 0x664178, {2, 12}, {2, 12}, {2, 12} });
table.insert(teammove2, { 153, "디바우러 [ 지상 공격 가능 ]", 0x664178, {1, 12}, {2, 12}, {2, 12}, {2, 12} });
table.insert(teammove2, { 150, "파이어뱃", 0x664100, {1, 12}, {2, 12}, {2, 12}, {2, 12} });
table.insert(teammove2, { 150, "파이어뱃", 0x664100, {1, 18}, {2, 18}, {2, 18}, {2, 18} });
table.insert(teammove2, { 150, "파이어뱃", 0x664100, {1, 13}, {1, 14}, {1, 14}, {1, 14}, {1, 14}, {1, 14}, {1, 13} });
table.insert(teammove2, { 149, "SCV", 0x66409C, {1, 36}, {2, 36}, {2, 36}, {2, 36} }); -- SCV 추가 배정 참고
table.insert(teammove2, { 149, "SCV", 0x66409C, {1, 36}, {2, 36}, {2, 36}, {2, 36} });
table.insert(teammove2, { 149, "SCV", 0x66409C, {1, 36}, {2, 36}, {2, 36}, {2, 36} }); 

table.insert(teammove2, { 150, "울트라리스크", 0x66411C, {1, 4}, {2, 4}, {2, 4}, {2, 4} }); -- 11번째
table.insert(teammove2, { 150, "울트라리스크", 0x66411C, {1, 6}, {2, 6}, {2, 6}, {2, 6} });
table.insert(teammove2, { 150, "울트라리스크", 0x66411C, {1, 8}, {2, 8}, {2, 8}, {2, 8} });
table.insert(teammove2, { 153, "골리앗", 0x66408C, {1, 8}, {2, 8}, {2, 8}, {2, 8} });
table.insert(teammove2, { 153, "골리앗", 0x66408C, {1, 12}, {2, 12}, {2, 12}, {2, 12} });
table.insert(teammove2, { 153, "골리앗", 0x66408C, {1, 16}, {2, 16}, {2, 16}, {2, 16} });
table.insert(teammove2, { 152, "리버", 0x6641CC, {1, 3}, {2, 2}, {2, 2}, {2, 3} });
table.insert(teammove2, { 152, "리버", 0x6641CC, {1, 5}, {3, 5}, {3, 5} });
table.insert(teammove2, { 152, "리버", 0x6641CC, {1, 5}, {2, 5}, {2, 5}, {2, 5} });
table.insert(teammove2, { 152, "아칸", 0x664190, {1, 4}, {2, 4}, {2, 4}, {2, 4} });
table.insert(teammove2, { 152, "아칸", 0x664190, {1, 6}, {2, 6}, {2, 6}, {2, 6} });
table.insert(teammove2, { 152, "아칸", 0x664190, {1, 8}, {2, 8}, {2, 8}, {2, 8} });
table.insert(teammove2, { 149, "다크 템플러", 0x664174, {1, 12}, {2, 12}, {2, 12}, {2, 12} });
table.insert(teammove2, { 149, "다크 템플러", 0x664174, {1, 18}, {2, 18}, {2, 18}, {2, 18} });
table.insert(teammove2, { 149, "다크 템플러", 0x664174, {1, 24}, {2, 24}, {2, 24}, {2, 24} });

table.insert(teammove2, { 153, "뮤탈리스크", 0x66412C, {1, 8}, {1, 8}, {1, 8}, {2, 8}, {1, 8}, {1, 8} }); -- 16번째
table.insert(teammove2, { 153, "뮤탈리스크", 0x66412C, {1, 12}, {1, 12}, {1, 12}, {2, 12}, {1, 12}, {1, 12} });
table.insert(teammove2, { 153, "뮤탈리스크", 0x66412C, {1, 16}, {1, 16}, {1, 16}, {2, 16}, {1, 16}, {1, 16} });
table.insert(teammove2, { 149, "저글링", 0x664114, {1, 40}, {1, 40}, {1, 40}, {2, 40}, {1, 40}, {1, 40} });
table.insert(teammove2, { 149, "저글링", 0x664114, {1, 60}, {1, 60}, {1, 60}, {2, 60}, {1, 60}, {1, 60} });
table.insert(teammove2, { 149, "저글링", 0x664114, {1, 80}, {1, 80}, {1, 80}, {2, 80}, {1, 80}, {1, 80} });
table.insert(teammove2, { 153, "스카웃", 0x664198, {1, 5}, {1, 5}, {1, 6}, {2, 6}, {1, 5}, {1, 5} });
table.insert(teammove2, { 153, "스카웃", 0x664198, {1, 8}, {1, 8}, {1, 8}, {2, 8}, {1, 8}, {1, 8} });
table.insert(teammove2, { 153, "스카웃", 0x664198, {1, 10}, {1, 11}, {1, 11}, {2, 11}, {1, 11}, {1, 10} });
table.insert(teammove2, { 152, "인페스티드 케리건", 0x66414C, {1, 2}, {1, 3}, {1, 3}, {2, 3}, {1, 3}, {1, 2} });
table.insert(teammove2, { 152, "인페스티드 케리건", 0x66414C, {1, 4}, {1, 4}, {1, 4}, {2, 4}, {1, 4}, {1, 4} });
table.insert(teammove2, { 152, "인페스티드 케리건", 0x66414C, {1, 5}, {1, 5}, {1, 6}, {2, 6}, {1, 5}, {1, 5} });
table.insert(teammove2, { 152, "벌처", 0x664088, {1, 13}, {1, 13}, {1, 14}, {2, 14}, {1, 13}, {1, 13} });
table.insert(teammove2, { 152, "벌처", 0x664088, {1, 20}, {1, 20}, {1, 20}, {2, 20}, {1, 20}, {1, 20} });
table.insert(teammove2, { 152, "벌처", 0x664088, {1, 26}, {1, 27}, {1, 27}, {2, 27}, {1, 27}, {1, 26} });

table.insert(teammove2, { 152, "마린", 0x664080, {1, 30}, {1, 30}, {1, 30}, {2, 30}, {1, 30}, {1, 30} }); -- 21번째
table.insert(teammove2, { 152, "마린", 0x664080, {1, 45}, {1, 45}, {1, 45}, {2, 45}, {1, 45}, {1, 45} }); 
table.insert(teammove2, { 152, "마린", 0x664080, {1, 60}, {1, 60}, {1, 60}, {2, 60}, {1, 60}, {1, 60} });
table.insert(teammove2, { 151, "고스트", 0x664084, {1, 12}, {1, 12}, {1, 12}, {2, 12}, {1, 12}, {1, 12} });
table.insert(teammove2, { 151, "고스트", 0x664084, {1, 18}, {1, 18}, {1, 18}, {2, 18}, {1, 18}, {1, 18} });
table.insert(teammove2, { 151, "고스트", 0x664084, {1, 24}, {1, 24}, {1, 24}, {2, 24}, {1, 24}, {1, 24} });
table.insert(teammove2, { 152, "캐리어", 0x6641A0, {1, 4}, {1, 4}, {1, 4}, {2, 4}, {1, 4}, {1, 4} });
table.insert(teammove2, { 152, "캐리어", 0x6641A0, {1, 6}, {1, 6}, {1, 6}, {2, 6}, {1, 6}, {1, 6} });
table.insert(teammove2, { 152, "캐리어", 0x6641A0, {1, 8}, {1, 8}, {1, 8}, {2, 8}, {1, 8}, {1, 8} });
table.insert(teammove2, { 153, "드라군", 0x664188, {1, 10}, {1, 11}, {1, 11}, {2, 11}, {1, 11}, {1, 10} });
table.insert(teammove2, { 153, "드라군", 0x664188, {1, 16}, {1, 16}, {1, 16}, {2, 16}, {1, 16}, {1, 16} });
table.insert(teammove2, { 153, "드라군", 0x664188, {1, 21}, {1, 21}, {1, 22}, {2, 22}, {1, 21}, {1, 21} });
table.insert(teammove2, { 153, "발키리 [ 지상 공격 가능 ]", 0x664168, {1, 5}, {1, 5}, {1, 5}, {2, 5}, {1, 5}, {1, 5} });
table.insert(teammove2, { 153, "발키리 [ 지상 공격 가능 ]", 0x664168, {1, 7}, {1, 8}, {1, 8}, {2, 8}, {1, 7}, {1, 7} });
table.insert(teammove2, { 153, "발키리 [ 지상 공격 가능 ]", 0x664168, {1, 10}, {1, 10}, {1, 10}, {2, 10}, {1, 10}, {1, 10} });

table.insert(teammove2, { 153, "영웅 리버", 0x6641C4, {1, 3}, {1, 3}, {1, 3}, {2, 3}, {1, 3}, {1, 3} }); -- 26번째
table.insert(teammove2, { 153, "영웅 리버", 0x6641C4, {1, 4}, {1, 4}, {1, 4}, {2, 4}, {1, 4}, {1, 4} });
table.insert(teammove2, { 153, "영웅 리버", 0x6641C4, {1, 5}, {1, 5}, {1, 5}, {2, 5}, {1, 5}, {1, 5} });
table.insert(teammove2, { 149, "영웅 하이 템플러", 0x6641BC, {1, 3}, {1, 3}, {1, 3}, {2, 3}, {1, 3}, {1, 3} });
table.insert(teammove2, { 149, "영웅 하이 템플러", 0x6641BC, {1, 4}, {1, 4}, {1, 4}, {2, 4}, {1, 4}, {1, 4} });
table.insert(teammove2, { 149, "영웅 하이 템플러", 0x6641BC, {1, 5}, {1, 5}, {1, 5}, {2, 5}, {1, 5}, {1, 5} });
table.insert(teammove2, { 149, "영웅 배틀크루저", 0x6640F0, {1, 3}, {1, 3}, {1, 3}, {2, 3}, {1, 3}, {1, 3} });
table.insert(teammove2, { 149, "영웅 배틀크루저", 0x6640F0, {1, 4}, {1, 4}, {1, 4}, {2, 4}, {1, 4}, {1, 4} });
table.insert(teammove2, { 149, "영웅 배틀크루저", 0x6640F0, {1, 5}, {1, 5}, {1, 5}, {2, 5}, {1, 5}, {1, 5} });
table.insert(teammove2, { 154, "영웅 퀸", 0x66415C, {1, 3}, {1, 3}, {1, 3}, {2, 3}, {1, 3}, {1, 3} });
table.insert(teammove2, { 154, "영웅 퀸", 0x66415C, {1, 4}, {1, 4}, {1, 4}, {2, 4}, {1, 4}, {1, 4} });
table.insert(teammove2, { 154, "영웅 퀸", 0x66415C, {1, 5}, {1, 5}, {1, 5}, {2, 5}, {1, 5}, {1, 5} });
table.insert(teammove2, { 152, "영웅 다크 아칸", 0x66420C, {1, 2}, {1, 2}, {1, 3}, {2, 3}, {1, 2}, {1, 2} });
table.insert(teammove2, { 152, "영웅 다크 아칸", 0x66420C, {1, 3}, {1, 4}, {1, 4}, {2, 4}, {1, 3}, {1, 3} });
table.insert(teammove2, { 152, "영웅 다크 아칸", 0x66420C, {1, 4}, {1, 5}, {1, 5}, {2, 5}, {1, 5}, {1, 4} });

for i=1,#teammove2 do -- 팀플존 추가 유닛이 팀플존으로 이동(1~20)
action_tmove2 = {};
for j=1,#teammove2[i]-3 do
table.insert(action_tmove2, GiveUnits(teammove2[i][j+3][1], "Zerg Drone", P9, "Location "..teammove2[i][1], P10));
table.insert(action_tmove2, MoveLocation("Location 148", "Zerg Drone", P9, "Location "..teammove2[i][1]));
table.insert(action_tmove2, MoveUnit(teammove2[i][j+3][2], teammove2[i][2], P8, "Location 159", "Location 148"));
end

Trigger { --
	players = {P7},
	conditions = {
		Deaths(P7, Exactly, roundmodech[1][i], "Mineral Chunk (Type 1)"); -- 라운드 인식
		Deaths(P7, Exactly, roundmodech[2][i], "Vespene Sac (Zerg Type 2)"); -- 난이도 인식
		Deaths(P7, Exactly, 1101, "Young Chrysalis");
		Bring(P8, AtLeast, 1, "Men", "Location 159");
		Bring(P11, Exactly, 0, "Men", "Location 72");
	},
	actions = {
		PreserveTrigger();
		SetMemory(teammove2[i][3], Subtract, 8192);
		action_tmove2;	
		SetMemory(teammove2[i][3], Add, 8192);
		GiveUnits(All, "Zerg Drone", P10, "Location 117", P9); -- 초기화
		SetSwitch("Switch 18", Set); -- 팀플존 최초 공격 보조(2)
		RemoveUnitAt(All, "Men", "Location 72", P7);
	},
}
end

teammove3 = {};

table.insert(teammove3, { 151, "SCV", 0x66409C, {1, 12}, {2, 12}, {2, 12}, {2, 12} }); --10
table.insert(teammove3, { 151, "SCV", 0x66409C, {1, 36}, {2, 36}, {2, 36}, {2, 36} });
table.insert(teammove3, { 151, "SCV", 0x66409C, {1, 36}, {2, 36}, {2, 36}, {2, 36} });
table.insert(teammove2, { 150, "저글링", 0x664114, {1, 40}, {1, 40}, {1, 40}, {2, 40}, {1, 40}, {1, 40} }); --17
table.insert(teammove2, { 150, "저글링", 0x664114, {1, 60}, {1, 60}, {1, 60}, {2, 60}, {1, 60}, {1, 60} });
table.insert(teammove2, { 150, "저글링", 0x664114, {1, 80}, {1, 80}, {1, 80}, {2, 80}, {1, 80}, {1, 80} });
table.insert(teammove2, { 153, "마린", 0x664080, {1, 30}, {1, 30}, {1, 30}, {2, 30}, {1, 30}, {1, 30} }); -- 21번째
table.insert(teammove2, { 153, "마린", 0x664080, {1, 45}, {1, 45}, {1, 45}, {2, 45}, {1, 45}, {1, 45} }); 
table.insert(teammove2, { 153, "마린", 0x664080, {1, 60}, {1, 60}, {1, 60}, {2, 60}, {1, 60}, {1, 60} });
table.insert(teammove2, { 152, "고스트", 0x664084, {1, 12}, {1, 12}, {1, 12}, {2, 12}, {1, 12}, {1, 12} });
table.insert(teammove2, { 152, "고스트", 0x664084, {1, 18}, {1, 18}, {1, 18}, {2, 18}, {1, 18}, {1, 18} });
table.insert(teammove2, { 152, "고스트", 0x664084, {1, 24}, {1, 24}, {1, 24}, {2, 24}, {1, 24}, {1, 24} });
table.insert(teammove2, { 153, "캐리어", 0x6641A0, {1, 4}, {1, 4}, {1, 4}, {2, 4}, {1, 4}, {1, 4} });
table.insert(teammove2, { 153, "캐리어", 0x6641A0, {1, 6}, {1, 6}, {1, 6}, {2, 6}, {1, 6}, {1, 6} });
table.insert(teammove2, { 153, "캐리어", 0x6641A0, {1, 8}, {1, 8}, {1, 8}, {2, 8}, {1, 8}, {1, 8} });
table.insert(teammove2, { 153, "드라군", 0x664188, {1, 10}, {1, 11}, {1, 11}, {2, 11}, {1, 11}, {1, 10} });
table.insert(teammove2, { 153, "드라군", 0x664188, {1, 16}, {1, 16}, {1, 16}, {2, 16}, {1, 16}, {1, 16} });
table.insert(teammove2, { 153, "드라군", 0x664188, {1, 21}, {1, 21}, {1, 22}, {2, 22}, {1, 21}, {1, 21} });
table.insert(teammove2, { 154, "발키리 [ 지상 공격 가능 ]", 0x664168, {1, 6}, {1, 6}, {1, 6}, {2, 6}, {1, 6}, {1, 6} });
table.insert(teammove2, { 154, "발키리 [ 지상 공격 가능 ]", 0x664168, {1, 9}, {1, 9}, {1, 9}, {2, 9}, {1, 9}, {1, 9} });
table.insert(teammove2, { 154, "발키리 [ 지상 공격 가능 ]", 0x664168, {1, 12}, {1, 12}, {1, 12}, {2, 12}, {1, 12}, {1, 12} });

table.insert(teammove2, { 154, "영웅 리버", 0x6641C4, {1, 3}, {1, 3}, {1, 3}, {2, 3}, {1, 3}, {1, 3} }); -- 26번째
table.insert(teammove2, { 154, "영웅 리버", 0x6641C4, {1, 4}, {1, 4}, {1, 4}, {2, 4}, {1, 4}, {1, 4} });
table.insert(teammove2, { 154, "영웅 리버", 0x6641C4, {1, 5}, {1, 5}, {1, 5}, {2, 5}, {1, 5}, {1, 5} });
table.insert(teammove2, { 153, "영웅 다크 아칸", 0x66420C, {1, 2}, {1, 2}, {1, 3}, {2, 3}, {1, 2}, {1, 2} }); -- 30번째
table.insert(teammove2, { 153, "영웅 다크 아칸", 0x66420C, {1, 3}, {1, 4}, {1, 4}, {2, 4}, {1, 3}, {1, 3} });
table.insert(teammove2, { 153, "영웅 다크 아칸", 0x66420C, {1, 4}, {1, 5}, {1, 5}, {2, 5}, {1, 5}, {1, 4} });

teamroundset = {};

table.insert(teamroundset, {10, 10, 10, 17, 17, 17, 21, 21, 21, 22, 22, 22, 23, 23, 23, 24, 24, 24, 25, 25, 25, 26, 26, 26, 30, 30, 30});
table.insert(teamroundset, {1,  2,  3,  1,  2,  3,  1,  2,  3,  1,  2,  3,  1,  2,  3,  1,  2,  3,  1,  2,  3,  1,  2,  3,  1,  2,  3});

for i=1,#teammove3 do -- 팀플존 추가 유닛이 팀플존으로 이동 / 일부 유닛 추가 이동
action_tmove3 = {};
for j=1,#teammove3[i]-3 do
table.insert(action_tmove3, GiveUnits(teammove3[i][j+3][1], "Zerg Drone", P9, "Location "..teammove3[i][1], P10));
table.insert(action_tmove3, MoveLocation("Location 148", "Zerg Drone", P9, "Location "..teammove3[i][1]));
table.insert(action_tmove3, MoveUnit(teammove3[i][j+3][2], teammove3[i][2], P8, "Location 159", "Location 148"));
end

Trigger { --
	players = {P7},
	conditions = {
		Deaths(P7, Exactly, teamroundset[1][i], "Mineral Chunk (Type 1)"); -- 라운드 인식
		Deaths(P7, Exactly, teamroundset[2][i], "Vespene Sac (Zerg Type 2)"); -- 난이도 인식
		Deaths(P7, Exactly, 1101, "Young Chrysalis");
		Bring(P8, AtLeast, 1, "Men", "Location 159");
		Bring(P11, Exactly, 0, "Men", "Location 72");
	},
	actions = {
		PreserveTrigger();
		SetMemory(teammove3[i][3], Subtract, 8192);
		action_tmove3;	
		SetMemory(teammove3[i][3], Add, 8192);
		GiveUnits(All, "Zerg Drone", P10, "Location 117", P9); -- 초기화
		RemoveUnitAt(All, "Men", "Location 72", P7);
	},
}
end

teammoveP = {};

table.insert(teammoveP, { 1, 2, 1, 2, 1, 2 }); -- 10번째 SCV

table.insert(teammoveP, { 1, 2, 1, 2, 1, 2 }); -- 11번째
table.insert(teammoveP, { 5, 6, 5, 6, 5, 6 });
table.insert(teammoveP, { 3, 4, 3, 4, 3, 4 });
table.insert(teammoveP, { 1, 2, 1, 2, 1, 2 });
table.insert(teammoveP, { 1, 2, 1, 2, 1, 2 });
table.insert(teammoveP, { 1, 2, 3, 4, 5, 6 }); -- 16번째
table.insert(teammoveP, { 1, 2, 1, 2, 1, 2 });
table.insert(teammoveP, { 1, 2, 3, 4, 5, 6 });
table.insert(teammoveP, { 1, 2, 3, 4, 1, 2 });
table.insert(teammoveP, { 1, 2, 3, 4, 5, 6 });
table.insert(teammoveP, { 3, 4, 5, 6, 3, 4 }); -- 21번째
table.insert(teammoveP, { 1, 2, 1, 2, 1, 2 });
table.insert(teammoveP, { 5, 6, 5, 6, 5, 6 });
table.insert(teammoveP, { 5, 6, 5, 6, 5, 6 });
table.insert(teammoveP, { 3, 4, 5, 6, 3, 4 });
table.insert(teammoveP, { 5, 6, 5, 6, 5, 6 }); -- 26번째
table.insert(teammoveP, { 1, 2, 1, 2, 1, 2 });
table.insert(teammoveP, { 1, 2, 1, 2, 1, 2 });
table.insert(teammoveP, { 5, 6, 5, 6, 5, 6 });
table.insert(teammoveP, { 3, 4, 3, 4, 3, 4 });

for i=1,16 do -- 팀플존 유닛이 한 번에 이동 안 될시 추가 이동
Trigger { --
	players = {P7},
	conditions = {
		Deaths(P7, Exactly, i+9, "Mineral Chunk (Type 1)"); -- 라운드 인식
		Deaths(P7, Exactly, 1101, "Young Chrysalis");
		Bring(P8, AtLeast, 1, "Men", "Location 159");
		Bring(P11, Exactly, 0, "Men", "Location 72");
	},
	actions = {
		PreserveTrigger();
		
		SetMemory(teammove2[(i+9)*3][3], Subtract, 8192);
			
		MoveUnit(3, "Men", P8, "Location 159", "Location "..240+teammoveP[i][1]);
		MoveUnit(3, "Men", P8, "Location 159", "Location "..240+teammoveP[i][2]);
		MoveUnit(3, "Men", P8, "Location 159", "Location "..240+teammoveP[i][3]);
		MoveUnit(3, "Men", P8, "Location 159", "Location "..240+teammoveP[i][4]);
		MoveUnit(3, "Men", P8, "Location 159", "Location "..240+teammoveP[i][5]);
		MoveUnit(3, "Men", P8, "Location 159", "Location "..240+teammoveP[i][6]);
		MoveUnit(3, "Men", P8, "Location 159", "Location "..240+teammoveP[i][1]);
		MoveUnit(3, "Men", P8, "Location 159", "Location "..240+teammoveP[i][2]);
		MoveUnit(3, "Men", P8, "Location 159", "Location "..240+teammoveP[i][3]);
		MoveUnit(3, "Men", P8, "Location 159", "Location "..240+teammoveP[i][4]);
		MoveUnit(3, "Men", P8, "Location 159", "Location "..240+teammoveP[i][5]);
		MoveUnit(3, "Men", P8, "Location 159", "Location "..240+teammoveP[i][6]);
		MoveUnit(3, "Men", P8, "Location 159", "Location "..240+teammoveP[i][1]);
		MoveUnit(3, "Men", P8, "Location 159", "Location "..240+teammoveP[i][2]);
		MoveUnit(3, "Men", P8, "Location 159", "Location "..240+teammoveP[i][3]);
		MoveUnit(3, "Men", P8, "Location 159", "Location "..240+teammoveP[i][4]);
		MoveUnit(3, "Men", P8, "Location 159", "Location "..240+teammoveP[i][5]);
		MoveUnit(3, "Men", P8, "Location 159", "Location "..240+teammoveP[i][6]);
		MoveUnit(3, "Men", P8, "Location 159", "Location "..240+teammoveP[i][1]);
		MoveUnit(3, "Men", P8, "Location 159", "Location "..240+teammoveP[i][2]);
		MoveUnit(3, "Men", P8, "Location 159", "Location "..240+teammoveP[i][3]);
		MoveUnit(3, "Men", P8, "Location 159", "Location "..240+teammoveP[i][4]);
		MoveUnit(3, "Men", P8, "Location 159", "Location "..240+teammoveP[i][5]);
		MoveUnit(3, "Men", P8, "Location 159", "Location "..240+teammoveP[i][6]);
		MoveUnit(3, "Men", P8, "Location 159", "Location "..240+teammoveP[i][1]);
		MoveUnit(3, "Men", P8, "Location 159", "Location "..240+teammoveP[i][2]);
		MoveUnit(3, "Men", P8, "Location 159", "Location "..240+teammoveP[i][3]);
		MoveUnit(3, "Men", P8, "Location 159", "Location "..240+teammoveP[i][4]);
		MoveUnit(3, "Men", P8, "Location 159", "Location "..240+teammoveP[i][5]);
		MoveUnit(3, "Men", P8, "Location 159", "Location "..240+teammoveP[i][6]);
		
		MoveUnit(3, "Men", P8, "Location 159", "Location "..240+teammoveP[i][1]); -- 6번째
		MoveUnit(3, "Men", P8, "Location 159", "Location "..240+teammoveP[i][2]);
		MoveUnit(3, "Men", P8, "Location 159", "Location "..240+teammoveP[i][3]);
		MoveUnit(3, "Men", P8, "Location 159", "Location "..240+teammoveP[i][4]);
		MoveUnit(3, "Men", P8, "Location 159", "Location "..240+teammoveP[i][5]);
		MoveUnit(3, "Men", P8, "Location 159", "Location "..240+teammoveP[i][6]);
		MoveUnit(3, "Men", P8, "Location 159", "Location "..240+teammoveP[i][1]);
		MoveUnit(3, "Men", P8, "Location 159", "Location "..240+teammoveP[i][2]);
		MoveUnit(3, "Men", P8, "Location 159", "Location "..240+teammoveP[i][3]);
		MoveUnit(3, "Men", P8, "Location 159", "Location "..240+teammoveP[i][4]);
		MoveUnit(3, "Men", P8, "Location 159", "Location "..240+teammoveP[i][5]);
		MoveUnit(3, "Men", P8, "Location 159", "Location "..240+teammoveP[i][6]);
		MoveUnit(3, "Men", P8, "Location 159", "Location "..240+teammoveP[i][1]);
		MoveUnit(3, "Men", P8, "Location 159", "Location "..240+teammoveP[i][2]);
		MoveUnit(3, "Men", P8, "Location 159", "Location "..240+teammoveP[i][3]);
		MoveUnit(3, "Men", P8, "Location 159", "Location "..240+teammoveP[i][4]);
		MoveUnit(3, "Men", P8, "Location 159", "Location "..240+teammoveP[i][5]);
		MoveUnit(3, "Men", P8, "Location 159", "Location "..240+teammoveP[i][6]);
		MoveUnit(3, "Men", P8, "Location 159", "Location "..240+teammoveP[i][1]);
		MoveUnit(3, "Men", P8, "Location 159", "Location "..240+teammoveP[i][2]);
		MoveUnit(3, "Men", P8, "Location 159", "Location "..240+teammoveP[i][3]);
		MoveUnit(3, "Men", P8, "Location 159", "Location "..240+teammoveP[i][4]);
		MoveUnit(3, "Men", P8, "Location 159", "Location "..240+teammoveP[i][5]);
		MoveUnit(3, "Men", P8, "Location 159", "Location "..240+teammoveP[i][6]);
		MoveUnit(3, "Men", P8, "Location 159", "Location "..240+teammoveP[i][1]);
		MoveUnit(3, "Men", P8, "Location 159", "Location "..240+teammoveP[i][2]);
		MoveUnit(3, "Men", P8, "Location 159", "Location "..240+teammoveP[i][3]);
		MoveUnit(3, "Men", P8, "Location 159", "Location "..240+teammoveP[i][4]);
		MoveUnit(3, "Men", P8, "Location 159", "Location "..240+teammoveP[i][5]);
		MoveUnit(3, "Men", P8, "Location 159", "Location "..240+teammoveP[i][6]);
			
		SetMemory(teammove2[(i+9)*3][3], Add, 8192);
	},
}
end

Trigger { -- 팀플존 유닛 이동 후 최초 1회 공격
	players = {P7},
	conditions = {
		Switch("Switch 16", Cleared);
		Switch("Switch 17", Set);
		Switch("Switch 18", Set);
		Deaths(P7, Exactly, 1101, "Young Chrysalis");
		Bring(P8, AtLeast, 1, "Men", "Location 166");
	},
	actions = {
		PreserveTrigger();
		SetSwitch("Switch 16", Set);
		SetSwitch("Switch 30", Random);
		SetDeaths(Force1, SetTo, 100, "Independent Command Center"); -- 특정 라운드 소리
		SetDeaths(P7, SetTo, 100, "Left Upper Level Door"); -- 팀플존 이동 후 5번만 0.5초마다 공격 1회 반복
		Order("Men", P8, "Location 166", Patrol, "Location 108");
		Order("영웅 리버", P8, "Location 166", Attack, "Location 108");
		Order("영웅 하이 템플러", P8, "Location 166", Attack, "Location 108");
		Order("영웅 배틀크루저", P8, "Location 166", Attack, "Location 108");
		Order("영웅 퀸", P8, "Location 166", Patrol, "Location 255");
		Order("영웅 다크 아칸", P8, "Location 166", Patrol, "Location 255");
	},
}

Trigger { -- 초반지역 3회 공격
	players = {P7},
	conditions = {
		Deaths(P7, AtMost, 199, "Left Upper Level Door");
		Deaths(P7, AtLeast, 100, "Left Upper Level Door");
		Bring(P8, AtLeast, 1, "Men", "Location 166");
	},
	actions = {
		PreserveTrigger();
		SetDeaths(P7, Add, 1, "Left Upper Level Door");
	},
}

Trigger { -- 
	players = {P7},
	conditions = {
		Deaths(P7, AtLeast, 1, "Left Upper Level Door");
		Bring(P8, Exactly, 0, "Men", "Location 166");
	},
	actions = {
		PreserveTrigger();
		SetDeaths(P7, SetTo, 0, "Left Upper Level Door");
	},
}

for i=1,3 do --
Trigger { -- 
	players = {P7},
	conditions = {
		Deaths(P7, Exactly, 100+(i*24), "Left Upper Level Door");
		Bring(P8, AtLeast, 1, "Men", "Location 166");
	},
	actions = {
		PreserveTrigger();
		Order("Men", P8, "Location 251", Patrol, "Location 108");
		Order("영웅 리버", P8, "Location 166", Attack, "Location 108");
		Order("영웅 하이 템플러", P8, "Location 166", Attack, "Location 108");
		Order("영웅 배틀크루저", P8, "Location 166", Attack, "Location 108");
		Order("영웅 퀸", P8, "Location 166", Patrol, "Location 255");
		Order("영웅 다크 아칸", P8, "Location 166", Patrol, "Location 255");
	},
}
end

Trigger { -- 팀플존 공격 카운트
	players = {P7},
	conditions = {
		Deaths(P7, AtMost, 999, "Start Location");
		Bring(P8, AtLeast, 1, "Men", "Location 166");
	},
	actions = {
		PreserveTrigger();
		SetDeaths(P7, Add, 1, "Start Location");
	},
}

Trigger { -- 
	players = {P7},
	conditions = {
		Deaths(P7, AtLeast, 1, "Start Location");
		Bring(P8, Exactly, 0, "Men", "Location 166");
	},
	actions = {
		PreserveTrigger();
		SetDeaths(P7, SetTo, 0, "Start Location");
	},
}

Trigger { -- 
	players = {P7},
	conditions = {
		Deaths(P7, AtLeast, 144, "Start Location");
		Bring(P8, AtLeast, 1, "Men", "Location 166");
	},
	actions = {
		PreserveTrigger();
		SetDeaths(P7, SetTo, 0, "Start Location");
		Order("Men", P8, "Location 166", Patrol, "Location 108");
		Order("영웅 리버", P8, "Location 166", Attack, "Location 108");
		Order("영웅 하이 템플러", P8, "Location 166", Attack, "Location 108");
		Order("영웅 배틀크루저", P8, "Location 166", Attack, "Location 108");
		Order("영웅 퀸", P8, "Location 166", Patrol, "Location 255");
		Order("영웅 다크 아칸", P8, "Location 166", Patrol, "Location 255");
	},
}

Trigger { -- 팀플 라운드 시작 인식 / 패배 경우
	players = {P7},
	conditions = {
		Deaths(P7, Exactly, 1101, "Young Chrysalis");
		Bring(Force1, Exactly, 0, "Men", "Location 117");
		Bring(Force1, AtLeast, 1, "라이프", "Location 117");
	},
	actions = {
		PreserveTrigger();
		KillUnitAt(1, "라이프", "Location 117", Force1);
	},
}

Trigger { -- 
	players = {P7},
	conditions = {
		Deaths(P7, Exactly, 1101, "Young Chrysalis");
		Bring(Force1, AtLeast, 1, "Men", "Location 98");
		Bring(Force1, Exactly, 0, "라이프", "Location 117");
	},
	actions = {
		PreserveTrigger();
		KillUnitAt(All, "Men", "Location 98", Force1);
	},
}

Trigger { -- 팀플 라운드 패배시 재시작
	players = {P7},
	conditions = {
		Deaths(P7, Exactly, 1101, "Young Chrysalis");
		Deaths(P7, AtMost, 35, "Left Wall Missile Trap");
		Bring(Force1, Exactly, 0, "Men", "Location 117");
		Bring(Force1, Exactly, 0, "라이프", "Location 117");
	},
	actions = {
		PreserveTrigger();
		SetDeaths(P7, Add, 1, "Left Wall Missile Trap");
	},
}

teamde = {};

table.insert(teamde, { "라이프", "Men" });

for i=1,2 do --
Trigger { -- 
	players = {P7},
	conditions = {
		Deaths(P7, AtLeast, 1, "Left Wall Missile Trap");
		Bring(Force1, AtLeast, 1, teamde[1][i], "Location 117");
	},
	actions = {
		PreserveTrigger();
		SetDeaths(P7, SetTo, 0, "Left Wall Missile Trap");
	},
}
end

Trigger { -- 
	players = {P7},
	conditions = {
		Deaths(P7, AtLeast, 36, "Left Wall Missile Trap");
	},
	actions = {
		PreserveTrigger();
		SetDeaths(P7, SetTo, 0, "Left Wall Missile Trap");
		SetDeaths(P7, SetTo, 0, "Young Chrysalis");
		SetDeaths(Force1, SetTo, 1000, "Psi Disrupter"); -- 재시작하는 데스값
		SetDeaths(Force1, SetTo, 1, "Kyadarin Crystal Formation"); -- 싱글존 유닛 알림 메시지
		SetDeaths(Force1, SetTo, 0, "Ruins"); -- 팀플존 유닛 알림 메시지
		
		RemoveUnitAt(All, "Men", "Location 214", Force1); -- 싱글&팀플존 유닛 삭제
		RemoveUnitAt(All, "Men", "Location 214", P7);
		RemoveUnitAt(All, "Men", "Location 214", P8);
		RemoveUnitAt(All, "Men", "Location 214", P11);
		RemoveUnitAt(All, "Choice", "Location 146", Force1); -- 재도전 시민 삭제
		RemoveUnitAt(All, "Men", "Location 205", Force1); -- 대기 유닛 삭제
		RemoveUnitAt(All, "Men", "Location 206", Force1); -- 뽑기 유닛 삭제
		RemoveUnitAt(All, "Men", "Location 159", P8); -- 8피 팀플 대기 유닛 삭제
		RemoveUnitAt(All, "Men", "Location 110", P8); -- 8피 싱글 대기 유닛 삭제
		
		SetSwitch("Switch 19", Set);
	},
}

Trigger { -- 팀플존 자살할 경우 카운트 2초로
	players = {Force1},
	conditions = {
		Deaths(CurrentPlayer, AtMost, 1001, "Jump Gate");
		Deaths(CurrentPlayer, AtLeast, 1000, "Jump Gate");
	},
	actions = {
		PreserveTrigger();
		SetDeaths(CurrentPlayer, Add, 1, "Jump Gate");
	},
}

Trigger { --
	players = {Force1},
	conditions = {
		Deaths(CurrentPlayer, AtLeast, 1002, "Jump Gate");
		Bring(Force1, Exactly, 0, "Men", "Location 117");
		CountdownTimer(AtMost, 20);
		CountdownTimer(AtLeast, 3);
	},
	actions = {
		PreserveTrigger();
		SetDeaths(CurrentPlayer, SetTo, 0, "Jump Gate");
		SetCountdownTimer(SetTo, 2);
	},
}

Trigger { -- 
	players = {Force1},
	conditions = {
		Deaths(CurrentPlayer, AtLeast, 1002, "Jump Gate");
	},
	actions = {
		PreserveTrigger();
		SetDeaths(CurrentPlayer, SetTo, 0, "Jump Gate");
	},
}

Trigger { -- 팀플 라운드 시작 인식 / 승리 경우 + 화면 이동, 라이프 무적, 승리 인식
	players = {P7},
	conditions = {
		Deaths(P7, Exactly, 1101, "Young Chrysalis");
		Deaths(P7, AtMost, 23, "Right Wall Missile Trap");
		Bring(Force1, AtLeast, 1, "라이프", "Location 117");
		Bring(Force1, AtLeast, 1, "Men", "Location 117");
		Bring(P8, Exactly, 0, "Men", "Location 166");
		Bring(P8, Exactly, 0, "Men", "Location 159");
		Bring(P11, Exactly, 0, "Men", "Location 72");
	},
	actions = {
		PreserveTrigger();
		SetDeaths(P7, Add, 1, "Right Wall Missile Trap");
	},
}

teamvi = {};

table.insert(teamvi, { P8, P8, P8, P11 });
table.insert(teamvi, { 166, 159, 72, 72 });

for i=1,4 do --
Trigger { -- 
	players = {P7},
	conditions = {
		Deaths(P7, AtLeast, 1, "Right Wall Missile Trap");
		Bring(teamvi[1][i], AtLeast, 1, "Men", "Location "..teamvi[2][i]);
	},
	actions = {
		PreserveTrigger();
		SetDeaths(P7, SetTo, 0, "Right Wall Missile Trap");
	},
}
end

for i=1,29 do --
Trigger { --
	players = {P7},
	conditions = {
		Deaths(P7, Exactly, i, "Mineral Chunk (Type 1)");
		Deaths(P7, Exactly, 1101, "Young Chrysalis");
		Deaths(P7, AtMost, 29, "Right Wall Missile Trap");
		Deaths(P7, AtLeast, 24, "Right Wall Missile Trap");
	},
	actions = {
		PreserveTrigger();
		SetDeaths(P7, SetTo, 0, "Right Wall Missile Trap");
		SetDeaths(P7, SetTo, i+1, "Mineral Chunk (Type 1)"); -- 라운드 인식
		SetDeaths(P7, SetTo, 0, "Young Chrysalis");
		
		SetDeaths(Force1, SetTo, 0, "Normal Mode"); -- 프로브 억제 초기화
		SetDeaths(Force1, SetTo, 1000, "Hard Mode"); -- 유닛 보존 초기화
		SetDeaths(Force1, SetTo, 1, "Kyadarin Crystal Formation"); -- 싱글존 유닛 알림 메시지
		SetDeaths(Force1, SetTo, 0, "Ruins"); -- 팀플존 유닛 알림 메시지
		
		SetInvincibility(Enable, "라이프", Force1, "Location 117");
		ModifyUnitHitPoints(1, "라이프", Force1, "Location 117", 100);
		
		RemoveUnitAt(All, "Men", "Location 214", Force1); -- 싱글&팀플존 유닛 삭제
		RemoveUnitAt(All, "Men", "Location 214", P7);
		RemoveUnitAt(All, "Men", "Location 214", P8);
		RemoveUnitAt(All, "Men", "Location 214", P11);
		RemoveUnitAt(All, "Choice", "Location 146", Force1); -- 재도전 시민 삭제
		RemoveUnitAt(All, "Men", "Location 205", Force1); -- 대기 유닛 삭제
		RemoveUnitAt(All, "Men", "Location 206", Force1); -- 뽑기 유닛 삭제
		RemoveUnitAt(All, "Men", "Location 159", P8); -- 8피 팀플 대기 유닛 삭제
		RemoveUnitAt(All, "Men", "Location 110", P8); -- 8피 싱글 대기 유닛 삭제
		
		SetSwitch("Switch 19", Clear); -- 재도전 인식해서 타이머 3초 더주는 거 초기화
	},
}
end

Trigger { --
	players = {P7},
	conditions = {
		Deaths(P7, Exactly, 30, "Mineral Chunk (Type 1)");
		Deaths(P7, Exactly, 1101, "Young Chrysalis");
		Deaths(P7, AtMost, 29, "Right Wall Missile Trap");
		Deaths(P7, AtLeast, 24, "Right Wall Missile Trap");
	},
	actions = {
		PreserveTrigger();
		SetDeaths(P7, SetTo, 0, "Right Wall Missile Trap");
		SetDeaths(P7, SetTo, 31, "Mineral Chunk (Type 1)"); -- 라운드 인식
	},
}

Trigger { -- 마지막 라운드 클리어
	players = {P7},
	conditions = {
		Deaths(P7, Exactly, 31, "Mineral Chunk (Type 1)");
		Deaths(P7, AtMost, 99, "Floor Hatch (UNUSED)");
	},
	actions = {
		PreserveTrigger();
		SetDeaths(P7, Add, 1, "Floor Hatch (UNUSED)");
	},
}

Trigger { -- 
	players = {Force1},
	conditions = {
		Deaths(P7, Exactly, 31, "Mineral Chunk (Type 1)");
		Deaths(P7, AtMost, 71, "Floor Hatch (UNUSED)");
		Deaths(P7, AtLeast, 48, "Floor Hatch (UNUSED)");
	},
	actions = {
		PreserveTrigger();
		SetAllianceStatus(Force1, AlliedVictory);
	},
}

Trigger { -- 
	players = {Force1},
	conditions = {
		Deaths(P7, Exactly, 31, "Mineral Chunk (Type 1)");
		Deaths(P7, AtLeast, 48, "Floor Hatch (UNUSED)");
	},
	actions = {
		SetAllianceStatus(Force1, AlliedVictory);
		PlayWAV("staredit\\wav\\win.wav");
		DisplayText("\x13\x07──────────────────\r\n\x13\x1F마지막 라운드를 클리어 했습니다!!\r\n\x13\x03승리했습니다!!\r\n\x13\x07──────────────────\r\n\r\n\r\n\r\n\r\n\r\n", 0);
		Wait(3000);
		SetAllianceStatus(Force1, AlliedVictory);
		Victory();
	},
}