const ZT_S1A3 = UnitGroup(900); // 1
const ZT_S1A4 = UnitGroup(500);
const ZT_S1A5 = UnitGroup(50);

const ZT_M1A3 = UnitGroup(400); // 4
const ZT_M1A4 = UnitGroup(400); 

const ZT_B1A3 = UnitGroup(400); // 6
const ZT_B1A4 = UnitGroup(400);
const ZT_B1A5 = UnitGroup(400);
const ZT_B1A6 = UnitGroup(400); 

const P_S1A3 = UnitGroup(400); // 10
const P_S1A4 = UnitGroup(400);

const P_M1A4 = UnitGroup(400); // 12

const P_B1A3 = UnitGroup(400); // 13
const P_B1A4 = UnitGroup(400);
const P_B1A7 = UnitGroup(100);

const SpiderMine = UnitGroup(500); // 16

function beforeTriggerExec() {
    foreach(unit : EUDLoopNewCUnit()){
        if (MemoryXEPD(unit + 0x4C/4, Exactly, $P8, 0xFF)) { // 스팀 적용
            if (MemoryEPD(unit + 0x64/4, Exactly, $U("Terran Ghost")) || // 유닛1
                MemoryEPD(unit + 0x64/4, Exactly, $U("Terran Marine")) ||
                MemoryEPD(unit + 0x64/4, Exactly, $U("Terran Firebat"))) { 
                
                SetMemoryEPD(unit + 0xDC/4, Add, 0x30000000); // 스테이터스 플래그 (스팀팩 적용) 
            }
            if (MemoryEPD(unit + 0x64/4, Exactly, $U("Terran Medic"))) { // 메딕
                
                SetMemoryEPD(unit + 0xDC/4, Add, 0x10000000);
            }
        }
		switch(unit.unitType){
			case $U("Zerg Mutalisk"): // 저그
            case $U("Infested Terran"):
            case $U("Zerg Broodling"):
            case $U("Zerg Zergling"):
            case $U("Terran Ghost"): // 테란
			case $U("Terran Marine"):
            case $U("Terran SCV"):
				ZT_S1A3.add(unit);
				break;   

            case $U("Terran Firebat"): // 테란
            case $U("Terran Medic"):
				ZT_S1A4.add(unit);
				break;

            case $U("Infested Kerrigan"): // 저그
				ZT_S1A5.add(unit);
				break;

            case $U("Protoss Interceptor"): // 플토
            case $U("Protoss High Templar"):
				P_S1A3.add(unit);
				break; 

            case $U("Protoss Dark Templar"): // 플토
            case $U("Protoss Zealot"):
				P_S1A4.add(unit);
				break;    

            case $U("Zerg Queen"): // 저그
            case $U("Zerg Hydralisk"):
            case $U("Terran Vulture"): // 테란
				ZT_M1A3.add(unit);
				break;

            case $U("Zerg Defiler"): // 저그
            case $U("Zerg Lurker"):
				ZT_M1A4.add(unit);
				break; 
            
            case $U("Protoss Corsair"): // 플토
				P_M1A4.add(unit);
				break; 

            case $U("Terran Wraith"): // 테란
				ZT_B1A3.add(unit);
				break;

            case $U("Terran Science Vessel"): // 테란
            case $U("Terran Goliath"):
            case 5: // 탱크
				ZT_B1A4.add(unit);
				break;  

            case $U("Zerg Devourer"): // 저그
            case $U("Zerg Guardian"):
            case $U("Terran Valkyrie"): // 테란
				ZT_B1A5.add(unit);
				break; 

            case $U("Zerg Ultralisk"): // 저그
            case $U("Terran Battlecruiser"): // 테란
				ZT_B1A6.add(unit);
				break; 

            case $U("Protoss Scout"): // 플토
            case $U("Protoss Archon"):
				P_B1A3.add(unit);
				break;

            case $U("Protoss Reaver"): // 리버 따로
                SetMemoryEPD(unit + 0xDC/4, Add, 0x10000000);
				P_B1A3.add(unit);
				break;

            case $U("Protoss Arbiter"): // 플토
            case $U("Protoss Dark Archon"):
            case $U("Protoss Dragoon"):
				P_B1A4.add(unit);
				break; 

            case $U("Protoss Carrier"): // 플토
				P_B1A7.add(unit);
				break; 
            
            case $U("Vulture Spider Mine"): // 마인
				SpiderMine.add(unit);
				break;
		}
	}

    foreach(unit : ZT_S1A3.cploop){ // ZT_S1A3
		foreach(dead : unit.dying){} // 사망 시 발동
        if (Switch("Switch 27", Set)) { // 아비터 죽어도 15초 정도 유지
            unit.set_cp(0x118/4); // 스테이시스 필드
            if (DeathsX(CurrentPlayer, Exactly, 101*256, 0, 0xFF00)) { // 스테이시스 필드
                
                SetDeathsX(CurrentPlayer, SetTo, 1*256, 0, 0xFF00);
            }
        } 

        unit.set_cp(0x120/4); // 블라인드
        if (DeathsX(CurrentPlayer, AtLeast, 1*16777216, 0, 0xFF000000)) { // 블라인드 인식

            SetDeathsX(CurrentPlayer, SetTo, 0, 0, 0xFF000000);
            unit.set_cp(0x124/4); // 애시드 스포어(1)
            SetDeathsX(CurrentPlayer, SetTo, 9*65536 + 150*16777216, 0, 0xFFFF0000);
            unit.set_cp(0x128/4); // 애시드 스포어(2)
            SetDeaths(CurrentPlayer, SetTo, 150*1 + 150*256 + 150*65536 + 150*16777216, 0);
            unit.set_cp(0x12C/4); // 애시드 스포어(3)
            SetDeaths(CurrentPlayer, SetTo, 150*1 + 150*256 + 150*65536 + 150*16777216, 0);
            unit.set_cp(0x114/4); // 인스네어
            SetDeathsX(CurrentPlayer, Add, 1*65536, 0, 0xFF0000);
        }

        if (Switch("Switch 28", Set)) { // 디바우러 죽어도 5초 정도 유지
            unit.set_cp(0x120/4); // 패러사이트
            if (DeathsX(CurrentPlayer, AtLeast, 1*256, 0, 0xFF00)) { // 패러사이트 인식
                unit.set_cp(0x124/4); // 애시드 스포어(1-1)
                if (DeathsX(CurrentPlayer, Exactly, 0, 0, 0xFF0000)) {               
                
                    SetDeathsX(CurrentPlayer, SetTo, 4*65536 + 150*16777216, 0, 0xFFFF0000);
                    unit.set_cp(0x128/4); // 애시드 스포어(2)
                    SetDeaths(CurrentPlayer, SetTo, 150*1 + 150*256, 0);
                    unit.set_cp(0x08/4); // 체력
                    SetDeaths(CurrentPlayer, Subtract, 3584, 0);        
                }
                unit.set_cp(0x124/4); // 애시드 스포어(1-2)
                if (DeathsX(CurrentPlayer, Exactly, 3*65536, 0, 0xFF0000)) {               
                
                    SetDeathsX(CurrentPlayer, SetTo, 7*65536 + 150*16777216, 0, 0xFFFF0000);
                    unit.set_cp(0x128/4); // 애시드 스포어(2)
                    SetDeaths(CurrentPlayer, SetTo, 150*1 + 150*256 + 150*65536 + 150*16777216, 0);
                    unit.set_cp(0x12C/4); // 애시드 스포어(3)
                    SetDeaths(CurrentPlayer, SetTo, 150, 0);
                    unit.set_cp(0x08/4); // 체력
                    SetDeaths(CurrentPlayer, Subtract, 3968, 0);   
                } 
                unit.set_cp(0x124/4); // 애시드 스포어(1-3)
                if (DeathsX(CurrentPlayer, Exactly, 6*65536, 0, 0xFF0000)) {               
                
                    SetDeathsX(CurrentPlayer, SetTo, 10*65536 + 150*16777216, 0, 0xFFFF0000);
                    unit.set_cp(0x128/4); // 애시드 스포어(2)
                    SetDeaths(CurrentPlayer, SetTo, 150*1 + 150*256 + 150*65536 + 150*16777216, 0);
                    unit.set_cp(0x12C/4); // 애시드 스포어(3)
                    SetDeaths(CurrentPlayer, SetTo, 150*1 + 150*256 + 150*65536 + 150*16777216, 0);
                    unit.set_cp(0x08/4); // 체력
                    SetDeaths(CurrentPlayer, Subtract, 4352, 0);   
                }   
                unit.set_cp(0x124/4); // 애시드 스포어(1-4)
                if (DeathsX(CurrentPlayer, Exactly, 9*65536, 0, 0xFF0000)) {               
                
                    SetDeathsX(CurrentPlayer, SetTo, 10*65536 + 150*16777216, 0, 0xFFFF0000);
                    unit.set_cp(0x128/4); // 애시드 스포어(2)
                    SetDeaths(CurrentPlayer, SetTo, 150*1 + 150*256 + 150*65536 + 150*16777216, 0);
                    unit.set_cp(0x12C/4); // 애시드 스포어(3)
                    SetDeaths(CurrentPlayer, SetTo, 150*1 + 150*256 + 150*65536 + 150*16777216, 0);
                    unit.set_cp(0x08/4); // 체력
                    SetDeaths(CurrentPlayer, Subtract, 4736, 0);
                }         
                unit.set_cp(0x120/4); // 패러사이트
                SetDeathsX(CurrentPlayer, SetTo, 0, 0, 0xFF00);    
                unit.set_cp(0x124/4); // 애시드 스포어
                SetDeathsX(CurrentPlayer, Subtract, 1*65536, 0, 0xFF0000);
            }
            unit.set_cp(0x124/4); // 애시드 스포어
            if (DeathsX(CurrentPlayer, AtLeast, 1*65536, 0, 0xFF0000)) {
                unit.set_cp(0x08/4); // 체력
                if (Deaths(CurrentPlayer, AtMost, 0, 0)) {
                
                    unit.set_cp(0x4C/4); // 명령
                    SetDeathsX(CurrentPlayer, SetTo, 0, 0, 0xFF00);
                }
            }
        }
    }
    foreach(unit : ZT_S1A4.cploop){ // ZT_S1A4
		foreach(dead : unit.dying){} // 사망 시 발동
        if (Switch("Switch 27", Set)) { // 아비터 죽어도 15초 정도 유지
            unit.set_cp(0x118/4); // 스테이시스 필드
            if (DeathsX(CurrentPlayer, Exactly, 101*256, 0, 0xFF00)) { // 스테이시스 필드
                
                SetDeathsX(CurrentPlayer, SetTo, 1*256, 0, 0xFF00);
            }
        }
        
        unit.set_cp(0x120/4); // 블라인드
        if (DeathsX(CurrentPlayer, AtLeast, 1*16777216, 0, 0xFF000000)) { // 블라인드 인식

            SetDeathsX(CurrentPlayer, SetTo, 0, 0, 0xFF000000);
            unit.set_cp(0x124/4); // 애시드 스포어(1)
            SetDeathsX(CurrentPlayer, SetTo, 9*65536 + 150*16777216, 0, 0xFFFF0000);
            unit.set_cp(0x128/4); // 애시드 스포어(2)
            SetDeaths(CurrentPlayer, SetTo, 150*1 + 150*256 + 150*65536 + 150*16777216, 0);
            unit.set_cp(0x12C/4); // 애시드 스포어(3)
            SetDeaths(CurrentPlayer, SetTo, 150*1 + 150*256 + 150*65536 + 150*16777216, 0);
            unit.set_cp(0x114/4); // 인스네어
            SetDeathsX(CurrentPlayer, Add, 1*65536, 0, 0xFF0000);
        }

        if (Switch("Switch 28", Set)) { // 디바우러 죽어도 5초 정도 유지
            unit.set_cp(0x120/4); // 패러사이트
            if (DeathsX(CurrentPlayer, AtLeast, 1*256, 0, 0xFF00)) { // 패러사이트 인식
                unit.set_cp(0x124/4); // 애시드 스포어(1-1)
                if (DeathsX(CurrentPlayer, Exactly, 0, 0, 0xFF0000)) {               
                
                    SetDeathsX(CurrentPlayer, SetTo, 4*65536 + 150*16777216, 0, 0xFFFF0000);
                    unit.set_cp(0x128/4); // 애시드 스포어(2)
                    SetDeaths(CurrentPlayer, SetTo, 150*1 + 150*256, 0);
                    unit.set_cp(0x08/4); // 체력
                    SetDeaths(CurrentPlayer, Subtract, 3456, 0);        
                    }
                unit.set_cp(0x124/4); // 애시드 스포어(1-2)
                if (DeathsX(CurrentPlayer, Exactly, 3*65536, 0, 0xFF0000)) {               
                
                    SetDeathsX(CurrentPlayer, SetTo, 7*65536 + 150*16777216, 0, 0xFFFF0000);
                    unit.set_cp(0x128/4); // 애시드 스포어(2)
                    SetDeaths(CurrentPlayer, SetTo, 150*1 + 150*256 + 150*65536 + 150*16777216, 0);
                    unit.set_cp(0x12C/4); // 애시드 스포어(3)
                    SetDeaths(CurrentPlayer, SetTo, 150, 0);
                    unit.set_cp(0x08/4); // 체력
                    SetDeaths(CurrentPlayer, Subtract, 3840, 0);   
                } 
                unit.set_cp(0x124/4); // 애시드 스포어(1-3)
                if (DeathsX(CurrentPlayer, Exactly, 6*65536, 0, 0xFF0000)) {               
                    
                    SetDeathsX(CurrentPlayer, SetTo, 10*65536 + 150*16777216, 0, 0xFFFF0000);
                    unit.set_cp(0x128/4); // 애시드 스포어(2)
                    SetDeaths(CurrentPlayer, SetTo, 150*1 + 150*256 + 150*65536 + 150*16777216, 0);
                    unit.set_cp(0x12C/4); // 애시드 스포어(3)
                    SetDeaths(CurrentPlayer, SetTo, 150*1 + 150*256 + 150*65536 + 150*16777216, 0);
                    unit.set_cp(0x08/4); // 체력
                    SetDeaths(CurrentPlayer, Subtract, 4224, 0);   
                }   
                unit.set_cp(0x124/4); // 애시드 스포어(1-4)
                if (DeathsX(CurrentPlayer, Exactly, 9*65536, 0, 0xFF0000)) {               
                
                    SetDeathsX(CurrentPlayer, SetTo, 10*65536 + 150*16777216, 0, 0xFFFF0000);
                    unit.set_cp(0x128/4); // 애시드 스포어(2)
                    SetDeaths(CurrentPlayer, SetTo, 150*1 + 150*256 + 150*65536 + 150*16777216, 0);
                    unit.set_cp(0x12C/4); // 애시드 스포어(3)
                    SetDeaths(CurrentPlayer, SetTo, 150*1 + 150*256 + 150*65536 + 150*16777216, 0);
                    unit.set_cp(0x08/4); // 체력
                    SetDeaths(CurrentPlayer, Subtract, 4608, 0);
                }         
                unit.set_cp(0x120/4); // 패러사이트
                SetDeathsX(CurrentPlayer, SetTo, 0, 0, 0xFF00);    
                unit.set_cp(0x124/4); // 애시드 스포어
                SetDeathsX(CurrentPlayer, Subtract, 1*65536, 0, 0xFF0000);
            }
            unit.set_cp(0x124/4); // 애시드 스포어
            if (DeathsX(CurrentPlayer, AtLeast, 1*65536, 0, 0xFF0000)) {
                unit.set_cp(0x08/4); // 체력
                if (Deaths(CurrentPlayer, AtMost, 0, 0)) {
                
                    unit.set_cp(0x4C/4); // 명령
                    SetDeathsX(CurrentPlayer, SetTo, 0, 0, 0xFF00);
                }
            }
        }               
    }
    foreach(unit : ZT_S1A5.cploop){ // ZT_S1A5
		foreach(dead : unit.dying){} // 사망 시 발동
        if (Switch("Switch 27", Set)) { // 아비터 죽어도 15초 정도 유지
            unit.set_cp(0x118/4); // 스테이시스 필드
            if (DeathsX(CurrentPlayer, Exactly, 101*256, 0, 0xFF00)) { // 스테이시스 필드
                
                SetDeathsX(CurrentPlayer, SetTo, 1*256, 0, 0xFF00);
            }
        }
        
        unit.set_cp(0x120/4); // 블라인드
        if (DeathsX(CurrentPlayer, AtLeast, 1*16777216, 0, 0xFF000000)) { // 블라인드 인식

            SetDeathsX(CurrentPlayer, SetTo, 0, 0, 0xFF000000);
            unit.set_cp(0x124/4); // 애시드 스포어(1)
            SetDeathsX(CurrentPlayer, SetTo, 9*65536 + 150*16777216, 0, 0xFFFF0000);
            unit.set_cp(0x128/4); // 애시드 스포어(2)
            SetDeaths(CurrentPlayer, SetTo, 150*1 + 150*256 + 150*65536 + 150*16777216, 0);
            unit.set_cp(0x12C/4); // 애시드 스포어(3)
            SetDeaths(CurrentPlayer, SetTo, 150*1 + 150*256 + 150*65536 + 150*16777216, 0);
            unit.set_cp(0x114/4); // 인스네어
            SetDeathsX(CurrentPlayer, Add, 1*65536, 0, 0xFF0000);
        }

        if (Switch("Switch 28", Set)) { // 디바우러 죽어도 5초 정도 유지
            unit.set_cp(0x120/4); // 패러사이트
            if (DeathsX(CurrentPlayer, AtLeast, 1*256, 0, 0xFF00)) { // 패러사이트 인식
                unit.set_cp(0x124/4); // 애시드 스포어(1-1)
                if (DeathsX(CurrentPlayer, Exactly, 0, 0, 0xFF0000)) {               
                
                    SetDeathsX(CurrentPlayer, SetTo, 4*65536 + 150*16777216, 0, 0xFFFF0000);
                    unit.set_cp(0x128/4); // 애시드 스포어(2)
                    SetDeaths(CurrentPlayer, SetTo, 150*1 + 150*256, 0);
                    unit.set_cp(0x08/4); // 체력
                    SetDeaths(CurrentPlayer, Subtract, 3328, 0);        
                }
                unit.set_cp(0x124/4); // 애시드 스포어(1-2)
                if (DeathsX(CurrentPlayer, Exactly, 3*65536, 0, 0xFF0000)) {               
                
                    SetDeathsX(CurrentPlayer, SetTo, 7*65536 + 150*16777216, 0, 0xFFFF0000);
                    unit.set_cp(0x128/4); // 애시드 스포어(2)
                    SetDeaths(CurrentPlayer, SetTo, 150*1 + 150*256 + 150*65536 + 150*16777216, 0);
                    unit.set_cp(0x12C/4); // 애시드 스포어(3)
                    SetDeaths(CurrentPlayer, SetTo, 150, 0);
                    unit.set_cp(0x08/4); // 체력
                    SetDeaths(CurrentPlayer, Subtract, 3712, 0);   
                } 
                unit.set_cp(0x124/4); // 애시드 스포어(1-3)
                if (DeathsX(CurrentPlayer, Exactly, 6*65536, 0, 0xFF0000)) {               
                
                    SetDeathsX(CurrentPlayer, SetTo, 10*65536 + 150*16777216, 0, 0xFFFF0000);
                    unit.set_cp(0x128/4); // 애시드 스포어(2)
                    SetDeaths(CurrentPlayer, SetTo, 150*1 + 150*256 + 150*65536 + 150*16777216, 0);
                    unit.set_cp(0x12C/4); // 애시드 스포어(3)
                    SetDeaths(CurrentPlayer, SetTo, 150*1 + 150*256 + 150*65536 + 150*16777216, 0);
                    unit.set_cp(0x08/4); // 체력
                    SetDeaths(CurrentPlayer, Subtract, 4096, 0);   
                }   
                unit.set_cp(0x124/4); // 애시드 스포어(1-4)
                if (DeathsX(CurrentPlayer, Exactly, 9*65536, 0, 0xFF0000)) {               
                
                    SetDeathsX(CurrentPlayer, SetTo, 10*65536 + 150*16777216, 0, 0xFFFF0000);
                    unit.set_cp(0x128/4); // 애시드 스포어(2)
                    SetDeaths(CurrentPlayer, SetTo, 150*1 + 150*256 + 150*65536 + 150*16777216, 0);
                    unit.set_cp(0x12C/4); // 애시드 스포어(3)
                    SetDeaths(CurrentPlayer, SetTo, 150*1 + 150*256 + 150*65536 + 150*16777216, 0);
                    unit.set_cp(0x08/4); // 체력
                    SetDeaths(CurrentPlayer, Subtract, 4480, 0);
                }         
                unit.set_cp(0x120/4); // 패러사이트
                SetDeathsX(CurrentPlayer, SetTo, 0, 0, 0xFF00);    
                unit.set_cp(0x124/4); // 애시드 스포어
                SetDeathsX(CurrentPlayer, Subtract, 1*65536, 0, 0xFF0000);
            }
            unit.set_cp(0x124/4); // 애시드 스포어
            if (DeathsX(CurrentPlayer, AtLeast, 1*65536, 0, 0xFF0000)) {
                unit.set_cp(0x08/4); // 체력
                if (Deaths(CurrentPlayer, AtMost, 0, 0)) {
                
                    unit.set_cp(0x4C/4); // 명령
                    SetDeathsX(CurrentPlayer, SetTo, 0, 0, 0xFF00);
                }
            }
        }              
    }
    foreach(unit : ZT_M1A3.cploop){ // ZT_M1A3
		foreach(dead : unit.dying){} // 사망 시 발동
        if (Switch("Switch 27", Set)) { // 아비터 죽어도 15초 정도 유지
            unit.set_cp(0x118/4); // 스테이시스 필드
            if (DeathsX(CurrentPlayer, Exactly, 101*256, 0, 0xFF00)) { // 스테이시스 필드
                
                SetDeathsX(CurrentPlayer, SetTo, 1*256, 0, 0xFF00);
            }
        }
        
        unit.set_cp(0x120/4); // 블라인드
        if (DeathsX(CurrentPlayer, AtLeast, 1*16777216, 0, 0xFF000000)) { // 블라인드 인식

            SetDeathsX(CurrentPlayer, SetTo, 0, 0, 0xFF000000);
            unit.set_cp(0x124/4); // 애시드 스포어(1)
            SetDeathsX(CurrentPlayer, SetTo, 9*65536 + 150*16777216, 0, 0xFFFF0000);
            unit.set_cp(0x128/4); // 애시드 스포어(2)
            SetDeaths(CurrentPlayer, SetTo, 150*1 + 150*256 + 150*65536 + 150*16777216, 0);
            unit.set_cp(0x12C/4); // 애시드 스포어(3)
            SetDeaths(CurrentPlayer, SetTo, 150*1 + 150*256 + 150*65536 + 150*16777216, 0);
            unit.set_cp(0x114/4); // 인스네어
            SetDeathsX(CurrentPlayer, Add, 1*65536, 0, 0xFF0000);
        }

        if (Switch("Switch 28", Set)) { // 디바우러 죽어도 5초 정도 유지
            unit.set_cp(0x120/4); // 패러사이트
            if (DeathsX(CurrentPlayer, AtLeast, 1*256, 0, 0xFF00)) { // 패러사이트 인식
                unit.set_cp(0x124/4); // 애시드 스포어(1-1)
                if (DeathsX(CurrentPlayer, Exactly, 0, 0, 0xFF0000)) {               
                
                    SetDeathsX(CurrentPlayer, SetTo, 4*65536 + 150*16777216, 0, 0xFFFF0000);
                    unit.set_cp(0x128/4); // 애시드 스포어(2)
                    SetDeaths(CurrentPlayer, SetTo, 150*1 + 150*256, 0);
                    unit.set_cp(0x08/4); // 체력
                    SetDeaths(CurrentPlayer, Subtract, 5376, 0);        
                }
                unit.set_cp(0x124/4); // 애시드 스포어(1-2)
                if (DeathsX(CurrentPlayer, Exactly, 3*65536, 0, 0xFF0000)) {               
                
                    SetDeathsX(CurrentPlayer, SetTo, 7*65536 + 150*16777216, 0, 0xFFFF0000);
                    unit.set_cp(0x128/4); // 애시드 스포어(2)
                    SetDeaths(CurrentPlayer, SetTo, 150*1 + 150*256 + 150*65536 + 150*16777216, 0);
                    unit.set_cp(0x12C/4); // 애시드 스포어(3)
                    SetDeaths(CurrentPlayer, SetTo, 150, 0);
                    unit.set_cp(0x08/4); // 체력
                    SetDeaths(CurrentPlayer, Subtract, 5952, 0);   
                } 
                unit.set_cp(0x124/4); // 애시드 스포어(1-3)
                if (DeathsX(CurrentPlayer, Exactly, 6*65536, 0, 0xFF0000)) {               
                    
                    SetDeathsX(CurrentPlayer, SetTo, 10*65536 + 150*16777216, 0, 0xFFFF0000);
                    unit.set_cp(0x128/4); // 애시드 스포어(2)
                    SetDeaths(CurrentPlayer, SetTo, 150*1 + 150*256 + 150*65536 + 150*16777216, 0);
                    unit.set_cp(0x12C/4); // 애시드 스포어(3)
                    SetDeaths(CurrentPlayer, SetTo, 150*1 + 150*256 + 150*65536 + 150*16777216, 0);
                    unit.set_cp(0x08/4); // 체력
                    SetDeaths(CurrentPlayer, Subtract, 6528, 0);   
                }   
                unit.set_cp(0x124/4); // 애시드 스포어(1-4)
                if (DeathsX(CurrentPlayer, Exactly, 9*65536, 0, 0xFF0000)) {               
                
                    SetDeathsX(CurrentPlayer, SetTo, 10*65536 + 150*16777216, 0, 0xFFFF0000);
                    unit.set_cp(0x128/4); // 애시드 스포어(2)
                    SetDeaths(CurrentPlayer, SetTo, 150*1 + 150*256 + 150*65536 + 150*16777216, 0);
                    unit.set_cp(0x12C/4); // 애시드 스포어(3)
                    SetDeaths(CurrentPlayer, SetTo, 150*1 + 150*256 + 150*65536 + 150*16777216, 0);
                    unit.set_cp(0x08/4); // 체력
                    SetDeaths(CurrentPlayer, Subtract, 7104, 0);
                }         
                unit.set_cp(0x120/4); // 패러사이트
                SetDeathsX(CurrentPlayer, SetTo, 0, 0, 0xFF00);    
                unit.set_cp(0x124/4); // 애시드 스포어
                SetDeathsX(CurrentPlayer, Subtract, 1*65536, 0, 0xFF0000);
            }
            unit.set_cp(0x124/4); // 애시드 스포어
            if (DeathsX(CurrentPlayer, AtLeast, 1*65536, 0, 0xFF0000)) {
                unit.set_cp(0x08/4); // 체력
                if (Deaths(CurrentPlayer, AtMost, 0, 0)) {
                
                    unit.set_cp(0x4C/4); // 명령
                    SetDeathsX(CurrentPlayer, SetTo, 0, 0, 0xFF00);
                }
            }
        }       
    }
    foreach(unit : ZT_M1A4.cploop){ // ZT_M1A4
		foreach(dead : unit.dying){} // 사망 시 발동
        if (Switch("Switch 27", Set)) { // 아비터 죽어도 15초 정도 유지
            unit.set_cp(0x118/4); // 스테이시스 필드
            if (DeathsX(CurrentPlayer, Exactly, 101*256, 0, 0xFF00)) { // 스테이시스 필드
                
                SetDeathsX(CurrentPlayer, SetTo, 1*256, 0, 0xFF00);
            }
        }
        
        unit.set_cp(0x120/4); // 블라인드
        if (DeathsX(CurrentPlayer, AtLeast, 1*16777216, 0, 0xFF000000)) { // 블라인드 인식

            SetDeathsX(CurrentPlayer, SetTo, 0, 0, 0xFF000000);
            unit.set_cp(0x124/4); // 애시드 스포어(1)
            SetDeathsX(CurrentPlayer, SetTo, 9*65536 + 150*16777216, 0, 0xFFFF0000);
            unit.set_cp(0x128/4); // 애시드 스포어(2)
            SetDeaths(CurrentPlayer, SetTo, 150*1 + 150*256 + 150*65536 + 150*16777216, 0);
            unit.set_cp(0x12C/4); // 애시드 스포어(3)
            SetDeaths(CurrentPlayer, SetTo, 150*1 + 150*256 + 150*65536 + 150*16777216, 0);
            unit.set_cp(0x114/4); // 인스네어
            SetDeathsX(CurrentPlayer, Add, 1*65536, 0, 0xFF0000);
        }

        if (Switch("Switch 28", Set)) { // 디바우러 죽어도 5초 정도 유지
            unit.set_cp(0x120/4); // 패러사이트
            if (DeathsX(CurrentPlayer, AtLeast, 1*256, 0, 0xFF00)) { // 패러사이트 인식
                unit.set_cp(0x124/4); // 애시드 스포어(1-1)
                if (DeathsX(CurrentPlayer, Exactly, 0, 0, 0xFF0000)) {               
                
                    SetDeathsX(CurrentPlayer, SetTo, 4*65536 + 150*16777216, 0, 0xFFFF0000);
                    unit.set_cp(0x128/4); // 애시드 스포어(2)
                    SetDeaths(CurrentPlayer, SetTo, 150*1 + 150*256, 0);
                    unit.set_cp(0x08/4); // 체력
                    SetDeaths(CurrentPlayer, Subtract, 5184, 0);        
                }
                unit.set_cp(0x124/4); // 애시드 스포어(1-2)
                if (DeathsX(CurrentPlayer, Exactly, 3*65536, 0, 0xFF0000)) {               
                
                    SetDeathsX(CurrentPlayer, SetTo, 7*65536 + 150*16777216, 0, 0xFFFF0000);
                    unit.set_cp(0x128/4); // 애시드 스포어(2)
                    SetDeaths(CurrentPlayer, SetTo, 150*1 + 150*256 + 150*65536 + 150*16777216, 0);
                    unit.set_cp(0x12C/4); // 애시드 스포어(3)
                    SetDeaths(CurrentPlayer, SetTo, 150, 0);
                    unit.set_cp(0x08/4); // 체력
                    SetDeaths(CurrentPlayer, Subtract, 5760, 0);   
                } 
                unit.set_cp(0x124/4); // 애시드 스포어(1-3)
                if (DeathsX(CurrentPlayer, Exactly, 6*65536, 0, 0xFF0000)) {               
                
                    SetDeathsX(CurrentPlayer, SetTo, 10*65536 + 150*16777216, 0, 0xFFFF0000);
                    unit.set_cp(0x128/4); // 애시드 스포어(2)
                    SetDeaths(CurrentPlayer, SetTo, 150*1 + 150*256 + 150*65536 + 150*16777216, 0);
                    unit.set_cp(0x12C/4); // 애시드 스포어(3)
                    SetDeaths(CurrentPlayer, SetTo, 150*1 + 150*256 + 150*65536 + 150*16777216, 0);
                    unit.set_cp(0x08/4); // 체력
                    SetDeaths(CurrentPlayer, Subtract, 6336, 0);   
                }   
                unit.set_cp(0x124/4); // 애시드 스포어(1-4)
                if (DeathsX(CurrentPlayer, Exactly, 9*65536, 0, 0xFF0000)) {               
                
                    SetDeathsX(CurrentPlayer, SetTo, 10*65536 + 150*16777216, 0, 0xFFFF0000);
                    unit.set_cp(0x128/4); // 애시드 스포어(2)
                    SetDeaths(CurrentPlayer, SetTo, 150*1 + 150*256 + 150*65536 + 150*16777216, 0);
                    unit.set_cp(0x12C/4); // 애시드 스포어(3)
                    SetDeaths(CurrentPlayer, SetTo, 150*1 + 150*256 + 150*65536 + 150*16777216, 0);
                    unit.set_cp(0x08/4); // 체력
                    SetDeaths(CurrentPlayer, Subtract, 6912, 0);
                }         
                unit.set_cp(0x120/4); // 패러사이트
                SetDeathsX(CurrentPlayer, SetTo, 0, 0, 0xFF00);    
                unit.set_cp(0x124/4); // 애시드 스포어
                SetDeathsX(CurrentPlayer, Subtract, 1*65536, 0, 0xFF0000);
            }
            unit.set_cp(0x124/4); // 애시드 스포어
            if (DeathsX(CurrentPlayer, AtLeast, 1*65536, 0, 0xFF0000)) {
                unit.set_cp(0x08/4); // 체력
                if (Deaths(CurrentPlayer, AtMost, 0, 0)) {
                
                    unit.set_cp(0x4C/4); // 명령
                    SetDeathsX(CurrentPlayer, SetTo, 0, 0, 0xFF00);
                }
            }   
        }    
    }
    foreach(unit : ZT_B1A3.cploop){ // ZT_B1A3
		foreach(dead : unit.dying){} // 사망 시 발동
        if (Switch("Switch 27", Set)) { // 아비터 죽어도 15초 정도 유지
            unit.set_cp(0x118/4); // 스테이시스 필드
            if (DeathsX(CurrentPlayer, Exactly, 101*256, 0, 0xFF00)) { // 스테이시스 필드
                
                SetDeathsX(CurrentPlayer, SetTo, 1*256, 0, 0xFF00);
            }
        }
        
        unit.set_cp(0x120/4); // 블라인드
        if (DeathsX(CurrentPlayer, AtLeast, 1*16777216, 0, 0xFF000000)) { // 블라인드 인식

            SetDeathsX(CurrentPlayer, SetTo, 0, 0, 0xFF000000);
            unit.set_cp(0x124/4); // 애시드 스포어(1)
            SetDeathsX(CurrentPlayer, SetTo, 9*65536 + 150*16777216, 0, 0xFFFF0000);
            unit.set_cp(0x128/4); // 애시드 스포어(2)
            SetDeaths(CurrentPlayer, SetTo, 150*1 + 150*256 + 150*65536 + 150*16777216, 0);
            unit.set_cp(0x12C/4); // 애시드 스포어(3)
            SetDeaths(CurrentPlayer, SetTo, 150*1 + 150*256 + 150*65536 + 150*16777216, 0);
            unit.set_cp(0x114/4); // 인스네어
            SetDeathsX(CurrentPlayer, Add, 1*65536, 0, 0xFF0000);
        }

        if (Switch("Switch 28", Set)) { // 디바우러 죽어도 5초 정도 유지
            unit.set_cp(0x120/4); // 패러사이트
            if (DeathsX(CurrentPlayer, AtLeast, 1*256, 0, 0xFF00)) { // 패러사이트 인식
                unit.set_cp(0x124/4); // 애시드 스포어(1-1)
                if (DeathsX(CurrentPlayer, Exactly, 0, 0, 0xFF0000)) {               
                
                    SetDeathsX(CurrentPlayer, SetTo, 4*65536 + 150*16777216, 0, 0xFFFF0000);
                    unit.set_cp(0x128/4); // 애시드 스포어(2)
                    SetDeaths(CurrentPlayer, SetTo, 150*1 + 150*256, 0);
                    unit.set_cp(0x08/4); // 체력
                    SetDeaths(CurrentPlayer, Subtract, 7168, 0);        
                }
                unit.set_cp(0x124/4); // 애시드 스포어(1-2)
                if (DeathsX(CurrentPlayer, Exactly, 3*65536, 0, 0xFF0000)) {               
                
                    SetDeathsX(CurrentPlayer, SetTo, 7*65536 + 150*16777216, 0, 0xFFFF0000);
                    unit.set_cp(0x128/4); // 애시드 스포어(2)
                    SetDeaths(CurrentPlayer, SetTo, 150*1 + 150*256 + 150*65536 + 150*16777216, 0);
                    unit.set_cp(0x12C/4); // 애시드 스포어(3)
                    SetDeaths(CurrentPlayer, SetTo, 150, 0);
                    unit.set_cp(0x08/4); // 체력
                    SetDeaths(CurrentPlayer, Subtract, 7936, 0);   
                } 
                unit.set_cp(0x124/4); // 애시드 스포어(1-3)
                if (DeathsX(CurrentPlayer, Exactly, 6*65536, 0, 0xFF0000)) {               
                
                    SetDeathsX(CurrentPlayer, SetTo, 10*65536 + 150*16777216, 0, 0xFFFF0000);
                    unit.set_cp(0x128/4); // 애시드 스포어(2)
                    SetDeaths(CurrentPlayer, SetTo, 150*1 + 150*256 + 150*65536 + 150*16777216, 0);
                    unit.set_cp(0x12C/4); // 애시드 스포어(3)
                    SetDeaths(CurrentPlayer, SetTo, 150*1 + 150*256 + 150*65536 + 150*16777216, 0);
                    unit.set_cp(0x08/4); // 체력
                    SetDeaths(CurrentPlayer, Subtract, 8704, 0);   
                }   
                unit.set_cp(0x124/4); // 애시드 스포어(1-4)
                if (DeathsX(CurrentPlayer, Exactly, 9*65536, 0, 0xFF0000)) {               
                
                    SetDeathsX(CurrentPlayer, SetTo, 10*65536 + 150*16777216, 0, 0xFFFF0000);
                    unit.set_cp(0x128/4); // 애시드 스포어(2)
                    SetDeaths(CurrentPlayer, SetTo, 150*1 + 150*256 + 150*65536 + 150*16777216, 0);
                    unit.set_cp(0x12C/4); // 애시드 스포어(3)
                    SetDeaths(CurrentPlayer, SetTo, 150*1 + 150*256 + 150*65536 + 150*16777216, 0);
                    unit.set_cp(0x08/4); // 체력
                    SetDeaths(CurrentPlayer, Subtract, 9472, 0);
                }         
                unit.set_cp(0x120/4); // 패러사이트
                SetDeathsX(CurrentPlayer, SetTo, 0, 0, 0xFF00);    
                unit.set_cp(0x124/4); // 애시드 스포어
                SetDeathsX(CurrentPlayer, Subtract, 1*65536, 0, 0xFF0000);
            }
            unit.set_cp(0x124/4); // 애시드 스포어
            if (DeathsX(CurrentPlayer, AtLeast, 1*65536, 0, 0xFF0000)) {
                unit.set_cp(0x08/4); // 체력
                if (Deaths(CurrentPlayer, AtMost, 0, 0)) {
                
                    unit.set_cp(0x4C/4); // 명령
                    SetDeathsX(CurrentPlayer, SetTo, 0, 0, 0xFF00);
                }
            }
        }    
    }
    foreach(unit : ZT_B1A4.cploop){ // ZT_B1A4
		foreach(dead : unit.dying){} // 사망 시 발동
        if (Switch("Switch 27", Set)) { // 아비터 죽어도 15초 정도 유지
            unit.set_cp(0x118/4); // 스테이시스 필드
            if (DeathsX(CurrentPlayer, Exactly, 101*256, 0, 0xFF00)) { // 스테이시스 필드
                
                SetDeathsX(CurrentPlayer, SetTo, 1*256, 0, 0xFF00);
            }
        }
        
        unit.set_cp(0x120/4); // 블라인드
        if (DeathsX(CurrentPlayer, AtLeast, 1*16777216, 0, 0xFF000000)) { // 블라인드 인식

            SetDeathsX(CurrentPlayer, SetTo, 0, 0, 0xFF000000);
            unit.set_cp(0x124/4); // 애시드 스포어(1)
            SetDeathsX(CurrentPlayer, SetTo, 9*65536 + 150*16777216, 0, 0xFFFF0000);
            unit.set_cp(0x128/4); // 애시드 스포어(2)
            SetDeaths(CurrentPlayer, SetTo, 150*1 + 150*256 + 150*65536 + 150*16777216, 0);
            unit.set_cp(0x12C/4); // 애시드 스포어(3)
            SetDeaths(CurrentPlayer, SetTo, 150*1 + 150*256 + 150*65536 + 150*16777216, 0);
            unit.set_cp(0x114/4); // 인스네어
            SetDeathsX(CurrentPlayer, Add, 1*65536, 0, 0xFF0000);
        }

        if (Switch("Switch 28", Set)) { // 디바우러 죽어도 5초 정도 유지
            unit.set_cp(0x120/4); // 패러사이트
            if (DeathsX(CurrentPlayer, AtLeast, 1*256, 0, 0xFF00)) { // 패러사이트 인식
                unit.set_cp(0x124/4); // 애시드 스포어(1-1)
                if (DeathsX(CurrentPlayer, Exactly, 0, 0, 0xFF0000)) {               
                
                    SetDeathsX(CurrentPlayer, SetTo, 4*65536 + 150*16777216, 0, 0xFFFF0000);
                    unit.set_cp(0x128/4); // 애시드 스포어(2)
                    SetDeaths(CurrentPlayer, SetTo, 150*1 + 150*256, 0);
                    unit.set_cp(0x08/4); // 체력
                    SetDeaths(CurrentPlayer, Subtract, 6912, 0);        
                }
                unit.set_cp(0x124/4); // 애시드 스포어(1-2)
                if (DeathsX(CurrentPlayer, Exactly, 3*65536, 0, 0xFF0000)) {               
                
                    SetDeathsX(CurrentPlayer, SetTo, 7*65536 + 150*16777216, 0, 0xFFFF0000);
                    unit.set_cp(0x128/4); // 애시드 스포어(2)
                    SetDeaths(CurrentPlayer, SetTo, 150*1 + 150*256 + 150*65536 + 150*16777216, 0);
                    unit.set_cp(0x12C/4); // 애시드 스포어(3)
                    SetDeaths(CurrentPlayer, SetTo, 150, 0);
                    unit.set_cp(0x08/4); // 체력
                    SetDeaths(CurrentPlayer, Subtract, 7680, 0);   
                } 
                unit.set_cp(0x124/4); // 애시드 스포어(1-3)
                if (DeathsX(CurrentPlayer, Exactly, 6*65536, 0, 0xFF0000)) {               
                
                    SetDeathsX(CurrentPlayer, SetTo, 10*65536 + 150*16777216, 0, 0xFFFF0000);
                    unit.set_cp(0x128/4); // 애시드 스포어(2)
                    SetDeaths(CurrentPlayer, SetTo, 150*1 + 150*256 + 150*65536 + 150*16777216, 0);
                    unit.set_cp(0x12C/4); // 애시드 스포어(3)
                    SetDeaths(CurrentPlayer, SetTo, 150*1 + 150*256 + 150*65536 + 150*16777216, 0);
                    unit.set_cp(0x08/4); // 체력
                    SetDeaths(CurrentPlayer, Subtract, 8448, 0);   
                }   
                unit.set_cp(0x124/4); // 애시드 스포어(1-4)
                if (DeathsX(CurrentPlayer, Exactly, 9*65536, 0, 0xFF0000)) {               
                
                    SetDeathsX(CurrentPlayer, SetTo, 10*65536 + 150*16777216, 0, 0xFFFF0000);
                    unit.set_cp(0x128/4); // 애시드 스포어(2)
                    SetDeaths(CurrentPlayer, SetTo, 150*1 + 150*256 + 150*65536 + 150*16777216, 0);
                    unit.set_cp(0x12C/4); // 애시드 스포어(3)
                    SetDeaths(CurrentPlayer, SetTo, 150*1 + 150*256 + 150*65536 + 150*16777216, 0);
                    unit.set_cp(0x08/4); // 체력
                    SetDeaths(CurrentPlayer, Subtract, 9216, 0);
                }         
                unit.set_cp(0x120/4); // 패러사이트
                SetDeathsX(CurrentPlayer, SetTo, 0, 0, 0xFF00);    
                unit.set_cp(0x124/4); // 애시드 스포어
                SetDeathsX(CurrentPlayer, Subtract, 1*65536, 0, 0xFF0000);
            }
            unit.set_cp(0x124/4); // 애시드 스포어
            if (DeathsX(CurrentPlayer, AtLeast, 1*65536, 0, 0xFF0000)) {
                unit.set_cp(0x08/4); // 체력
                if (Deaths(CurrentPlayer, AtMost, 0, 0)) {
                
                    unit.set_cp(0x4C/4); // 명령
                    SetDeathsX(CurrentPlayer, SetTo, 0, 0, 0xFF00);
                }
            }
        }               
    }
    foreach(unit : ZT_B1A5.cploop){ // ZT_B1A5
		foreach(dead : unit.dying){} // 사망 시 발동
        if (Switch("Switch 27", Set)) { // 아비터 죽어도 15초 정도 유지
            unit.set_cp(0x118/4); // 스테이시스 필드
            if (DeathsX(CurrentPlayer, Exactly, 101*256, 0, 0xFF00)) { // 스테이시스 필드
                
                SetDeathsX(CurrentPlayer, SetTo, 1*256, 0, 0xFF00);
            }
        }
        
        unit.set_cp(0x120/4); // 블라인드
        if (DeathsX(CurrentPlayer, AtLeast, 1*16777216, 0, 0xFF000000)) { // 블라인드 인식

            SetDeathsX(CurrentPlayer, SetTo, 0, 0, 0xFF000000);
            unit.set_cp(0x124/4); // 애시드 스포어(1)
            SetDeathsX(CurrentPlayer, SetTo, 9*65536 + 150*16777216, 0, 0xFFFF0000);
            unit.set_cp(0x128/4); // 애시드 스포어(2)
            SetDeaths(CurrentPlayer, SetTo, 150*1 + 150*256 + 150*65536 + 150*16777216, 0);
            unit.set_cp(0x12C/4); // 애시드 스포어(3)
            SetDeaths(CurrentPlayer, SetTo, 150*1 + 150*256 + 150*65536 + 150*16777216, 0);
            unit.set_cp(0x114/4); // 인스네어
            SetDeathsX(CurrentPlayer, Add, 1*65536, 0, 0xFF0000);
        }

        if (Switch("Switch 28", Set)) { // 디바우러 죽어도 5초 정도 유지
            unit.set_cp(0x120/4); // 패러사이트
            if (DeathsX(CurrentPlayer, AtLeast, 1*256, 0, 0xFF00)) { // 패러사이트 인식
                unit.set_cp(0x124/4); // 애시드 스포어(1-1)
                if (DeathsX(CurrentPlayer, Exactly, 0, 0, 0xFF0000)) {               
                
                    SetDeathsX(CurrentPlayer, SetTo, 4*65536 + 150*16777216, 0, 0xFFFF0000);
                    unit.set_cp(0x128/4); // 애시드 스포어(2)
                    SetDeaths(CurrentPlayer, SetTo, 150*1 + 150*256, 0);
                    unit.set_cp(0x08/4); // 체력
                    SetDeaths(CurrentPlayer, Subtract, 6656, 0);        
                }
                unit.set_cp(0x124/4); // 애시드 스포어(1-2)
                if (DeathsX(CurrentPlayer, Exactly, 3*65536, 0, 0xFF0000)) {               
                
                    SetDeathsX(CurrentPlayer, SetTo, 7*65536 + 150*16777216, 0, 0xFFFF0000);
                    unit.set_cp(0x128/4); // 애시드 스포어(2)
                    SetDeaths(CurrentPlayer, SetTo, 150*1 + 150*256 + 150*65536 + 150*16777216, 0);
                    unit.set_cp(0x12C/4); // 애시드 스포어(3)
                    SetDeaths(CurrentPlayer, SetTo, 150, 0);
                    unit.set_cp(0x08/4); // 체력
                    SetDeaths(CurrentPlayer, Subtract, 7424, 0);   
                } 
                unit.set_cp(0x124/4); // 애시드 스포어(1-3)
                if (DeathsX(CurrentPlayer, Exactly, 6*65536, 0, 0xFF0000)) {               
                
                    SetDeathsX(CurrentPlayer, SetTo, 10*65536 + 150*16777216, 0, 0xFFFF0000);
                    unit.set_cp(0x128/4); // 애시드 스포어(2)
                    SetDeaths(CurrentPlayer, SetTo, 150*1 + 150*256 + 150*65536 + 150*16777216, 0);
                    unit.set_cp(0x12C/4); // 애시드 스포어(3)
                    SetDeaths(CurrentPlayer, SetTo, 150*1 + 150*256 + 150*65536 + 150*16777216, 0);
                    unit.set_cp(0x08/4); // 체력
                    SetDeaths(CurrentPlayer, Subtract, 8192, 0);   
                }   
                unit.set_cp(0x124/4); // 애시드 스포어(1-4)
                if (DeathsX(CurrentPlayer, Exactly, 9*65536, 0, 0xFF0000)) {               
                
                    SetDeathsX(CurrentPlayer, SetTo, 10*65536 + 150*16777216, 0, 0xFFFF0000);
                    unit.set_cp(0x128/4); // 애시드 스포어(2)
                    SetDeaths(CurrentPlayer, SetTo, 150*1 + 150*256 + 150*65536 + 150*16777216, 0);
                    unit.set_cp(0x12C/4); // 애시드 스포어(3)
                    SetDeaths(CurrentPlayer, SetTo, 150*1 + 150*256 + 150*65536 + 150*16777216, 0);
                    unit.set_cp(0x08/4); // 체력
                    SetDeaths(CurrentPlayer, Subtract, 8960, 0);
                }         
                unit.set_cp(0x120/4); // 패러사이트
                SetDeathsX(CurrentPlayer, SetTo, 0, 0, 0xFF00);    
                unit.set_cp(0x124/4); // 애시드 스포어
                SetDeathsX(CurrentPlayer, Subtract, 1*65536, 0, 0xFF0000);
            }
            unit.set_cp(0x124/4); // 애시드 스포어
            if (DeathsX(CurrentPlayer, AtLeast, 1*65536, 0, 0xFF0000)) {
                unit.set_cp(0x08/4); // 체력
                if (Deaths(CurrentPlayer, AtMost, 0, 0)) {
                
                    unit.set_cp(0x4C/4); // 명령
                    SetDeathsX(CurrentPlayer, SetTo, 0, 0, 0xFF00);
                }
            }
        }                
    }
    foreach(unit : ZT_B1A6.cploop){ // ZT_B1A6
		foreach(dead : unit.dying){} // 사망 시 발동
        if (Switch("Switch 27", Set)) { // 아비터 죽어도 15초 정도 유지
            unit.set_cp(0x118/4); // 스테이시스 필드
            if (DeathsX(CurrentPlayer, Exactly, 101*256, 0, 0xFF00)) { // 스테이시스 필드
                
                SetDeathsX(CurrentPlayer, SetTo, 1*256, 0, 0xFF00);
            }
        }
        
        unit.set_cp(0x120/4); // 블라인드
        if (DeathsX(CurrentPlayer, AtLeast, 1*16777216, 0, 0xFF000000)) { // 블라인드 인식

            SetDeathsX(CurrentPlayer, SetTo, 0, 0, 0xFF000000);
            unit.set_cp(0x124/4); // 애시드 스포어(1)
            SetDeathsX(CurrentPlayer, SetTo, 9*65536 + 150*16777216, 0, 0xFFFF0000);
            unit.set_cp(0x128/4); // 애시드 스포어(2)
            SetDeaths(CurrentPlayer, SetTo, 150*1 + 150*256 + 150*65536 + 150*16777216, 0);
            unit.set_cp(0x12C/4); // 애시드 스포어(3)
            SetDeaths(CurrentPlayer, SetTo, 150*1 + 150*256 + 150*65536 + 150*16777216, 0);
            unit.set_cp(0x114/4); // 인스네어
            SetDeathsX(CurrentPlayer, Add, 1*65536, 0, 0xFF0000);
        }

        if (Switch("Switch 28", Set)) { // 디바우러 죽어도 5초 정도 유지
            unit.set_cp(0x120/4); // 패러사이트
            if (DeathsX(CurrentPlayer, AtLeast, 1*256, 0, 0xFF00)) { // 패러사이트 인식
                unit.set_cp(0x124/4); // 애시드 스포어(1-1)
                if (DeathsX(CurrentPlayer, Exactly, 0, 0, 0xFF0000)) {               
                    
                    SetDeathsX(CurrentPlayer, SetTo, 4*65536 + 150*16777216, 0, 0xFFFF0000);
                    unit.set_cp(0x128/4); // 애시드 스포어(2)
                    SetDeaths(CurrentPlayer, SetTo, 150*1 + 150*256, 0);
                    unit.set_cp(0x08/4); // 체력
                    SetDeaths(CurrentPlayer, Subtract, 6400, 0);        
                }
                unit.set_cp(0x124/4); // 애시드 스포어(1-2)
                if (DeathsX(CurrentPlayer, Exactly, 3*65536, 0, 0xFF0000)) {               
                    
                    SetDeathsX(CurrentPlayer, SetTo, 7*65536 + 150*16777216, 0, 0xFFFF0000);
                    unit.set_cp(0x128/4); // 애시드 스포어(2)
                    SetDeaths(CurrentPlayer, SetTo, 150*1 + 150*256 + 150*65536 + 150*16777216, 0);
                    unit.set_cp(0x12C/4); // 애시드 스포어(3)
                    SetDeaths(CurrentPlayer, SetTo, 150, 0);
                    unit.set_cp(0x08/4); // 체력
                    SetDeaths(CurrentPlayer, Subtract, 7168, 0);   
                } 
                unit.set_cp(0x124/4); // 애시드 스포어(1-3)
                if (DeathsX(CurrentPlayer, Exactly, 6*65536, 0, 0xFF0000)) {               
                    
                    SetDeathsX(CurrentPlayer, SetTo, 10*65536 + 150*16777216, 0, 0xFFFF0000);
                    unit.set_cp(0x128/4); // 애시드 스포어(2)
                    SetDeaths(CurrentPlayer, SetTo, 150*1 + 150*256 + 150*65536 + 150*16777216, 0);
                    unit.set_cp(0x12C/4); // 애시드 스포어(3)
                    SetDeaths(CurrentPlayer, SetTo, 150*1 + 150*256 + 150*65536 + 150*16777216, 0);
                    unit.set_cp(0x08/4); // 체력
                    SetDeaths(CurrentPlayer, Subtract, 7936, 0);   
                }   
                unit.set_cp(0x124/4); // 애시드 스포어(1-4)
                if (DeathsX(CurrentPlayer, Exactly, 9*65536, 0, 0xFF0000)) {               
                    
                    SetDeathsX(CurrentPlayer, SetTo, 10*65536 + 150*16777216, 0, 0xFFFF0000);
                    unit.set_cp(0x128/4); // 애시드 스포어(2)
                    SetDeaths(CurrentPlayer, SetTo, 150*1 + 150*256 + 150*65536 + 150*16777216, 0);
                    unit.set_cp(0x12C/4); // 애시드 스포어(3)
                    SetDeaths(CurrentPlayer, SetTo, 150*1 + 150*256 + 150*65536 + 150*16777216, 0);
                    unit.set_cp(0x08/4); // 체력
                    SetDeaths(CurrentPlayer, Subtract, 8704, 0);
                }         
                unit.set_cp(0x120/4); // 패러사이트
                SetDeathsX(CurrentPlayer, SetTo, 0, 0, 0xFF00);    
                unit.set_cp(0x124/4); // 애시드 스포어
                SetDeathsX(CurrentPlayer, Subtract, 1*65536, 0, 0xFF0000);
            }
            unit.set_cp(0x124/4); // 애시드 스포어
            if (DeathsX(CurrentPlayer, AtLeast, 1*65536, 0, 0xFF0000)) {
                unit.set_cp(0x08/4); // 체력
                if (Deaths(CurrentPlayer, AtMost, 0, 0)) {
                    
                    unit.set_cp(0x4C/4); // 명령
                    SetDeathsX(CurrentPlayer, SetTo, 0, 0, 0xFF00);
                }
            }
        }                
    }
    foreach(unit : P_S1A3.cploop){ // P_S1A3
		foreach(dead : unit.dying){} // 사망 시 발동
        if (Switch("Switch 27", Set)) { // 아비터 죽어도 15초 정도 유지
            unit.set_cp(0x118/4); // 스테이시스 필드
            if (DeathsX(CurrentPlayer, Exactly, 101*256, 0, 0xFF00)) { // 스테이시스 필드
                
                SetDeathsX(CurrentPlayer, SetTo, 1*256, 0, 0xFF00);
            }
        }
        
        unit.set_cp(0x120/4); // 블라인드
        if (DeathsX(CurrentPlayer, AtLeast, 1*16777216, 0, 0xFF000000)) { // 블라인드 인식

            SetDeathsX(CurrentPlayer, SetTo, 0, 0, 0xFF000000);
            unit.set_cp(0x124/4); // 애시드 스포어(1)
            SetDeathsX(CurrentPlayer, SetTo, 9*65536 + 150*16777216, 0, 0xFFFF0000);
            unit.set_cp(0x128/4); // 애시드 스포어(2)
            SetDeaths(CurrentPlayer, SetTo, 150*1 + 150*256 + 150*65536 + 150*16777216, 0);
            unit.set_cp(0x12C/4); // 애시드 스포어(3)
            SetDeaths(CurrentPlayer, SetTo, 150*1 + 150*256 + 150*65536 + 150*16777216, 0);
            unit.set_cp(0x114/4); // 인스네어
            SetDeathsX(CurrentPlayer, Add, 1*65536, 0, 0xFF0000);
        }

        if (Switch("Switch 28", Set)) { // 디바우러 죽어도 5초 정도 유지
            unit.set_cp(0x120/4); // 패러사이트
            if (DeathsX(CurrentPlayer, AtLeast, 1*256, 0, 0xFF00)) { // 패러사이트 인식
                unit.set_cp(0x124/4); // 애시드 스포어(1-1)
                if (DeathsX(CurrentPlayer, Exactly, 0, 0, 0xFF0000)) {      
                    unit.set_cp(0x60/4); // 쉴드
                    if (Deaths(CurrentPlayer, AtLeast, 28*256, 0)) {

                        SetDeaths(CurrentPlayer, Subtract, 28*256, 0); // 28
                    }
                    else if (Deaths(CurrentPlayer, AtMost, 28*256 - 1, 0)) {
                        if (Deaths(CurrentPlayer, AtLeast, 25*256, 0)) { // A3 빼기, 얘량 겹치는 숫자 없음 체크
                            
                            SetDeaths(CurrentPlayer, SetTo, 0, 0);
                            unit.set_cp(0x08/4); // 체력
                            SetDeaths(CurrentPlayer, Subtract, 1, 0);
                        }
                        else {
                            unit.set_cp(0x60/4); // 쉴드
                            const Shield = dwread_cp(0);
                            const HP_Damage = (28*256 - Shield - 3*256) / 2;
                            SetDeaths(CurrentPlayer, SetTo, 0, 0);           
                            unit.set_cp(0x08/4); // 체력
                            SetDeaths(CurrentPlayer, Subtract, HP_Damage, 0); 
                        }                
                    }
                    unit.set_cp(0x124/4); // 애시드 스포어
                    SetDeathsX(CurrentPlayer, SetTo, 4*65536 + 150*16777216, 0, 0xFFFF0000);
                    unit.set_cp(0x128/4); // 애시드 스포어(2)
                    SetDeaths(CurrentPlayer, SetTo, 150*1 + 150*256, 0);       
                }

                unit.set_cp(0x124/4); // 애시드 스포어(1-2)
                if (DeathsX(CurrentPlayer, Exactly, 3*65536, 0, 0xFF0000)) {      
                    unit.set_cp(0x60/4); // 쉴드
                    if (Deaths(CurrentPlayer, AtLeast, 31*256, 0)) {

                        SetDeaths(CurrentPlayer, Subtract, 31*256, 0); // 31
                    }
                    else if (Deaths(CurrentPlayer, AtMost, 31*256 - 1, 0)) {
                        if (Deaths(CurrentPlayer, AtLeast, 28*256, 0)) { // A3 빼기, 얘량 겹치는 숫자 없음 체크
                            
                            SetDeaths(CurrentPlayer, SetTo, 0, 0);
                            unit.set_cp(0x08/4); // 체력
                            SetDeaths(CurrentPlayer, Subtract, 1, 0);
                        }
                        else {
                            unit.set_cp(0x60/4); // 쉴드
                            const Shield = dwread_cp(0);
                            const HP_Damage = (31*256 - Shield - 3*256) / 2;
                            SetDeaths(CurrentPlayer, SetTo, 0, 0);           
                            unit.set_cp(0x08/4); // 체력
                            SetDeaths(CurrentPlayer, Subtract, HP_Damage, 0); 
                        }                
                    }
                    unit.set_cp(0x124/4); // 애시드 스포어
                    SetDeathsX(CurrentPlayer, SetTo, 7*65536 + 150*16777216, 0, 0xFFFF0000);
                    unit.set_cp(0x128/4); // 애시드 스포어(2)
                    SetDeaths(CurrentPlayer, SetTo, 150*1 + 150*256 + 150*65536 + 150*16777216, 0);       
                    unit.set_cp(0x12C/4); // 애시드 스포어(3)
                    SetDeaths(CurrentPlayer, SetTo, 150, 0);       
                }  

                unit.set_cp(0x124/4); // 애시드 스포어(1-3)
                if (DeathsX(CurrentPlayer, Exactly, 6*65536, 0, 0xFF0000)) {      
                    unit.set_cp(0x60/4); // 쉴드
                    if (Deaths(CurrentPlayer, AtLeast, 34*256, 0)) {

                        SetDeaths(CurrentPlayer, Subtract, 34*256, 0); // 34
                    }
                    else if (Deaths(CurrentPlayer, AtMost, 34*256 - 1, 0)) {
                        if (Deaths(CurrentPlayer, AtLeast, 31*256, 0)) { // A3 빼기, 얘량 겹치는 숫자 없음 체크
                            
                            SetDeaths(CurrentPlayer, SetTo, 0, 0);
                            unit.set_cp(0x08/4); // 체력
                            SetDeaths(CurrentPlayer, Subtract, 1, 0);
                        }
                        else {
                            unit.set_cp(0x60/4); // 쉴드
                            const Shield = dwread_cp(0);
                            const HP_Damage = (34*256 - Shield - 3*256) / 2;
                            SetDeaths(CurrentPlayer, SetTo, 0, 0);           
                            unit.set_cp(0x08/4); // 체력
                            SetDeaths(CurrentPlayer, Subtract, HP_Damage, 0); 
                        }                
                    }
                    unit.set_cp(0x124/4); // 애시드 스포어
                    SetDeathsX(CurrentPlayer, SetTo, 10*65536 + 150*16777216, 0, 0xFFFF0000);
                    unit.set_cp(0x128/4); // 애시드 스포어(2)
                    SetDeaths(CurrentPlayer, SetTo, 150*1 + 150*256 + 150*65536 + 150*16777216, 0);       
                    unit.set_cp(0x12C/4); // 애시드 스포어(3)
                    SetDeaths(CurrentPlayer, SetTo, 150*1 + 150*256 + 150*65536 + 150*16777216, 0);      
                }  

                unit.set_cp(0x124/4); // 애시드 스포어(1-4)
                if (DeathsX(CurrentPlayer, Exactly, 9*65536, 0, 0xFF0000)) {      
                    unit.set_cp(0x60/4); // 쉴드
                    if (Deaths(CurrentPlayer, AtLeast, 37*256, 0)) {

                        SetDeaths(CurrentPlayer, Subtract, 37*256, 0); // 37
                    }
                    else if (Deaths(CurrentPlayer, AtMost, 37*256 - 1, 0)) {
                        if (Deaths(CurrentPlayer, AtLeast, 34*256, 0)) { // A3 빼기, 얘량 겹치는 숫자 없음 체크
                            
                            SetDeaths(CurrentPlayer, SetTo, 0, 0);
                            unit.set_cp(0x08/4); // 체력
                            SetDeaths(CurrentPlayer, Subtract, 1, 0);
                        }
                        else {
                            unit.set_cp(0x60/4); // 쉴드
                            const Shield = dwread_cp(0);
                            const HP_Damage = (37*256 - Shield - 3*256) / 2;
                            SetDeaths(CurrentPlayer, SetTo, 0, 0);           
                            unit.set_cp(0x08/4); // 체력
                            SetDeaths(CurrentPlayer, Subtract, HP_Damage, 0); 
                        }                
                    }
                    unit.set_cp(0x124/4); // 애시드 스포어
                    SetDeathsX(CurrentPlayer, SetTo, 10*65536 + 150*16777216, 0, 0xFFFF0000);
                    unit.set_cp(0x128/4); // 애시드 스포어(2)
                    SetDeaths(CurrentPlayer, SetTo, 150*1 + 150*256 + 150*65536 + 150*16777216, 0);       
                    unit.set_cp(0x12C/4); // 애시드 스포어(3)
                    SetDeaths(CurrentPlayer, SetTo, 150*1 + 150*256 + 150*65536 + 150*16777216, 0);      
                }  
                unit.set_cp(0x120/4); // 패러사이트
                SetDeathsX(CurrentPlayer, SetTo, 0, 0, 0xFF00);    
                unit.set_cp(0x124/4); // 애시드 스포어
                SetDeathsX(CurrentPlayer, Subtract, 1*65536, 0, 0xFF0000);
            }
            unit.set_cp(0x124/4); // 애시드 스포어
            if (DeathsX(CurrentPlayer, AtLeast, 1*65536, 0, 0xFF0000)) {
                unit.set_cp(0x08/4); // 체력
                if (Deaths(CurrentPlayer, AtMost, 0, 0)) {
                    
                    unit.set_cp(0x4C/4); // 명령
                    SetDeathsX(CurrentPlayer, SetTo, 0, 0, 0xFF00);
                }
            }
        }        
    }
    foreach(unit : P_S1A4.cploop){ // P_S1A4
		foreach(dead : unit.dying){} // 사망 시 발동
        if (Switch("Switch 27", Set)) { // 아비터 죽어도 15초 정도 유지
            unit.set_cp(0x118/4); // 스테이시스 필드
            if (DeathsX(CurrentPlayer, Exactly, 101*256, 0, 0xFF00)) { // 스테이시스 필드
                
                SetDeathsX(CurrentPlayer, SetTo, 1*256, 0, 0xFF00);
            }
        }
        
        unit.set_cp(0x120/4); // 블라인드
        if (DeathsX(CurrentPlayer, AtLeast, 1*16777216, 0, 0xFF000000)) { // 블라인드 인식

            SetDeathsX(CurrentPlayer, SetTo, 0, 0, 0xFF000000);
            unit.set_cp(0x124/4); // 애시드 스포어(1)
            SetDeathsX(CurrentPlayer, SetTo, 9*65536 + 150*16777216, 0, 0xFFFF0000);
            unit.set_cp(0x128/4); // 애시드 스포어(2)
            SetDeaths(CurrentPlayer, SetTo, 150*1 + 150*256 + 150*65536 + 150*16777216, 0);
            unit.set_cp(0x12C/4); // 애시드 스포어(3)
            SetDeaths(CurrentPlayer, SetTo, 150*1 + 150*256 + 150*65536 + 150*16777216, 0);
            unit.set_cp(0x114/4); // 인스네어
            SetDeathsX(CurrentPlayer, Add, 1*65536, 0, 0xFF0000);
        }

        if (Switch("Switch 28", Set)) { // 디바우러 죽어도 5초 정도 유지
            unit.set_cp(0x120/4); // 패러사이트
            if (DeathsX(CurrentPlayer, AtLeast, 1*256, 0, 0xFF00)) { // 패러사이트 인식
                unit.set_cp(0x124/4); // 애시드 스포어(1-1)
                if (DeathsX(CurrentPlayer, Exactly, 0, 0, 0xFF0000)) {      
                    unit.set_cp(0x60/4); // 쉴드
                    if (Deaths(CurrentPlayer, AtLeast, 28*256, 0)) {

                        SetDeaths(CurrentPlayer, Subtract, 28*256, 0); // 28
                    }
                    else if (Deaths(CurrentPlayer, AtMost, 28*256 - 1, 0)) {
                        if (Deaths(CurrentPlayer, AtLeast, 24*256, 0)) { // A4 빼기, 얘량 겹치는 숫자 없음 체크
                            
                            SetDeaths(CurrentPlayer, SetTo, 0, 0);
                            unit.set_cp(0x08/4); // 체력
                            SetDeaths(CurrentPlayer, Subtract, 1, 0);
                        }
                        else {
                            unit.set_cp(0x60/4); // 쉴드
                            const Shield = dwread_cp(0);
                            const HP_Damage = (28*256 - Shield - 4*256) / 2;
                            SetDeaths(CurrentPlayer, SetTo, 0, 0);           
                            unit.set_cp(0x08/4); // 체력
                            SetDeaths(CurrentPlayer, Subtract, HP_Damage, 0); 
                        }                
                    }
                    unit.set_cp(0x124/4); // 애시드 스포어
                    SetDeathsX(CurrentPlayer, SetTo, 4*65536 + 150*16777216, 0, 0xFFFF0000);
                    unit.set_cp(0x128/4); // 애시드 스포어(2)
                    SetDeaths(CurrentPlayer, SetTo, 150*1 + 150*256, 0);       
                }

                unit.set_cp(0x124/4); // 애시드 스포어(1-2)
                if (DeathsX(CurrentPlayer, Exactly, 3*65536, 0, 0xFF0000)) {      
                    unit.set_cp(0x60/4); // 쉴드
                    if (Deaths(CurrentPlayer, AtLeast, 31*256, 0)) {

                        SetDeaths(CurrentPlayer, Subtract, 31*256, 0); // 31
                    }
                    else if (Deaths(CurrentPlayer, AtMost, 31*256 - 1, 0)) {
                        if (Deaths(CurrentPlayer, AtLeast, 27*256, 0)) { // A4 빼기, 얘량 겹치는 숫자 없음 체크
                            
                            SetDeaths(CurrentPlayer, SetTo, 0, 0);
                            unit.set_cp(0x08/4); // 체력
                            SetDeaths(CurrentPlayer, Subtract, 1, 0);
                        }
                        else {
                            unit.set_cp(0x60/4); // 쉴드
                            const Shield = dwread_cp(0);
                            const HP_Damage = (31*256 - Shield - 4*256) / 2;
                            SetDeaths(CurrentPlayer, SetTo, 0, 0);           
                            unit.set_cp(0x08/4); // 체력
                            SetDeaths(CurrentPlayer, Subtract, HP_Damage, 0); 
                        }                
                    }
                    unit.set_cp(0x124/4); // 애시드 스포어
                    SetDeathsX(CurrentPlayer, SetTo, 7*65536 + 150*16777216, 0, 0xFFFF0000);
                    unit.set_cp(0x128/4); // 애시드 스포어(2)
                    SetDeaths(CurrentPlayer, SetTo, 150*1 + 150*256 + 150*65536 + 150*16777216, 0);       
                    unit.set_cp(0x12C/4); // 애시드 스포어(3)
                    SetDeaths(CurrentPlayer, SetTo, 150, 0);       
                }  

                unit.set_cp(0x124/4); // 애시드 스포어(1-3)
                if (DeathsX(CurrentPlayer, Exactly, 6*65536, 0, 0xFF0000)) {      
                    unit.set_cp(0x60/4); // 쉴드
                    if (Deaths(CurrentPlayer, AtLeast, 34*256, 0)) {

                        SetDeaths(CurrentPlayer, Subtract, 34*256, 0); // 34
                    }
                    else if (Deaths(CurrentPlayer, AtMost, 34*256 - 1, 0)) {
                        if (Deaths(CurrentPlayer, AtLeast, 30*256, 0)) { // A4 빼기, 얘량 겹치는 숫자 없음 체크
                            
                            SetDeaths(CurrentPlayer, SetTo, 0, 0);
                            unit.set_cp(0x08/4); // 체력
                            SetDeaths(CurrentPlayer, Subtract, 1, 0);
                        }
                        else {
                            unit.set_cp(0x60/4); // 쉴드
                            const Shield = dwread_cp(0);
                            const HP_Damage = (34*256 - Shield - 4*256) / 2;
                            SetDeaths(CurrentPlayer, SetTo, 0, 0);           
                            unit.set_cp(0x08/4); // 체력
                            SetDeaths(CurrentPlayer, Subtract, HP_Damage, 0); 
                        }                
                    }
                    unit.set_cp(0x124/4); // 애시드 스포어
                    SetDeathsX(CurrentPlayer, SetTo, 10*65536 + 150*16777216, 0, 0xFFFF0000);
                    unit.set_cp(0x128/4); // 애시드 스포어(2)
                    SetDeaths(CurrentPlayer, SetTo, 150*1 + 150*256 + 150*65536 + 150*16777216, 0);       
                    unit.set_cp(0x12C/4); // 애시드 스포어(3)
                    SetDeaths(CurrentPlayer, SetTo, 150*1 + 150*256 + 150*65536 + 150*16777216, 0);      
                }  

                unit.set_cp(0x124/4); // 애시드 스포어(1-4)
                if (DeathsX(CurrentPlayer, Exactly, 9*65536, 0, 0xFF0000)) {      
                    unit.set_cp(0x60/4); // 쉴드
                    if (Deaths(CurrentPlayer, AtLeast, 37*256, 0)) {

                        SetDeaths(CurrentPlayer, Subtract, 37*256, 0); // 37
                    }
                    else if (Deaths(CurrentPlayer, AtMost, 37*256 - 1, 0)) {
                        if (Deaths(CurrentPlayer, AtLeast, 33*256, 0)) { // A4 빼기, 얘량 겹치는 숫자 없음 체크
                            
                            SetDeaths(CurrentPlayer, SetTo, 0, 0);
                            unit.set_cp(0x08/4); // 체력
                            SetDeaths(CurrentPlayer, Subtract, 1, 0);
                        }
                        else {
                            unit.set_cp(0x60/4); // 쉴드
                            const Shield = dwread_cp(0);
                            const HP_Damage = (37*256 - Shield - 4*256) / 2;
                            SetDeaths(CurrentPlayer, SetTo, 0, 0);           
                            unit.set_cp(0x08/4); // 체력
                            SetDeaths(CurrentPlayer, Subtract, HP_Damage, 0); 
                        }                
                    }
                    unit.set_cp(0x124/4); // 애시드 스포어
                    SetDeathsX(CurrentPlayer, SetTo, 10*65536 + 150*16777216, 0, 0xFFFF0000);
                    unit.set_cp(0x128/4); // 애시드 스포어(2)
                    SetDeaths(CurrentPlayer, SetTo, 150*1 + 150*256 + 150*65536 + 150*16777216, 0);       
                    unit.set_cp(0x12C/4); // 애시드 스포어(3)
                    SetDeaths(CurrentPlayer, SetTo, 150*1 + 150*256 + 150*65536 + 150*16777216, 0);      
                }  
                unit.set_cp(0x120/4); // 패러사이트
                SetDeathsX(CurrentPlayer, SetTo, 0, 0, 0xFF00);    
                unit.set_cp(0x124/4); // 애시드 스포어
                SetDeathsX(CurrentPlayer, Subtract, 1*65536, 0, 0xFF0000);
            }
            unit.set_cp(0x124/4); // 애시드 스포어
            if (DeathsX(CurrentPlayer, AtLeast, 1*65536, 0, 0xFF0000)) {
                unit.set_cp(0x08/4); // 체력
                if (Deaths(CurrentPlayer, AtMost, 0, 0)) {
                    
                    unit.set_cp(0x4C/4); // 명령
                    SetDeathsX(CurrentPlayer, SetTo, 0, 0, 0xFF00);
                }
            }       
        }
    }
    foreach(unit : P_M1A4.cploop){ // P_M1A4
		foreach(dead : unit.dying){} // 사망 시 발동
        if (Switch("Switch 27", Set)) { // 아비터 죽어도 15초 정도 유지
            unit.set_cp(0x118/4); // 스테이시스 필드
            if (DeathsX(CurrentPlayer, Exactly, 101*256, 0, 0xFF00)) { // 스테이시스 필드
                
                SetDeathsX(CurrentPlayer, SetTo, 1*256, 0, 0xFF00);
            }
        }
        
        unit.set_cp(0x120/4); // 블라인드
        if (DeathsX(CurrentPlayer, AtLeast, 1*16777216, 0, 0xFF000000)) { // 블라인드 인식

            SetDeathsX(CurrentPlayer, SetTo, 0, 0, 0xFF000000);
            unit.set_cp(0x124/4); // 애시드 스포어(1)
            SetDeathsX(CurrentPlayer, SetTo, 9*65536 + 150*16777216, 0, 0xFFFF0000);
            unit.set_cp(0x128/4); // 애시드 스포어(2)
            SetDeaths(CurrentPlayer, SetTo, 150*1 + 150*256 + 150*65536 + 150*16777216, 0);
            unit.set_cp(0x12C/4); // 애시드 스포어(3)
            SetDeaths(CurrentPlayer, SetTo, 150*1 + 150*256 + 150*65536 + 150*16777216, 0);
            unit.set_cp(0x114/4); // 인스네어
            SetDeathsX(CurrentPlayer, Add, 1*65536, 0, 0xFF0000);
        }

        if (Switch("Switch 28", Set)) { // 디바우러 죽어도 5초 정도 유지
            unit.set_cp(0x120/4); // 패러사이트
            if (DeathsX(CurrentPlayer, AtLeast, 1*256, 0, 0xFF00)) { // 패러사이트 인식
                unit.set_cp(0x124/4); // 애시드 스포어(1-1)
                if (DeathsX(CurrentPlayer, Exactly, 0, 0, 0xFF0000)) {      
                    unit.set_cp(0x60/4); // 쉴드
                    if (Deaths(CurrentPlayer, AtLeast, 28*256, 0)) {

                        SetDeaths(CurrentPlayer, Subtract, 28*256, 0); // 28
                    }
                    else if (Deaths(CurrentPlayer, AtMost, 28*256 - 1, 0)) {
                        if (Deaths(CurrentPlayer, AtLeast, 24*256, 0)) { // A4 빼기, 얘량 겹치는 숫자 없음 체크
                            
                            SetDeaths(CurrentPlayer, SetTo, 0, 0);
                            unit.set_cp(0x08/4); // 체력
                            SetDeaths(CurrentPlayer, Subtract, 1, 0);
                        }
                        else {
                            unit.set_cp(0x60/4); // 쉴드
                            const Shield = dwread_cp(0);
                            const HP_Damage = (28*256 - Shield - 4*256)*75/100;
                            SetDeaths(CurrentPlayer, SetTo, 0, 0);           
                            unit.set_cp(0x08/4); // 체력
                            SetDeaths(CurrentPlayer, Subtract, HP_Damage, 0); 
                        }                
                    }
                    unit.set_cp(0x124/4); // 애시드 스포어
                    SetDeathsX(CurrentPlayer, SetTo, 4*65536 + 150*16777216, 0, 0xFFFF0000);
                    unit.set_cp(0x128/4); // 애시드 스포어(2)
                    SetDeaths(CurrentPlayer, SetTo, 150*1 + 150*256, 0);       
                }

                unit.set_cp(0x124/4); // 애시드 스포어(1-2)
                if (DeathsX(CurrentPlayer, Exactly, 3*65536, 0, 0xFF0000)) {      
                    unit.set_cp(0x60/4); // 쉴드
                    if (Deaths(CurrentPlayer, AtLeast, 31*256, 0)) {

                        SetDeaths(CurrentPlayer, Subtract, 31*256, 0); // 31
                    }
                    else if (Deaths(CurrentPlayer, AtMost, 31*256 - 1, 0)) {
                        if (Deaths(CurrentPlayer, AtLeast, 27*256, 0)) { // A4 빼기, 얘량 겹치는 숫자 없음 체크
                            
                            SetDeaths(CurrentPlayer, SetTo, 0, 0);
                            unit.set_cp(0x08/4); // 체력
                            SetDeaths(CurrentPlayer, Subtract, 1, 0);
                        }
                        else {
                            unit.set_cp(0x60/4); // 쉴드
                            const Shield = dwread_cp(0);
                            const HP_Damage = (31*256 - Shield - 4*256)*75/100;
                            SetDeaths(CurrentPlayer, SetTo, 0, 0);           
                            unit.set_cp(0x08/4); // 체력
                            SetDeaths(CurrentPlayer, Subtract, HP_Damage, 0); 
                        }                
                    }
                    unit.set_cp(0x124/4); // 애시드 스포어
                    SetDeathsX(CurrentPlayer, SetTo, 7*65536 + 150*16777216, 0, 0xFFFF0000);
                    unit.set_cp(0x128/4); // 애시드 스포어(2)
                    SetDeaths(CurrentPlayer, SetTo, 150*1 + 150*256 + 150*65536 + 150*16777216, 0);       
                    unit.set_cp(0x12C/4); // 애시드 스포어(3)
                    SetDeaths(CurrentPlayer, SetTo, 150, 0);       
                }  

                unit.set_cp(0x124/4); // 애시드 스포어(1-3)
                if (DeathsX(CurrentPlayer, Exactly, 6*65536, 0, 0xFF0000)) {      
                    unit.set_cp(0x60/4); // 쉴드
                    if (Deaths(CurrentPlayer, AtLeast, 34*256, 0)) {

                        SetDeaths(CurrentPlayer, Subtract, 34*256, 0); // 34
                    }
                    else if (Deaths(CurrentPlayer, AtMost, 34*256 - 1, 0)) {
                        if (Deaths(CurrentPlayer, AtLeast, 30*256, 0)) { // A4 빼기, 얘량 겹치는 숫자 없음 체크
                            
                            SetDeaths(CurrentPlayer, SetTo, 0, 0);
                            unit.set_cp(0x08/4); // 체력
                            SetDeaths(CurrentPlayer, Subtract, 1, 0);
                        }
                        else {
                            unit.set_cp(0x60/4); // 쉴드
                            const Shield = dwread_cp(0);
                            const HP_Damage = (34*256 - Shield - 4*256)*75/100;
                            SetDeaths(CurrentPlayer, SetTo, 0, 0);           
                            unit.set_cp(0x08/4); // 체력
                            SetDeaths(CurrentPlayer, Subtract, HP_Damage, 0); 
                        }                
                    }
                    unit.set_cp(0x124/4); // 애시드 스포어
                    SetDeathsX(CurrentPlayer, SetTo, 10*65536 + 150*16777216, 0, 0xFFFF0000);
                    unit.set_cp(0x128/4); // 애시드 스포어(2)
                    SetDeaths(CurrentPlayer, SetTo, 150*1 + 150*256 + 150*65536 + 150*16777216, 0);       
                    unit.set_cp(0x12C/4); // 애시드 스포어(3)
                    SetDeaths(CurrentPlayer, SetTo, 150*1 + 150*256 + 150*65536 + 150*16777216, 0);      
                }  

                unit.set_cp(0x124/4); // 애시드 스포어(1-4)
                if (DeathsX(CurrentPlayer, Exactly, 9*65536, 0, 0xFF0000)) {      
                    unit.set_cp(0x60/4); // 쉴드
                    if (Deaths(CurrentPlayer, AtLeast, 37*256, 0)) {

                        SetDeaths(CurrentPlayer, Subtract, 37*256, 0); // 37
                    }
                    else if (Deaths(CurrentPlayer, AtMost, 37*256 - 1, 0)) {
                        if (Deaths(CurrentPlayer, AtLeast, 33*256, 0)) { // A4 빼기, 얘량 겹치는 숫자 없음 체크
                            
                            SetDeaths(CurrentPlayer, SetTo, 0, 0);
                            unit.set_cp(0x08/4); // 체력
                            SetDeaths(CurrentPlayer, Subtract, 1, 0);
                        }
                        else {
                            unit.set_cp(0x60/4); // 쉴드
                            const Shield = dwread_cp(0);
                            const HP_Damage = (37*256 - Shield - 4*256)*75/100;
                            SetDeaths(CurrentPlayer, SetTo, 0, 0);           
                            unit.set_cp(0x08/4); // 체력
                            SetDeaths(CurrentPlayer, Subtract, HP_Damage, 0); 
                        }                
                    }
                    unit.set_cp(0x124/4); // 애시드 스포어
                    SetDeathsX(CurrentPlayer, SetTo, 10*65536 + 150*16777216, 0, 0xFFFF0000);
                    unit.set_cp(0x128/4); // 애시드 스포어(2)
                    SetDeaths(CurrentPlayer, SetTo, 150*1 + 150*256 + 150*65536 + 150*16777216, 0);       
                    unit.set_cp(0x12C/4); // 애시드 스포어(3)
                    SetDeaths(CurrentPlayer, SetTo, 150*1 + 150*256 + 150*65536 + 150*16777216, 0);      
                }  
                unit.set_cp(0x120/4); // 패러사이트
                SetDeathsX(CurrentPlayer, SetTo, 0, 0, 0xFF00);    
                unit.set_cp(0x124/4); // 애시드 스포어
                SetDeathsX(CurrentPlayer, Subtract, 1*65536, 0, 0xFF0000);
            }
            unit.set_cp(0x124/4); // 애시드 스포어
            if (DeathsX(CurrentPlayer, AtLeast, 1*65536, 0, 0xFF0000)) {
                unit.set_cp(0x08/4); // 체력
                if (Deaths(CurrentPlayer, AtMost, 0, 0)) {
                    
                    unit.set_cp(0x4C/4); // 명령
                    SetDeathsX(CurrentPlayer, SetTo, 0, 0, 0xFF00);
                }
            }
        }        
    }
    foreach(unit : P_B1A3.cploop){ // P_B1A3
		foreach(dead : unit.dying){} // 사망 시 발동
        if (Switch("Switch 27", Set)) { // 아비터 죽어도 15초 정도 유지
            unit.set_cp(0x118/4); // 스테이시스 필드
            if (DeathsX(CurrentPlayer, Exactly, 101*256, 0, 0xFF00)) { // 스테이시스 필드
                
                SetDeathsX(CurrentPlayer, SetTo, 1*256, 0, 0xFF00);
            }
        }
        
        unit.set_cp(0x120/4); // 블라인드
        if (DeathsX(CurrentPlayer, AtLeast, 1*16777216, 0, 0xFF000000)) { // 블라인드 인식

            SetDeathsX(CurrentPlayer, SetTo, 0, 0, 0xFF000000);
            unit.set_cp(0x124/4); // 애시드 스포어(1)
            SetDeathsX(CurrentPlayer, SetTo, 9*65536 + 150*16777216, 0, 0xFFFF0000);
            unit.set_cp(0x128/4); // 애시드 스포어(2)
            SetDeaths(CurrentPlayer, SetTo, 150*1 + 150*256 + 150*65536 + 150*16777216, 0);
            unit.set_cp(0x12C/4); // 애시드 스포어(3)
            SetDeaths(CurrentPlayer, SetTo, 150*1 + 150*256 + 150*65536 + 150*16777216, 0);
            unit.set_cp(0x114/4); // 인스네어
            SetDeathsX(CurrentPlayer, Add, 1*65536, 0, 0xFF0000);
        }

        if (Switch("Switch 28", Set)) { // 디바우러 죽어도 5초 정도 유지
            unit.set_cp(0x120/4); // 패러사이트
            if (DeathsX(CurrentPlayer, AtLeast, 1*256, 0, 0xFF00)) { // 패러사이트 인식
                unit.set_cp(0x124/4); // 애시드 스포어(1-1)
                if (DeathsX(CurrentPlayer, Exactly, 0, 0, 0xFF0000)) {      
                    unit.set_cp(0x60/4); // 쉴드
                    if (Deaths(CurrentPlayer, AtLeast, 28*256, 0)) {

                        SetDeaths(CurrentPlayer, Subtract, 28*256, 0); // 28
                    }
                    else if (Deaths(CurrentPlayer, AtMost, 28*256 - 1, 0)) {
                        if (Deaths(CurrentPlayer, AtLeast, 25*256, 0)) { // A3 빼기, 얘량 겹치는 숫자 없음 체크
                            
                            SetDeaths(CurrentPlayer, SetTo, 0, 0);
                            unit.set_cp(0x08/4); // 체력
                            SetDeaths(CurrentPlayer, Subtract, 1, 0);
                        }
                        else {
                            unit.set_cp(0x60/4); // 쉴드
                            const Shield = dwread_cp(0);
                            const HP_Damage = 28*256 - Shield - 3*256;
                            SetDeaths(CurrentPlayer, SetTo, 0, 0);           
                            unit.set_cp(0x08/4); // 체력
                            SetDeaths(CurrentPlayer, Subtract, HP_Damage, 0); 
                        }                
                    }
                    unit.set_cp(0x124/4); // 애시드 스포어
                    SetDeathsX(CurrentPlayer, SetTo, 4*65536 + 150*16777216, 0, 0xFFFF0000);
                    unit.set_cp(0x128/4); // 애시드 스포어(2)
                    SetDeaths(CurrentPlayer, SetTo, 150*1 + 150*256, 0);       
                }

                unit.set_cp(0x124/4); // 애시드 스포어(1-2)
                if (DeathsX(CurrentPlayer, Exactly, 3*65536, 0, 0xFF0000)) {      
                    unit.set_cp(0x60/4); // 쉴드
                    if (Deaths(CurrentPlayer, AtLeast, 31*256, 0)) {

                        SetDeaths(CurrentPlayer, Subtract, 31*256, 0); // 31
                    }
                    else if (Deaths(CurrentPlayer, AtMost, 31*256 - 1, 0)) {
                        if (Deaths(CurrentPlayer, AtLeast, 28*256, 0)) { // A3 빼기, 얘량 겹치는 숫자 없음 체크
                            
                            SetDeaths(CurrentPlayer, SetTo, 0, 0);
                            unit.set_cp(0x08/4); // 체력
                            SetDeaths(CurrentPlayer, Subtract, 1, 0);
                        }
                        else {
                            unit.set_cp(0x60/4); // 쉴드
                            const Shield = dwread_cp(0);
                            const HP_Damage = 31*256 - Shield - 3*256;
                            SetDeaths(CurrentPlayer, SetTo, 0, 0);           
                            unit.set_cp(0x08/4); // 체력
                            SetDeaths(CurrentPlayer, Subtract, HP_Damage, 0); 
                        }                
                    }
                    unit.set_cp(0x124/4); // 애시드 스포어
                    SetDeathsX(CurrentPlayer, SetTo, 7*65536 + 150*16777216, 0, 0xFFFF0000);
                    unit.set_cp(0x128/4); // 애시드 스포어(2)
                    SetDeaths(CurrentPlayer, SetTo, 150*1 + 150*256 + 150*65536 + 150*16777216, 0);       
                    unit.set_cp(0x12C/4); // 애시드 스포어(3)
                    SetDeaths(CurrentPlayer, SetTo, 150, 0);       
                }  

                unit.set_cp(0x124/4); // 애시드 스포어(1-3)
                if (DeathsX(CurrentPlayer, Exactly, 6*65536, 0, 0xFF0000)) {      
                    unit.set_cp(0x60/4); // 쉴드
                    if (Deaths(CurrentPlayer, AtLeast, 34*256, 0)) {

                        SetDeaths(CurrentPlayer, Subtract, 34*256, 0); // 34
                    }
                    else if (Deaths(CurrentPlayer, AtMost, 34*256 - 1, 0)) {
                        if (Deaths(CurrentPlayer, AtLeast, 31*256, 0)) { // A3 빼기, 얘량 겹치는 숫자 없음 체크
                            
                            SetDeaths(CurrentPlayer, SetTo, 0, 0);
                            unit.set_cp(0x08/4); // 체력
                            SetDeaths(CurrentPlayer, Subtract, 1, 0);
                        }
                        else {
                            unit.set_cp(0x60/4); // 쉴드
                            const Shield = dwread_cp(0);
                            const HP_Damage = 34*256 - Shield - 3*256;
                            SetDeaths(CurrentPlayer, SetTo, 0, 0);           
                            unit.set_cp(0x08/4); // 체력
                            SetDeaths(CurrentPlayer, Subtract, HP_Damage, 0); 
                        }                
                    }
                    unit.set_cp(0x124/4); // 애시드 스포어
                    SetDeathsX(CurrentPlayer, SetTo, 10*65536 + 150*16777216, 0, 0xFFFF0000);
                    unit.set_cp(0x128/4); // 애시드 스포어(2)
                    SetDeaths(CurrentPlayer, SetTo, 150*1 + 150*256 + 150*65536 + 150*16777216, 0);       
                    unit.set_cp(0x12C/4); // 애시드 스포어(3)
                    SetDeaths(CurrentPlayer, SetTo, 150*1 + 150*256 + 150*65536 + 150*16777216, 0);      
                }  

                unit.set_cp(0x124/4); // 애시드 스포어(1-4)
                if (DeathsX(CurrentPlayer, Exactly, 9*65536, 0, 0xFF0000)) {      
                    unit.set_cp(0x60/4); // 쉴드
                    if (Deaths(CurrentPlayer, AtLeast, 37*256, 0)) {

                        SetDeaths(CurrentPlayer, Subtract, 37*256, 0); // 37
                    }
                    else if (Deaths(CurrentPlayer, AtMost, 37*256 - 1, 0)) {
                        if (Deaths(CurrentPlayer, AtLeast, 34*256, 0)) { // A3 빼기, 얘량 겹치는 숫자 없음 체크
                            
                            SetDeaths(CurrentPlayer, SetTo, 0, 0);
                            unit.set_cp(0x08/4); // 체력
                            SetDeaths(CurrentPlayer, Subtract, 1, 0);
                        }
                        else {
                            unit.set_cp(0x60/4); // 쉴드
                            const Shield = dwread_cp(0);
                            const HP_Damage = 37*256 - Shield - 3*256;
                            SetDeaths(CurrentPlayer, SetTo, 0, 0);           
                            unit.set_cp(0x08/4); // 체력
                            SetDeaths(CurrentPlayer, Subtract, HP_Damage, 0); 
                        }                
                    }
                    unit.set_cp(0x124/4); // 애시드 스포어
                    SetDeathsX(CurrentPlayer, SetTo, 10*65536 + 150*16777216, 0, 0xFFFF0000);
                    unit.set_cp(0x128/4); // 애시드 스포어(2)
                    SetDeaths(CurrentPlayer, SetTo, 150*1 + 150*256 + 150*65536 + 150*16777216, 0);       
                    unit.set_cp(0x12C/4); // 애시드 스포어(3)
                    SetDeaths(CurrentPlayer, SetTo, 150*1 + 150*256 + 150*65536 + 150*16777216, 0);      
                }  
                unit.set_cp(0x120/4); // 패러사이트
                SetDeathsX(CurrentPlayer, SetTo, 0, 0, 0xFF00);    
                unit.set_cp(0x124/4); // 애시드 스포어
                SetDeathsX(CurrentPlayer, Subtract, 1*65536, 0, 0xFF0000);
            }
            unit.set_cp(0x124/4); // 애시드 스포어
            if (DeathsX(CurrentPlayer, AtLeast, 1*65536, 0, 0xFF0000)) {
                unit.set_cp(0x08/4); // 체력
                if (Deaths(CurrentPlayer, AtMost, 0, 0)) {
                    
                    unit.set_cp(0x4C/4); // 명령
                    SetDeathsX(CurrentPlayer, SetTo, 0, 0, 0xFF00);
                }
            }
        }        
    }
    foreach(unit : P_B1A4.cploop){ // P_B1A4
		foreach(dead : unit.dying){} // 사망 시 발동
        if (Switch("Switch 27", Set)) { // 아비터 죽어도 15초 정도 유지
            unit.set_cp(0x118/4); // 스테이시스 필드
            if (DeathsX(CurrentPlayer, Exactly, 101*256, 0, 0xFF00)) { // 스테이시스 필드
                
                SetDeathsX(CurrentPlayer, SetTo, 1*256, 0, 0xFF00);
            }
        }
        
        unit.set_cp(0x120/4); // 블라인드
        if (DeathsX(CurrentPlayer, AtLeast, 1*16777216, 0, 0xFF000000)) { // 블라인드 인식

            SetDeathsX(CurrentPlayer, SetTo, 0, 0, 0xFF000000);
            unit.set_cp(0x124/4); // 애시드 스포어(1)
            SetDeathsX(CurrentPlayer, SetTo, 9*65536 + 150*16777216, 0, 0xFFFF0000);
            unit.set_cp(0x128/4); // 애시드 스포어(2)
            SetDeaths(CurrentPlayer, SetTo, 150*1 + 150*256 + 150*65536 + 150*16777216, 0);
            unit.set_cp(0x12C/4); // 애시드 스포어(3)
            SetDeaths(CurrentPlayer, SetTo, 150*1 + 150*256 + 150*65536 + 150*16777216, 0);
            unit.set_cp(0x114/4); // 인스네어
            SetDeathsX(CurrentPlayer, Add, 1*65536, 0, 0xFF0000);
        }

        if (Switch("Switch 28", Set)) { // 디바우러 죽어도 5초 정도 유지
            unit.set_cp(0x120/4); // 패러사이트
            if (DeathsX(CurrentPlayer, AtLeast, 1*256, 0, 0xFF00)) { // 패러사이트 인식
                unit.set_cp(0x124/4); // 애시드 스포어(1-1)
                if (DeathsX(CurrentPlayer, Exactly, 0, 0, 0xFF0000)) {      
                    unit.set_cp(0x60/4); // 쉴드
                    if (Deaths(CurrentPlayer, AtLeast, 28*256, 0)) {

                        SetDeaths(CurrentPlayer, Subtract, 28*256, 0); // 28
                    }
                    else if (Deaths(CurrentPlayer, AtMost, 28*256 - 1, 0)) {
                        if (Deaths(CurrentPlayer, AtLeast, 24*256, 0)) { // A4 빼기, 얘량 겹치는 숫자 없음 체크
                            
                            SetDeaths(CurrentPlayer, SetTo, 0, 0);
                            unit.set_cp(0x08/4); // 체력
                            SetDeaths(CurrentPlayer, Subtract, 1, 0);
                        }
                        else {
                            unit.set_cp(0x60/4); // 쉴드
                            const Shield = dwread_cp(0);
                            const HP_Damage = 28*256 - Shield - 4*256;
                            SetDeaths(CurrentPlayer, SetTo, 0, 0);           
                            unit.set_cp(0x08/4); // 체력
                            SetDeaths(CurrentPlayer, Subtract, HP_Damage, 0); 
                        }                
                    }
                    unit.set_cp(0x124/4); // 애시드 스포어
                    SetDeathsX(CurrentPlayer, SetTo, 4*65536 + 150*16777216, 0, 0xFFFF0000);
                    unit.set_cp(0x128/4); // 애시드 스포어(2)
                    SetDeaths(CurrentPlayer, SetTo, 150*1 + 150*256, 0);       
                }

                unit.set_cp(0x124/4); // 애시드 스포어(1-2)
                if (DeathsX(CurrentPlayer, Exactly, 3*65536, 0, 0xFF0000)) {      
                    unit.set_cp(0x60/4); // 쉴드
                    if (Deaths(CurrentPlayer, AtLeast, 31*256, 0)) {

                        SetDeaths(CurrentPlayer, Subtract, 31*256, 0); // 31
                    }
                    else if (Deaths(CurrentPlayer, AtMost, 31*256 - 1, 0)) {
                        if (Deaths(CurrentPlayer, AtLeast, 27*256, 0)) { // A4 빼기, 얘량 겹치는 숫자 없음 체크
                            
                            SetDeaths(CurrentPlayer, SetTo, 0, 0);
                            unit.set_cp(0x08/4); // 체력
                            SetDeaths(CurrentPlayer, Subtract, 1, 0);
                        }
                        else {
                            unit.set_cp(0x60/4); // 쉴드
                            const Shield = dwread_cp(0);
                            const HP_Damage = 31*256 - Shield - 4*256;
                            SetDeaths(CurrentPlayer, SetTo, 0, 0);           
                            unit.set_cp(0x08/4); // 체력
                            SetDeaths(CurrentPlayer, Subtract, HP_Damage, 0); 
                        }                
                    }
                    unit.set_cp(0x124/4); // 애시드 스포어
                    SetDeathsX(CurrentPlayer, SetTo, 7*65536 + 150*16777216, 0, 0xFFFF0000);
                    unit.set_cp(0x128/4); // 애시드 스포어(2)
                    SetDeaths(CurrentPlayer, SetTo, 150*1 + 150*256 + 150*65536 + 150*16777216, 0);       
                    unit.set_cp(0x12C/4); // 애시드 스포어(3)
                    SetDeaths(CurrentPlayer, SetTo, 150, 0);       
                }  

                unit.set_cp(0x124/4); // 애시드 스포어(1-3)
                if (DeathsX(CurrentPlayer, Exactly, 6*65536, 0, 0xFF0000)) {      
                    unit.set_cp(0x60/4); // 쉴드
                    if (Deaths(CurrentPlayer, AtLeast, 34*256, 0)) {

                        SetDeaths(CurrentPlayer, Subtract, 34*256, 0); // 34
                    }
                    else if (Deaths(CurrentPlayer, AtMost, 34*256 - 1, 0)) {
                        if (Deaths(CurrentPlayer, AtLeast, 30*256, 0)) { // A4 빼기, 얘량 겹치는 숫자 없음 체크
                            
                            SetDeaths(CurrentPlayer, SetTo, 0, 0);
                            unit.set_cp(0x08/4); // 체력
                            SetDeaths(CurrentPlayer, Subtract, 1, 0);
                        }
                        else {
                            unit.set_cp(0x60/4); // 쉴드
                            const Shield = dwread_cp(0);
                            const HP_Damage = 34*256 - Shield - 4*256;
                            SetDeaths(CurrentPlayer, SetTo, 0, 0);           
                            unit.set_cp(0x08/4); // 체력
                            SetDeaths(CurrentPlayer, Subtract, HP_Damage, 0); 
                        }                
                    }
                    unit.set_cp(0x124/4); // 애시드 스포어
                    SetDeathsX(CurrentPlayer, SetTo, 10*65536 + 150*16777216, 0, 0xFFFF0000);
                    unit.set_cp(0x128/4); // 애시드 스포어(2)
                    SetDeaths(CurrentPlayer, SetTo, 150*1 + 150*256 + 150*65536 + 150*16777216, 0);       
                    unit.set_cp(0x12C/4); // 애시드 스포어(3)
                    SetDeaths(CurrentPlayer, SetTo, 150*1 + 150*256 + 150*65536 + 150*16777216, 0);      
                }  

                unit.set_cp(0x124/4); // 애시드 스포어(1-4)
                if (DeathsX(CurrentPlayer, Exactly, 9*65536, 0, 0xFF0000)) {      
                    unit.set_cp(0x60/4); // 쉴드
                    if (Deaths(CurrentPlayer, AtLeast, 37*256, 0)) {

                        SetDeaths(CurrentPlayer, Subtract, 37*256, 0); // 37
                    }
                    else if (Deaths(CurrentPlayer, AtMost, 37*256 - 1, 0)) {
                        if (Deaths(CurrentPlayer, AtLeast, 33*256, 0)) { // A4 빼기, 얘량 겹치는 숫자 없음 체크
                            
                            SetDeaths(CurrentPlayer, SetTo, 0, 0);
                            unit.set_cp(0x08/4); // 체력
                            SetDeaths(CurrentPlayer, Subtract, 1, 0);
                        }
                        else {
                            unit.set_cp(0x60/4); // 쉴드
                            const Shield = dwread_cp(0);
                            const HP_Damage = 37*256 - Shield - 4*256;
                            SetDeaths(CurrentPlayer, SetTo, 0, 0);           
                            unit.set_cp(0x08/4); // 체력
                            SetDeaths(CurrentPlayer, Subtract, HP_Damage, 0); 
                        }                
                    }
                    unit.set_cp(0x124/4); // 애시드 스포어
                    SetDeathsX(CurrentPlayer, SetTo, 10*65536 + 150*16777216, 0, 0xFFFF0000);
                    unit.set_cp(0x128/4); // 애시드 스포어(2)
                    SetDeaths(CurrentPlayer, SetTo, 150*1 + 150*256 + 150*65536 + 150*16777216, 0);       
                    unit.set_cp(0x12C/4); // 애시드 스포어(3)
                    SetDeaths(CurrentPlayer, SetTo, 150*1 + 150*256 + 150*65536 + 150*16777216, 0);      
                }  
                unit.set_cp(0x120/4); // 패러사이트
                SetDeathsX(CurrentPlayer, SetTo, 0, 0, 0xFF00);    
                unit.set_cp(0x124/4); // 애시드 스포어
                SetDeathsX(CurrentPlayer, Subtract, 1*65536, 0, 0xFF0000);
            }
            unit.set_cp(0x124/4); // 애시드 스포어
            if (DeathsX(CurrentPlayer, AtLeast, 1*65536, 0, 0xFF0000)) {
                unit.set_cp(0x08/4); // 체력
                if (Deaths(CurrentPlayer, AtMost, 0, 0)) {
                    
                    unit.set_cp(0x4C/4); // 명령
                    SetDeathsX(CurrentPlayer, SetTo, 0, 0, 0xFF00);
                }
            }
        }        
    }
    foreach(unit : P_B1A7.cploop){ // P_B1A7
		foreach(dead : unit.dying){} // 사망 시 발동
        if (Switch("Switch 27", Set)) { // 아비터 죽어도 15초 정도 유지
            unit.set_cp(0x118/4); // 스테이시스 필드
            if (DeathsX(CurrentPlayer, Exactly, 101*256, 0, 0xFF00)) { // 스테이시스 필드
                
                SetDeathsX(CurrentPlayer, SetTo, 1*256, 0, 0xFF00);
            }
        }
        
        unit.set_cp(0x120/4); // 블라인드
        if (DeathsX(CurrentPlayer, AtLeast, 1*16777216, 0, 0xFF000000)) { // 블라인드 인식

            SetDeathsX(CurrentPlayer, SetTo, 0, 0, 0xFF000000);
            unit.set_cp(0x124/4); // 애시드 스포어(1)
            SetDeathsX(CurrentPlayer, SetTo, 9*65536 + 150*16777216, 0, 0xFFFF0000);
            unit.set_cp(0x128/4); // 애시드 스포어(2)
            SetDeaths(CurrentPlayer, SetTo, 150*1 + 150*256 + 150*65536 + 150*16777216, 0);
            unit.set_cp(0x12C/4); // 애시드 스포어(3)
            SetDeaths(CurrentPlayer, SetTo, 150*1 + 150*256 + 150*65536 + 150*16777216, 0);
            unit.set_cp(0x114/4); // 인스네어
            SetDeathsX(CurrentPlayer, Add, 1*65536, 0, 0xFF0000);
        }

        if (Switch("Switch 28", Set)) { // 디바우러 죽어도 5초 정도 유지
            unit.set_cp(0x120/4); // 패러사이트
            if (DeathsX(CurrentPlayer, AtLeast, 1*256, 0, 0xFF00)) { // 패러사이트 인식
                unit.set_cp(0x124/4); // 애시드 스포어(1-1)
                if (DeathsX(CurrentPlayer, Exactly, 0, 0, 0xFF0000)) {      
                    unit.set_cp(0x60/4); // 쉴드
                    if (Deaths(CurrentPlayer, AtLeast, 28*256, 0)) {

                        SetDeaths(CurrentPlayer, Subtract, 28*256, 0); // 28
                    }
                    else if (Deaths(CurrentPlayer, AtMost, 28*256 - 1, 0)) {
                        if (Deaths(CurrentPlayer, AtLeast, 21*256, 0)) { // A7 빼기, 얘량 겹치는 숫자 없음 체크
                            
                            SetDeaths(CurrentPlayer, SetTo, 0, 0);
                            unit.set_cp(0x08/4); // 체력
                            SetDeaths(CurrentPlayer, Subtract, 1, 0);
                        }
                        else {
                            unit.set_cp(0x60/4); // 쉴드
                            const Shield = dwread_cp(0);
                            const HP_Damage = 28*256 - Shield - 7*256;
                            SetDeaths(CurrentPlayer, SetTo, 0, 0);           
                            unit.set_cp(0x08/4); // 체력
                            SetDeaths(CurrentPlayer, Subtract, HP_Damage, 0); 
                        }                
                    }
                    unit.set_cp(0x124/4); // 애시드 스포어
                    SetDeathsX(CurrentPlayer, SetTo, 4*65536 + 150*16777216, 0, 0xFFFF0000);
                    unit.set_cp(0x128/4); // 애시드 스포어(2)
                    SetDeaths(CurrentPlayer, SetTo, 150*1 + 150*256, 0);       
                }

                unit.set_cp(0x124/4); // 애시드 스포어(1-2)
                if (DeathsX(CurrentPlayer, Exactly, 3*65536, 0, 0xFF0000)) {      
                    unit.set_cp(0x60/4); // 쉴드
                    if (Deaths(CurrentPlayer, AtLeast, 31*256, 0)) {

                        SetDeaths(CurrentPlayer, Subtract, 31*256, 0); // 31
                    }
                    else if (Deaths(CurrentPlayer, AtMost, 31*256 - 1, 0)) {
                        if (Deaths(CurrentPlayer, AtLeast, 24*256, 0)) { // A7 빼기, 얘량 겹치는 숫자 없음 체크
                            
                            SetDeaths(CurrentPlayer, SetTo, 0, 0);
                            unit.set_cp(0x08/4); // 체력
                            SetDeaths(CurrentPlayer, Subtract, 1, 0);
                        }
                        else {
                            unit.set_cp(0x60/4); // 쉴드
                            const Shield = dwread_cp(0);
                            const HP_Damage = 31*256 - Shield - 7*256;
                            SetDeaths(CurrentPlayer, SetTo, 0, 0);           
                            unit.set_cp(0x08/4); // 체력
                            SetDeaths(CurrentPlayer, Subtract, HP_Damage, 0); 
                        }                
                    }
                    unit.set_cp(0x124/4); // 애시드 스포어
                    SetDeathsX(CurrentPlayer, SetTo, 7*65536 + 150*16777216, 0, 0xFFFF0000);
                    unit.set_cp(0x128/4); // 애시드 스포어(2)
                    SetDeaths(CurrentPlayer, SetTo, 150*1 + 150*256 + 150*65536 + 150*16777216, 0);       
                    unit.set_cp(0x12C/4); // 애시드 스포어(3)
                    SetDeaths(CurrentPlayer, SetTo, 150, 0);       
                }  

                unit.set_cp(0x124/4); // 애시드 스포어(1-3)
                if (DeathsX(CurrentPlayer, Exactly, 6*65536, 0, 0xFF0000)) {      
                    unit.set_cp(0x60/4); // 쉴드
                    if (Deaths(CurrentPlayer, AtLeast, 34*256, 0)) {

                        SetDeaths(CurrentPlayer, Subtract, 34*256, 0); // 34
                    }
                    else if (Deaths(CurrentPlayer, AtMost, 34*256 - 1, 0)) {
                        if (Deaths(CurrentPlayer, AtLeast, 27*256, 0)) { // A7 빼기, 얘량 겹치는 숫자 없음 체크
                            
                            SetDeaths(CurrentPlayer, SetTo, 0, 0);
                            unit.set_cp(0x08/4); // 체력
                            SetDeaths(CurrentPlayer, Subtract, 1, 0);
                        }
                        else {
                            unit.set_cp(0x60/4); // 쉴드
                            const Shield = dwread_cp(0);
                            const HP_Damage = 34*256 - Shield - 7*256;
                            SetDeaths(CurrentPlayer, SetTo, 0, 0);           
                            unit.set_cp(0x08/4); // 체력
                            SetDeaths(CurrentPlayer, Subtract, HP_Damage, 0); 
                        }                
                    }
                    unit.set_cp(0x124/4); // 애시드 스포어
                    SetDeathsX(CurrentPlayer, SetTo, 10*65536 + 150*16777216, 0, 0xFFFF0000);
                    unit.set_cp(0x128/4); // 애시드 스포어(2)
                    SetDeaths(CurrentPlayer, SetTo, 150*1 + 150*256 + 150*65536 + 150*16777216, 0);       
                    unit.set_cp(0x12C/4); // 애시드 스포어(3)
                    SetDeaths(CurrentPlayer, SetTo, 150*1 + 150*256 + 150*65536 + 150*16777216, 0);      
                }  

                unit.set_cp(0x124/4); // 애시드 스포어(1-4)
                if (DeathsX(CurrentPlayer, Exactly, 9*65536, 0, 0xFF0000)) {      
                    unit.set_cp(0x60/4); // 쉴드
                    if (Deaths(CurrentPlayer, AtLeast, 37*256, 0)) {

                        SetDeaths(CurrentPlayer, Subtract, 37*256, 0); // 37
                    }
                    else if (Deaths(CurrentPlayer, AtMost, 37*256 - 1, 0)) {
                        if (Deaths(CurrentPlayer, AtLeast, 30*256, 0)) { // A7 빼기, 얘량 겹치는 숫자 없음 체크
                            
                            SetDeaths(CurrentPlayer, SetTo, 0, 0);
                            unit.set_cp(0x08/4); // 체력
                            SetDeaths(CurrentPlayer, Subtract, 1, 0);
                        }
                        else {
                            unit.set_cp(0x60/4); // 쉴드
                            const Shield = dwread_cp(0);
                            const HP_Damage = 37*256 - Shield - 7*256;
                            SetDeaths(CurrentPlayer, SetTo, 0, 0);           
                            unit.set_cp(0x08/4); // 체력
                            SetDeaths(CurrentPlayer, Subtract, HP_Damage, 0); 
                        }                
                    }
                    unit.set_cp(0x124/4); // 애시드 스포어
                    SetDeathsX(CurrentPlayer, SetTo, 10*65536 + 150*16777216, 0, 0xFFFF0000);
                    unit.set_cp(0x128/4); // 애시드 스포어(2)
                    SetDeaths(CurrentPlayer, SetTo, 150*1 + 150*256 + 150*65536 + 150*16777216, 0);       
                    unit.set_cp(0x12C/4); // 애시드 스포어(3)
                    SetDeaths(CurrentPlayer, SetTo, 150*1 + 150*256 + 150*65536 + 150*16777216, 0);      
                }  
                unit.set_cp(0x120/4); // 패러사이트
                SetDeathsX(CurrentPlayer, SetTo, 0, 0, 0xFF00);    
                unit.set_cp(0x124/4); // 애시드 스포어
                SetDeathsX(CurrentPlayer, Subtract, 1*65536, 0, 0xFF0000);
            }
            unit.set_cp(0x124/4); // 애시드 스포어
            if (DeathsX(CurrentPlayer, AtLeast, 1*65536, 0, 0xFF0000)) {
                unit.set_cp(0x08/4); // 체력
                if (Deaths(CurrentPlayer, AtMost, 0, 0)) {
                    
                    unit.set_cp(0x4C/4); // 명령
                    SetDeathsX(CurrentPlayer, SetTo, 0, 0, 0xFF00);
                }
            }
        }        
    }
    foreach(unit : SpiderMine.cploop){ // SpiderMine
		foreach(dead : unit.dying){} // 사망 시 발동
        unit.set_cp(0x120/4); // 패러사이트
        if (DeathsX(CurrentPlayer, AtLeast, 1*256, 0, 0xFF00)) { // 패러사이트 인식

            SetDeathsX(CurrentPlayer, SetTo, 0, 0, 0xFF00);
            unit.set_cp(0x4C/4); // 명령
            SetDeathsX(CurrentPlayer, SetTo, 0, 0, 0xFF00);
        } 

        unit.set_cp(0x120/4); // 블라인드
        if (DeathsX(CurrentPlayer, AtLeast, 1*16777216, 0, 0xFF000000)) { // 블라인드 인식

            SetDeathsX(CurrentPlayer, SetTo, 0, 0, 0xFF000000);
            unit.set_cp(0x124/4); // 애시드 스포어(1)
            SetDeathsX(CurrentPlayer, SetTo, 9*65536 + 150*16777216, 0, 0xFFFF0000);
            unit.set_cp(0x128/4); // 애시드 스포어(2)
            SetDeaths(CurrentPlayer, SetTo, 150*1 + 150*256 + 150*65536 + 150*16777216, 0);
            unit.set_cp(0x12C/4); // 애시드 스포어(3)
            SetDeaths(CurrentPlayer, SetTo, 150*1 + 150*256 + 150*65536 + 150*16777216, 0);
            unit.set_cp(0x114/4); // 인스네어
            SetDeathsX(CurrentPlayer, Add, 1*65536, 0, 0xFF0000);
        }
    }
}




