import tempcustomText as tct;

var txtPtr, btnPtr, btnPos, oldCP;
const trgk = $T('Artanis & safhfh');
const marine = [0, 0, 0, 0, 0, 0, 0, 0];
const bunsin1 = [0, 0, 0, 0, 0, 0, 0, 0];
const bunsin2 = [0, 0, 0, 0, 0, 0, 0, 0];
const ultra = [0, 0, 0, 0, 0, 0, 0, 0];
const zazom = [0, 0, 0, 0, 0, 0, 0, 0];
const test1 = [0, 0, 0, 0, 0, 0, 0, 0];
const test2 = [0, 0, 0, 0, 0, 0, 0, 0];
var trap1 = 0;
var trap2 = 0;
var trap3 = 0;
var trap4 = 0;
var gas = 0;
var barjun = 0;
var scv = 0;
const mi2queen = [0, 0, 0, 0, 0, 0, 0, 0];
var testhp = 0;
var mi4npc1 = 0;
var mi4npc2 = 0;
var mi4npc3 = 0;
const ultra2 = [0, 0, 0, 0, 0, 0, 0, 0];
const ultra3 = [0, 0, 0, 0, 0, 0, 0, 0];
const ultra4 = [0, 0, 0, 0, 0, 0, 0, 0];
const ultra5 = [0, 0, 0, 0, 0, 0, 0, 0];
const ultra6 = [0, 0, 0, 0, 0, 0, 0, 0];
const ultra7 = [0, 0, 0, 0, 0, 0, 0, 0];
const mi4arbi = [0, 0, 0, 0, 0, 0, 0, 0];
const mi4arbi2 = [0, 0, 0, 0, 0, 0, 0, 0];
const mi4arbi3 = [0, 0, 0, 0, 0, 0, 0, 0];
const mi4arbi4 = [0, 0, 0, 0, 0, 0, 0, 0];
const mi4vessel1p = [0, 0, 0, 0, 0, 0, 0, 0];
const mi4vessel2p = [0, 0, 0, 0, 0, 0, 0, 0];




function HPbar(UnitEPD, Location, Player, Line, Dot);
function SetLocation(Location, X, Y, Width, Height);
function COrderUnitEPD(UnitEPD, order, target);
function COrderLocEPD(UnitEPD, order, loc);
function LocationAngle(origin, dest);
function SetLocationToUnit(Location, UnitPTR, X, Y);
function SetLocationToUnitEPD(location, unitEPD, CUnitOffsetX, CUnitOffsetY);
function CheckNoneTargetSkillEPD(unitEPD, Range, unitLoc, targetLoc, skillOrder);
function LocationDistance(loc1, loc2);
function CBringEPD(unitEPD, location, dummyUnit);
function SetPColor(pnum, color);
function SetUnitColorEPD(UnitEPD, Color);
function SetButtonEnable(player, conditionUnit);
function SetButtonDisable(player, conditionUnit);
function isButtonDisable(player, conditionUnit);
function isButtonEnable(player, conditionUnit);
function SetShowButton(player, conditionUnit);
function SetHideButton(player, conditionUnit);
function isButtonHide(player, conditionUnit);
function isButtonShow(player, conditionUnit);
function ButtonRefresh();
function RemoveStatusFlagsEPD(epd, flags);
function AddStatusFlagsEPD(epd, flags);
function HPbar(UnitEPD ,Location ,Player ,Line ,Dot) {
    /*ToolTip
    Korean
    var Location;
    을 사용해 구조오프셋EPD;
    var UnitEPD;
    의 아래에;
    var Player;
    소유의 체력바를 생성합니다.;
    줄 수:;
    var Line;
    칸 수:;
    var Dot;
    Korean
    English
    English
    */
    if (
        UnitEPD >= 1
    ) {
        var MaxHP;
        var DotHP;
        var HPperLine;
        var CurHP;
        var GreenLine;
        var BlackLine;
        var Dot2;
        SetMemoryXEPD(225341,SetTo,425,0xFFFF);
        SetMemoryXEPD(234466,SetTo,250,0xFFFFFFFF);
        MaxHP = maskread_epd(221179+maskread_epd(UnitEPD+25,0xFFFF),0xFFFFFFFF);
        DotHP = MaxHP/(Line*Dot);
        HPperLine = DotHP*Dot;
        CurHP = maskread_epd(UnitEPD+2,0xFFFFFFFF);
        const xpos = maskread_epd(UnitEPD + 10,0xFFFF);
        const ypos = maskread_epd(UnitEPD + 10,0xFFFF0000)/65536;
        const Locs = EPD(0x58DC60)+Location*5;
        
        SetMemoryEPD(Locs, SetTo, xpos+6);
        SetMemoryEPD(Locs + 2, SetTo, xpos+6);
        SetMemoryEPD(Locs + 1, SetTo, ypos+15);
        SetMemoryEPD(Locs + 3, SetTo, ypos+15);
        SetMemoryXEPD(Locs,Subtract,Dot*3,0xFFFFFFFF);
        SetMemoryXEPD(Locs,Subtract,Dot*3,0xFFFFFFFF);
        GreenLine = 0;
        Dot2 = Dot;
        BlackLine = Line-1;
        while (
            CurHP >= MaxHP/Line
        ) {
            CurHP -= HPperLine;
            GreenLine += 1;
            if (
                BlackLine >= 1
            ) {
                BlackLine -= 1;
            }
        }
        CurHP = maskread_epd(UnitEPD+2,0xFFFFFFFF);
        for(var i = 0 ; i<GreenLine ; i++) {
            SetMemoryXEPD(Locs+1,Add,8,0xFFFFFFFF);
            SetMemoryXEPD(Locs+3,Add,8,0xFFFFFFFF);
            CurHP -= HPperLine;
            for(var u = 0 ; u<Dot; u++) {
                SetMemoryXEPD(229147,SetTo,3328,0xFF00);
                CreateUnitWithProperties(1, (33), (Location+1), (Player), UnitProperty(hitpoint = 100, shield = 100, energy = 0, resource = 0, hanger = 0, cloaked = False, burrowed = False, intransit = False, hallucinated = False, invincible = False));
                SetMemoryXEPD(Locs,Add,6,0xFFFFFFFF);
                SetMemoryXEPD(Locs+2,Add,6,0xFFFFFFFF);
            }
            SetMemoryXEPD(Locs,Subtract,6*Dot,0xFFFFFFFF);
            SetMemoryXEPD(Locs+2,Subtract,6*Dot,0xFFFFFFFF);
        }
        SetMemoryXEPD(Locs+1,Add,8,0xFFFFFFFF);
        SetMemoryXEPD(Locs+3,Add,8,0xFFFFFFFF);
        if (
            GreenLine == Line
        ) {
            Dot2 = 0;
        }
        while (
            CurHP >= DotHP && 
            Dot2 >= 1
        ) {
            CurHP -= DotHP;
            Dot2 -= 1;
            SetMemoryXEPD(229147,SetTo,3328,0xFF00);
            CreateUnitWithProperties(1, (33), (Location+1), (Player), UnitProperty(hitpoint = 100, shield = 100, energy = 0, resource = 0, hanger = 0, cloaked = False, burrowed = False, intransit = False, hallucinated = False, invincible = False));
            SetMemoryXEPD(Locs,Add,6,0xFFFFFFFF);
            SetMemoryXEPD(Locs+2,Add,6,0xFFFFFFFF);
        }
        while (
            CurHP < DotHP && 
            Dot2 >= 1
        ) {
            Dot2 -= 1;
            SetMemoryXEPD(229147,SetTo,2560,0xFF00);
            CreateUnitWithProperties(1, (33), (Location+1), (Player), UnitProperty(hitpoint = 100, shield = 100, energy = 0, resource = 0, hanger = 0, cloaked = False, burrowed = False, intransit = False, hallucinated = False, invincible = False));
            SetMemoryXEPD(Locs,Add,6,0xFFFFFFFF);
            SetMemoryXEPD(Locs+2,Add,6,0xFFFFFFFF);
        }
        SetMemoryXEPD(Locs,Subtract,6*Dot,0xFFFFFFFF);
        SetMemoryXEPD(Locs+2,Subtract,6*Dot,0xFFFFFFFF);
        for(var i = 0 ; i<BlackLine ; i++) {
            SetMemoryXEPD(Locs+1,Add,8,0xFFFFFFFF);
            SetMemoryXEPD(Locs+3,Add,8,0xFFFFFFFF);
            for(var u = 0 ; u<Dot; u++) {
                SetMemoryXEPD(229147,SetTo,2560,0xFF00);
                CreateUnitWithProperties(1, (33), (Location+1), (Player), UnitProperty(hitpoint = 100, shield = 100, energy = 0, resource = 0, hanger = 0, cloaked = False, burrowed = False, intransit = False, hallucinated = False, invincible = False));
                SetMemoryXEPD(Locs,Add,6,0xFFFFFFFF);
                SetMemoryXEPD(Locs+2,Add,6,0xFFFFFFFF);
            }
            SetMemoryXEPD(Locs,Subtract,6*Dot,0xFFFFFFFF);
            SetMemoryXEPD(Locs+2,Subtract,6*Dot,0xFFFFFFFF);
        }
        SetMemoryXEPD(229147,SetTo,0,0xFF00);
        SetMemoryXEPD(225341,SetTo,546,0xFFFF);
        SetMemoryXEPD(234466,SetTo,277,0xFFFFFFFF);
        KillUnit((33), (Player));
    }
}
function SetLocation(Location ,X ,Y ,Width ,Height) {
    /*ToolTip
    Korean
    var Location;
    의 중심 좌표를;
    var X;
    ,;
    var Y;
    로 넓이를;
    var Width;
    ,;
    var Height;
    로 변경합니다.;
    Korean
    English
    Set location;
    var Location;
    's center to;
    var X;
    ,;
    var Y;
    , set width to;
    var Width;
    , and set height to;
    var Height;
    English
    */
    setloc(Location, X, Y);
    dilateloc(Location, Width/2, Height/2);
}
function COrderUnitEPD(UnitEPD ,order ,target) {
    /*ToolTip
    Korean
    구조오프셋EPD;
    var UnitEPD;
    이 구조오프셋Ptr;
    var target;
    에게;
    var order;
    를 실행합니다.;
    Korean
    English
    Issue order;
    var order;
    for CUnit EPD;
    var UnitEPD;
    to target CUnit ptr;
    var target;
    English
    */
    bwrite_epd(UnitEPD + 0x04D / 4,  0x04D % 4, order);
    SetMemoryEPD(UnitEPD + 0x05C / 4, SetTo, target);
}
function COrderLocEPD(UnitEPD ,order ,loc) {
    /*ToolTip
    Korean
    구조오프셋EPD;
    var UnitEPD;
    이;
    var loc;
    으로;
    var order;
    를 실행합니다.;
    Korean
    English
    Issue order;
    var order;
    for CUnit EPD;
    var UnitEPD;
    to location;
    var loc;
    English
    */
    tct.__LocOrderBase(UnitEPD, order << 8, loc);
}
function LocationAngle(origin ,dest) {
    /*ToolTip
    Korean
    var origin;
    을 기준으로;
    var dest;
    간의 각도를 반환합니다.;
    Korean
    English
    Get angle from origin;
    var origin;
    to;
    var dest;
    English
    */
    const ox1, oy1, ox2, oy2 = tct.__GetLocCoord(origin);
    const dx1, dy1, dx2, dy2 = tct.__GetLocCoord(dest);
    const x1 = ox1 + ox2;
    const y1 = oy1 + oy2;
    const x2 = dx1 + dx2;
    const y2 = dy1 + dy2;
    return atan2(x2 - x1, y1 - y2);
}
function SetLocationToUnit(Location ,UnitPTR ,X ,Y) {
    /*ToolTip
    Korean
    구조오프셋Ptr;
    var UnitPTR;
    의;
    var X;
    ,;
    var Y;
    로;
    var Location;
    을 이동합니다.;
    Korean
    English
    Move location;
    var location;
    to CUnit EPD;
    var unitEPD;
    's X offset;
    var CUnitOffsetX;
    and Y offset;
    var CUnitOffsetY;
    English
    */
    SetLocationToUnitEPD(Location,EPD(UnitPTR),X,Y);
}
function SetLocationToUnitEPD(location ,unitEPD ,CUnitOffsetX ,CUnitOffsetY) {
    /*ToolTip
    Korean
    구조오프셋 EPD;
    var unitEPD;
    의;
    var CUnitOffsetX;
    ,;
    var CUnitOffsetY;
    로;
    var location;
    을 이동합니다.;
    Korean
    English
    Move location;
    var location;
    to CUnit EPD;
    var unitEPD;
    's X offset;
    var CUnitOffsetX;
    and Y offset;
    var CUnitOffsetY;
    English
    */
    if (CUnitOffsetX == CUnitOffsetY) {
    unitEPD += CUnitOffsetX/4;
    setloc_epd(location, unitEPD);
    } else {
    const x = wread_epd(unitEPD + CUnitOffsetX/4, 0);
    const y = wread_epd(unitEPD + CUnitOffsetY/4, 2);
    setloc(location, x, y);
    };
}
function CheckNoneTargetSkillEPD(unitEPD ,Range ,unitLoc ,targetLoc ,skillOrder) {
    /*ToolTip
    Korean
    [논타겟팅] 구조오프셋 EPD;
    var unitEPD;
    이;
    var skillOrder;
    을;
    var Range;
    의 범위 안에서 시전하는 걸 체크합니다.;
    유닛부착 :;
    var unitLoc;
    타겟부착 :;
    var targetLoc;
    Korean
    English
    [NoneTargeting] Check whether CUnit EPD;
    var unitEPD;
    is casting order;
    var skillOrder;
    within range;
    var Range;
    . Caster Location:;
    var unitLoc;
    , Target Location:;
    var targetLoc;
    English
    */
    /*
    LocationDistance(,);
    */
    unitEPD += 0x4D/4;
    if (MemoryXEPD(unitEPD, Exactly, skillOrder * 256, 0xFF00)) {
    unitEPD += -((0x4D - 0x28)/4);
    const x, y = posread_epd(unitEPD);
    setloc(unitLoc, x, y);
    unitEPD += (0x58 - 0x28)/4;
    setloc_epd(targetLoc, unitEPD);
    
    if (Range > LocationDistance(unitLoc, targetLoc)) {
    MoveLocation(255, 101, P11, 255);
    unitEPD += -((0x58 - 0x4C)/4);
    SetMemoryXEPD(unitEPD, SetTo, 0x100, 0xFF00);
    unitEPD += -((0x4D - 0x10)/4);
    SetMemoryEPD(unitEPD, SetTo, x + y * 65536);
    return True;
    }
    }
    return False;
}
function LocationDistance(loc1 ,loc2) {
    /*ToolTip
    Korean
    var loc1;
    과;
    var loc2;
    간의 거리를 반환합니다.;
    Korean
    English
    Return distance of locations between;
    var loc1;
    and;
    var loc2;
    English
    */
    const ox1, oy1, ox2, oy2 = tct.__GetLocCoord(loc1);
    const dx1, dy1, dx2, dy2 = tct.__GetLocCoord(loc2);
    const x = dx1 + dx2 - (ox1 + ox2);
    const y = dy1 + dy2 - (oy1 + oy2);
    return sqrt(x*x + y*y) / 2;
}
function CBringEPD(unitEPD ,location ,dummyUnit) {
    /*ToolTip
    Korean
    구조오프셋 EPD;
    var unitEPD;
    가 로케이션;
    var location;
    에 있는지 확인합니다.;
    더미유닛ID :;
    var dummyUnit;
    (Bring을 위해 잠시 변경할 유닛ID입니다. 사용하지 않는 UnitID를 사용하세요.);
    Korean
    English
    Check whether CUnit EPD;
    var unitEPD;
    is in location;
    var location;
    , by changing its unitType to;
    var dummyUnit;
    and restoring (Use unused unit for dummyUnit);
    English
    */
    DoActions(MoveLocation(255, 101, P11, 255), unitEPD.AddNumber(0x64/4));
    const originalUnitType = bread_epd(unitEPD, 0);
    SetMemoryXEPD(unitEPD, SetTo, dummyUnit, 0xFFFF);
    const ret = l2v(Bring(AllPlayers, AtLeast, 1, dummyUnit, location));
    SetMemoryXEPD(unitEPD, SetTo, originalUnitType, 0xFFFF);
    return ret;
}
function SetPColor(pnum ,color) {
    /*ToolTip
    Korean
    var pnum;
    의 색상을;
    var color;
    로 바꿉니다.;
    Korean
    English
    English
    */
    const pcolor_dst = 0x581D76 + 8 * pnum;
    const mcolor_dst = 0x581DD6 + pnum;
    bwrite(pcolor_dst, color);
    bwrite(mcolor_dst, color);
}
function SetUnitColorEPD(UnitEPD ,Color) {
    /*ToolTip
    Korean
    구조오프셋EPD;
    var UnitEPD;
    의 색상을;
    var Color;
    로 바꿉니다.;
    Korean
    English
    English
    */
    var spriteEPD;
    spriteEPD = epdread_epd(UnitEPD + 0x00C / 4);
    bwrite_epd(spriteEPD + 0x0A/4, 0x0A%4, Color);
}
function SetButtonEnable(player ,conditionUnit) {
    SetMemoryEPD(EPD(0x584DE4) + conditionUnit * 12 + player, SetTo, 1);
}
function SetButtonDisable(player ,conditionUnit) {
    SetMemoryEPD(EPD(0x584DE4) + conditionUnit * 12 + player, SetTo, 0);
}
function isButtonDisable(player ,conditionUnit) {
    if (
        Command(player, Exactly, 0, conditionUnit)
    ) {
        return true;
    }
    return false;
}
function isButtonEnable(player ,conditionUnit) {
    if (
        Command(player, AtLeast, 1, conditionUnit)
    ) {
        return true;
    }
    return false;
}
function SetShowButton(player ,conditionUnit) {
    bwrite(0x57F27C + (player * 228) + conditionUnit, 1);
}
function SetHideButton(player ,conditionUnit) {
    bwrite(0x57F27C + (player * 228) + conditionUnit, 0);
}
function isButtonHide(player ,conditionUnit) {
    if (
        bread(0x57F27C + (player * 228) + conditionUnit) == 0
    ) {
        return true;
    }
    return false;
}
function isButtonShow(player ,conditionUnit) {
    if (
        bread(0x57F27C + (player * 228) + conditionUnit) == 1
    ) {
        return true;
    }
    return false;
}
function ButtonRefresh() {
    CreateUnit(1, (47), (64), (7));
    RemoveUnit((47), (7));
}
function RemoveStatusFlagsEPD(epd ,flags) {
    /*ToolTip
    Korean
    구조오프셋EPD;
    var epd;
    의 스테이터스 플래그;
    var flags;
    을 제거합니다.;
    Korean
    English
    English
    */
    dwsubtract_epd(epd + 0xDC / 4, flags & dwread_epd(epd + 0xDC / 4));
}
function AddStatusFlagsEPD(epd ,flags) {
    /*ToolTip
    Korean
    구조오프셋EPD;
    var epd;
    의 스테이터스 플래그;
    var flags;
    을 추가합니다.;
    Korean
    English
    English
    */
    SetMemoryXEPD(epd + 0xDC/4, SetTo, flags, flags);
}

function ClassicTriggerExec() {
}
function ClassicTriggerStarter() {
    if (playerexist(P1)) {
        setcurpl(P1);
    }
    if (playerexist(P2)) {
        setcurpl(P2);
    }
    if (playerexist(P3)) {
        setcurpl(P3);
    }
    if (playerexist(P4)) {
        setcurpl(P4);
    }
    if (playerexist(P5)) {
        setcurpl(P5);
    }
    if (playerexist(P6)) {
        setcurpl(P6);
    }
    if (playerexist(P7)) {
        setcurpl(P7);
    }
    if (playerexist(P8)) {
        setcurpl(P8);
    }
}
function WaitableTriggerExec() {
}
function onPluginStart() {
    randomize();

}
function beforeTriggerExec() {
    EUDPlayerLoop()();
        WaitableTriggerExec();
        ClassicTriggerExec();
    EUDEndPlayerLoop();
    ClassicTriggerStarter();
    SetMemory(0x6509A0, SetTo, 0);
}
function afterTriggerExec() {
    EUDPlayerLoop()();
        if (getcurpl() == 4) {
            if (
                Deaths((13), (0), 100, (102)) && 
                Switch((16), (2))
            ) {
                SetDeaths((13), (7), 0, (102));
                SetMemory(0x5124F0, (7), 12);
            }
            if (
                Deaths((13), (0), 100, (82)) && 
                Switch((16), (2))
            ) {
                SetDeaths((13), (7), 0, (82));
                SetMemory(0x5124F0, (7), 42);
            }
        }
    EUDEndPlayerLoop();
    EUDPlayerLoop()();
        if (getcurpl() == 5 || getcurpl() == 6 || getcurpl() == 7) {
            if (
                ultra[getcurpl()] == 0 && 
                MemoryEPD(ultra[getcurpl()] + 0x008 / 4, AtMost, 0) && 
                Deaths((5), (10), 4, (35))
            ) {
                ultra[getcurpl()] = epdread_epd(EPD(0x628438));
                CreateUnit(1, (48), (36), (6));
            }
            if (
                zazom[getcurpl()] == 0 && 
                MemoryEPD(zazom[getcurpl()] + 0x008 / 4, AtMost, 0) && 
                Deaths((5), (10), 4, (35))
            ) {
                zazom[getcurpl()] = epdread_epd(EPD(0x628438));
                CreateUnit(1, (48), (36), (6));
            }
            if (
                ultra2[getcurpl()] == 0 && 
                MemoryEPD(ultra2[getcurpl()] + 0x008 / 4, AtMost, 0) && 
                Deaths((5), (10), 4, (35))
            ) {
                ultra2[getcurpl()] = epdread_epd(EPD(0x628438));
                CreateUnit(1, (48), (36), (6));
            }
            if (
                ultra3[getcurpl()] == 0 && 
                MemoryEPD(ultra3[getcurpl()] + 0x008 / 4, AtMost, 0) && 
                Deaths((5), (10), 4, (35))
            ) {
                ultra3[getcurpl()] = epdread_epd(EPD(0x628438));
                CreateUnit(1, (48), (36), (6));
            }
            if (
                ultra4[getcurpl()] == 0 && 
                MemoryEPD(ultra4[getcurpl()] + 0x008 / 4, AtMost, 0) && 
                Deaths((5), (10), 4, (35))
            ) {
                ultra4[getcurpl()] = epdread_epd(EPD(0x628438));
                CreateUnit(1, (48), (36), (6));
            }
            if (
                ultra5[getcurpl()] == 0 && 
                MemoryEPD(ultra5[getcurpl()] + 0x008 / 4, AtMost, 0) && 
                Deaths((5), (10), 4, (35))
            ) {
                ultra5[getcurpl()] = epdread_epd(EPD(0x628438));
                CreateUnit(1, (48), (36), (6));
            }
            if (
                ultra6[getcurpl()] == 0 && 
                MemoryEPD(ultra6[getcurpl()] + 0x008 / 4, AtMost, 0) && 
                Deaths((5), (10), 4, (35))
            ) {
                ultra6[getcurpl()] = epdread_epd(EPD(0x628438));
                CreateUnit(1, (48), (36), (6));
            }
            if (
                ultra7[getcurpl()] == 0 && 
                MemoryEPD(ultra7[getcurpl()] + 0x008 / 4, AtMost, 0) && 
                Deaths((5), (10), 4, (35))
            ) {
                ultra7[getcurpl()] = epdread_epd(EPD(0x628438));
                CreateUnit(1, (48), (36), (6));
            }
            if (
                mi4vessel1p[getcurpl()] == 0 && 
                MemoryEPD(mi4vessel1p[getcurpl()] + 0x008 / 4, AtMost, 0) && 
                Deaths((5), (10), 4, (35))
            ) {
                mi4vessel1p[getcurpl()] = epdread_epd(EPD(0x628438));
                CreateUnit(1, (48), (36), (6));
            }
            if (
                mi4vessel2p[getcurpl()] == 0 && 
                MemoryEPD(mi4vessel2p[getcurpl()] + 0x008 / 4, AtMost, 0) && 
                Deaths((5), (10), 4, (35))
            ) {
                mi4vessel2p[getcurpl()] = epdread_epd(EPD(0x628438));
                CreateUnit(1, (48), (36), (6));
            }
            if (
                ultra[getcurpl()] != 0 && 
                wread_epd(ultra[getcurpl()] + 0x064 / 4,  0x064 % 4) == 48 && 
                wread_epd(ultra[getcurpl()] + 0x0A2 / 4,  0x0A2 % 4) >= 20480 && 
                Deaths((5), (0), 1, (75)) && 
                MemoryEPD(ultra[getcurpl()] + 0x008 / 4, AtLeast, 51201) && 
                Deaths((5), (10), 4, (35))
            ) {
                SetDeaths((5), (9), 1, (75));
                wwrite_epd(ultra[getcurpl()] + 0x0A2 / 4,  0x0A2 % 4, 10240);
                SetMemoryEPD(ultra[getcurpl()] + 0x008 / 4, Add, -51200 * 1);
            }
            if (
                zazom[getcurpl()] != 0 && 
                wread_epd(zazom[getcurpl()] + 0x064 / 4,  0x064 % 4) == 48 && 
                wread_epd(zazom[getcurpl()] + 0x0A2 / 4,  0x0A2 % 4) >= 20480 && 
                Deaths((5), (0), 1, (75)) && 
                MemoryEPD(zazom[getcurpl()] + 0x008 / 4, AtLeast, 51201) && 
                Deaths((5), (10), 4, (35))
            ) {
                SetDeaths((5), (9), 1, (75));
                wwrite_epd(zazom[getcurpl()] + 0x0A2 / 4,  0x0A2 % 4, 10240);
                SetMemoryEPD(zazom[getcurpl()] + 0x008 / 4, Add, -51200 * 1);
            }
            if (
                ultra2[getcurpl()] != 0 && 
                wread_epd(ultra2[getcurpl()] + 0x064 / 4,  0x064 % 4) == 48 && 
                wread_epd(ultra2[getcurpl()] + 0x0A2 / 4,  0x0A2 % 4) >= 20480 && 
                Deaths((5), (0), 1, (75)) && 
                MemoryEPD(ultra2[getcurpl()] + 0x008 / 4, AtLeast, 51201) && 
                Deaths((5), (10), 4, (35))
            ) {
                SetDeaths((5), (9), 1, (75));
                wwrite_epd(ultra2[getcurpl()] + 0x0A2 / 4,  0x0A2 % 4, 10240);
                SetMemoryEPD(ultra2[getcurpl()] + 0x008 / 4, Add, -51200 * 1);
            }
            if (
                ultra3[getcurpl()] != 0 && 
                wread_epd(ultra3[getcurpl()] + 0x064 / 4,  0x064 % 4) == 48 && 
                wread_epd(ultra3[getcurpl()] + 0x0A2 / 4,  0x0A2 % 4) >= 20480 && 
                Deaths((5), (0), 1, (75)) && 
                MemoryEPD(ultra3[getcurpl()] + 0x008 / 4, AtLeast, 51201) && 
                Deaths((5), (10), 4, (35))
            ) {
                SetDeaths((5), (9), 1, (75));
                wwrite_epd(ultra3[getcurpl()] + 0x0A2 / 4,  0x0A2 % 4, 10240);
                SetMemoryEPD(ultra3[getcurpl()] + 0x008 / 4, Add, -51200 * 1);
            }
            if (
                ultra4[getcurpl()] != 0 && 
                wread_epd(ultra4[getcurpl()] + 0x064 / 4,  0x064 % 4) == 48 && 
                wread_epd(ultra4[getcurpl()] + 0x0A2 / 4,  0x0A2 % 4) >= 20480 && 
                Deaths((5), (0), 1, (75)) && 
                MemoryEPD(ultra4[getcurpl()] + 0x008 / 4, AtLeast, 51201) && 
                Deaths((5), (10), 4, (35))
            ) {
                SetDeaths((5), (9), 1, (75));
                wwrite_epd(ultra4[getcurpl()] + 0x0A2 / 4,  0x0A2 % 4, 10240);
                SetMemoryEPD(ultra4[getcurpl()] + 0x008 / 4, Add, -51200 * 1);
            }
            if (
                ultra5[getcurpl()] != 0 && 
                wread_epd(ultra5[getcurpl()] + 0x064 / 4,  0x064 % 4) == 48 && 
                wread_epd(ultra5[getcurpl()] + 0x0A2 / 4,  0x0A2 % 4) >= 20480 && 
                Deaths((5), (0), 1, (75)) && 
                MemoryEPD(ultra5[getcurpl()] + 0x008 / 4, AtLeast, 51201) && 
                Deaths((5), (10), 4, (35))
            ) {
                SetDeaths((5), (9), 1, (75));
                wwrite_epd(ultra5[getcurpl()] + 0x0A2 / 4,  0x0A2 % 4, 10240);
                SetMemoryEPD(ultra5[getcurpl()] + 0x008 / 4, Add, -51200 * 1);
            }
            if (
                ultra6[getcurpl()] != 0 && 
                wread_epd(ultra6[getcurpl()] + 0x064 / 4,  0x064 % 4) == 48 && 
                wread_epd(ultra6[getcurpl()] + 0x0A2 / 4,  0x0A2 % 4) >= 20480 && 
                Deaths((5), (0), 1, (75)) && 
                MemoryEPD(ultra6[getcurpl()] + 0x008 / 4, AtLeast, 51201) && 
                Deaths((5), (10), 4, (35))
            ) {
                SetDeaths((5), (9), 1, (75));
                wwrite_epd(ultra6[getcurpl()] + 0x0A2 / 4,  0x0A2 % 4, 10240);
                SetMemoryEPD(ultra6[getcurpl()] + 0x008 / 4, Add, -51200 * 1);
            }
            if (
                ultra7[getcurpl()] != 0 && 
                wread_epd(ultra7[getcurpl()] + 0x064 / 4,  0x064 % 4) == 48 && 
                wread_epd(ultra7[getcurpl()] + 0x0A2 / 4,  0x0A2 % 4) >= 20480 && 
                Deaths((5), (0), 1, (75)) && 
                MemoryEPD(ultra7[getcurpl()] + 0x008 / 4, AtLeast, 51201) && 
                Deaths((5), (10), 4, (35))
            ) {
                SetDeaths((5), (9), 1, (75));
                wwrite_epd(ultra7[getcurpl()] + 0x0A2 / 4,  0x0A2 % 4, 10240);
                SetMemoryEPD(ultra7[getcurpl()] + 0x008 / 4, Add, -51200 * 1);
            }
            if (
                mi4vessel1p[getcurpl()] != 0 && 
                wread_epd(mi4vessel1p[getcurpl()] + 0x064 / 4,  0x064 % 4) == 48 && 
                wread_epd(mi4vessel1p[getcurpl()] + 0x0A2 / 4,  0x0A2 % 4) >= 20480 && 
                Deaths((5), (0), 1, (75)) && 
                MemoryEPD(mi4vessel1p[getcurpl()] + 0x008 / 4, AtLeast, 51201) && 
                Deaths((5), (10), 4, (35))
            ) {
                SetDeaths((5), (9), 1, (75));
                wwrite_epd(mi4vessel1p[getcurpl()] + 0x0A2 / 4,  0x0A2 % 4, 10240);
                SetMemoryEPD(mi4vessel1p[getcurpl()] + 0x008 / 4, Add, -51200 * 1);
            }
            if (
                mi4vessel2p[getcurpl()] != 0 && 
                wread_epd(mi4vessel2p[getcurpl()] + 0x064 / 4,  0x064 % 4) == 48 && 
                wread_epd(mi4vessel2p[getcurpl()] + 0x0A2 / 4,  0x0A2 % 4) >= 20480 && 
                Deaths((5), (0), 1, (75)) && 
                MemoryEPD(mi4vessel2p[getcurpl()] + 0x008 / 4, AtLeast, 51201) && 
                Deaths((5), (10), 4, (35))
            ) {
                SetDeaths((5), (9), 1, (75));
                wwrite_epd(mi4vessel2p[getcurpl()] + 0x0A2 / 4,  0x0A2 % 4, 10240);
                SetMemoryEPD(mi4vessel2p[getcurpl()] + 0x008 / 4, Add, -51200 * 1);
            }
            if (
                ultra[getcurpl()] != 0 && 
                wread_epd(ultra[getcurpl()] + 0x064 / 4,  0x064 % 4) == 48 && 
                wread_epd(ultra[getcurpl()] + 0x0A2 / 4,  0x0A2 % 4) >= 20480 && 
                Deaths((5), (0), 1, (75)) && 
                MemoryEPD(ultra[getcurpl()] + 0x008 / 4, AtMost, 51200) && 
                Deaths((5), (10), 4, (35))
            ) {
                SetDeaths((5), (9), 1, (75));
                SetMemoryEPD(ultra[getcurpl()] + 0x008 / 4, SetTo, 0);
                bwrite_epd(ultra[getcurpl()] + 0x04D / 4,  0x04D % 4, 0);
                ultra[getcurpl()] = 0;
            }
            if (
                zazom[getcurpl()] != 0 && 
                wread_epd(zazom[getcurpl()] + 0x064 / 4,  0x064 % 4) == 48 && 
                wread_epd(zazom[getcurpl()] + 0x0A2 / 4,  0x0A2 % 4) >= 20480 && 
                Deaths((5), (0), 1, (75)) && 
                MemoryEPD(zazom[getcurpl()] + 0x008 / 4, AtMost, 51200) && 
                Deaths((5), (10), 4, (35))
            ) {
                SetDeaths((5), (9), 1, (75));
                SetMemoryEPD(zazom[getcurpl()] + 0x008 / 4, SetTo, 0);
                bwrite_epd(zazom[getcurpl()] + 0x04D / 4,  0x04D % 4, 0);
                zazom[getcurpl()] = 0;
            }
            if (
                ultra2[getcurpl()] != 0 && 
                wread_epd(ultra2[getcurpl()] + 0x064 / 4,  0x064 % 4) == 48 && 
                wread_epd(ultra2[getcurpl()] + 0x0A2 / 4,  0x0A2 % 4) >= 20480 && 
                Deaths((5), (0), 1, (75)) && 
                MemoryEPD(ultra2[getcurpl()] + 0x008 / 4, AtMost, 51200) && 
                Deaths((5), (10), 4, (35))
            ) {
                SetDeaths((5), (9), 1, (75));
                SetMemoryEPD(ultra2[getcurpl()] + 0x008 / 4, SetTo, 0);
                bwrite_epd(ultra2[getcurpl()] + 0x04D / 4,  0x04D % 4, 0);
                ultra2[getcurpl()] = 0;
            }
            if (
                ultra3[getcurpl()] != 0 && 
                wread_epd(ultra3[getcurpl()] + 0x064 / 4,  0x064 % 4) == 48 && 
                wread_epd(ultra3[getcurpl()] + 0x0A2 / 4,  0x0A2 % 4) >= 20480 && 
                Deaths((5), (0), 1, (75)) && 
                MemoryEPD(ultra3[getcurpl()] + 0x008 / 4, AtMost, 51200) && 
                Deaths((5), (10), 4, (35))
            ) {
                SetDeaths((5), (9), 1, (75));
                SetMemoryEPD(ultra3[getcurpl()] + 0x008 / 4, SetTo, 0);
                bwrite_epd(ultra3[getcurpl()] + 0x04D / 4,  0x04D % 4, 0);
                ultra3[getcurpl()] = 0;
            }
            if (
                ultra4[getcurpl()] != 0 && 
                wread_epd(ultra4[getcurpl()] + 0x064 / 4,  0x064 % 4) == 48 && 
                wread_epd(ultra4[getcurpl()] + 0x0A2 / 4,  0x0A2 % 4) >= 20480 && 
                Deaths((5), (0), 1, (75)) && 
                MemoryEPD(ultra4[getcurpl()] + 0x008 / 4, AtMost, 51200) && 
                Deaths((5), (10), 4, (35))
            ) {
                SetDeaths((5), (9), 1, (75));
                SetMemoryEPD(ultra4[getcurpl()] + 0x008 / 4, SetTo, 0);
                bwrite_epd(ultra4[getcurpl()] + 0x04D / 4,  0x04D % 4, 0);
                ultra4[getcurpl()] = 0;
            }
            if (
                ultra5[getcurpl()] != 0 && 
                wread_epd(ultra5[getcurpl()] + 0x064 / 4,  0x064 % 4) == 48 && 
                wread_epd(ultra5[getcurpl()] + 0x0A2 / 4,  0x0A2 % 4) >= 20480 && 
                Deaths((5), (0), 1, (75)) && 
                MemoryEPD(ultra5[getcurpl()] + 0x008 / 4, AtMost, 51200) && 
                Deaths((5), (10), 4, (35))
            ) {
                SetDeaths((5), (9), 1, (75));
                SetMemoryEPD(ultra5[getcurpl()] + 0x008 / 4, SetTo, 0);
                bwrite_epd(ultra5[getcurpl()] + 0x04D / 4,  0x04D % 4, 0);
                ultra5[getcurpl()] = 0;
            }
            if (
                ultra6[getcurpl()] != 0 && 
                wread_epd(ultra6[getcurpl()] + 0x064 / 4,  0x064 % 4) == 48 && 
                wread_epd(ultra6[getcurpl()] + 0x0A2 / 4,  0x0A2 % 4) >= 20480 && 
                Deaths((5), (0), 1, (75)) && 
                MemoryEPD(ultra6[getcurpl()] + 0x008 / 4, AtMost, 51200) && 
                Deaths((5), (10), 4, (35))
            ) {
                SetDeaths((5), (9), 1, (75));
                SetMemoryEPD(ultra6[getcurpl()] + 0x008 / 4, SetTo, 0);
                bwrite_epd(ultra6[getcurpl()] + 0x04D / 4,  0x04D % 4, 0);
                ultra6[getcurpl()] = 0;
            }
            if (
                ultra7[getcurpl()] != 0 && 
                wread_epd(ultra7[getcurpl()] + 0x064 / 4,  0x064 % 4) == 48 && 
                wread_epd(ultra7[getcurpl()] + 0x0A2 / 4,  0x0A2 % 4) >= 20480 && 
                Deaths((5), (0), 1, (75)) && 
                MemoryEPD(ultra7[getcurpl()] + 0x008 / 4, AtMost, 51200) && 
                Deaths((5), (10), 4, (35))
            ) {
                SetDeaths((5), (9), 1, (75));
                SetMemoryEPD(ultra7[getcurpl()] + 0x008 / 4, SetTo, 0);
                bwrite_epd(ultra7[getcurpl()] + 0x04D / 4,  0x04D % 4, 0);
                ultra7[getcurpl()] = 0;
            }
            if (
                mi4vessel1p[getcurpl()] != 0 && 
                wread_epd(mi4vessel1p[getcurpl()] + 0x064 / 4,  0x064 % 4) == 48 && 
                wread_epd(mi4vessel1p[getcurpl()] + 0x0A2 / 4,  0x0A2 % 4) >= 20480 && 
                Deaths((5), (0), 1, (75)) && 
                MemoryEPD(mi4vessel1p[getcurpl()] + 0x008 / 4, AtMost, 51200) && 
                Deaths((5), (10), 4, (35))
            ) {
                SetDeaths((5), (9), 1, (75));
                SetMemoryEPD(mi4vessel1p[getcurpl()] + 0x008 / 4, SetTo, 0);
                bwrite_epd(mi4vessel1p[getcurpl()] + 0x04D / 4,  0x04D % 4, 0);
                mi4vessel1p[getcurpl()] = 0;
            }
            if (
                mi4vessel2p[getcurpl()] != 0 && 
                wread_epd(mi4vessel2p[getcurpl()] + 0x064 / 4,  0x064 % 4) == 48 && 
                wread_epd(mi4vessel2p[getcurpl()] + 0x0A2 / 4,  0x0A2 % 4) >= 20480 && 
                Deaths((5), (0), 1, (75)) && 
                MemoryEPD(mi4vessel2p[getcurpl()] + 0x008 / 4, AtMost, 51200) && 
                Deaths((5), (10), 4, (35))
            ) {
                SetDeaths((5), (9), 1, (75));
                SetMemoryEPD(mi4vessel2p[getcurpl()] + 0x008 / 4, SetTo, 0);
                bwrite_epd(mi4vessel2p[getcurpl()] + 0x04D / 4,  0x04D % 4, 0);
                mi4vessel2p[getcurpl()] = 0;
            }
            if (
                ultra[getcurpl()] != 0 && 
                MemoryEPD(ultra[getcurpl()] + 0x008 / 4, AtMost, 0) && 
                Deaths((5), (10), 4, (35))
            ) {
                ultra[getcurpl()] = 0;
            }
            if (
                zazom[getcurpl()] != 0 && 
                MemoryEPD(zazom[getcurpl()] + 0x008 / 4, AtMost, 0) && 
                Deaths((5), (10), 4, (35))
            ) {
                zazom[getcurpl()] = 0;
            }
            if (
                ultra2[getcurpl()] != 0 && 
                MemoryEPD(ultra2[getcurpl()] + 0x008 / 4, AtMost, 0) && 
                Deaths((5), (10), 4, (35))
            ) {
                ultra2[getcurpl()] = 0;
            }
            if (
                ultra3[getcurpl()] != 0 && 
                MemoryEPD(ultra3[getcurpl()] + 0x008 / 4, AtMost, 0) && 
                Deaths((5), (10), 4, (35))
            ) {
                ultra3[getcurpl()] = 0;
            }
            if (
                ultra4[getcurpl()] != 0 && 
                MemoryEPD(ultra4[getcurpl()] + 0x008 / 4, AtMost, 0) && 
                Deaths((5), (10), 4, (35))
            ) {
                ultra4[getcurpl()] = 0;
            }
            if (
                ultra5[getcurpl()] != 0 && 
                MemoryEPD(ultra5[getcurpl()] + 0x008 / 4, AtMost, 0) && 
                Deaths((5), (10), 4, (35))
            ) {
                ultra5[getcurpl()] = 0;
            }
            if (
                ultra6[getcurpl()] != 0 && 
                MemoryEPD(ultra6[getcurpl()] + 0x008 / 4, AtMost, 0) && 
                Deaths((5), (10), 4, (35))
            ) {
                ultra6[getcurpl()] = 0;
            }
            if (
                ultra7[getcurpl()] != 0 && 
                MemoryEPD(ultra7[getcurpl()] + 0x008 / 4, AtMost, 0) && 
                Deaths((5), (10), 4, (35))
            ) {
                ultra7[getcurpl()] = 0;
            }
            if (
                mi4vessel1p[getcurpl()] != 0 && 
                MemoryEPD(mi4vessel1p[getcurpl()] + 0x008 / 4, AtMost, 0) && 
                Deaths((5), (10), 4, (35))
            ) {
                mi4vessel1p[getcurpl()] = 0;
            }
            if (
                mi4vessel2p[getcurpl()] != 0 && 
                MemoryEPD(mi4vessel2p[getcurpl()] + 0x008 / 4, AtMost, 0) && 
                Deaths((5), (10), 4, (35))
            ) {
                mi4vessel2p[getcurpl()] = 0;
            }
        }
    EUDEndPlayerLoop();
    EUDPlayerLoop()();
        if (getcurpl() == 5) {
            if (
                Deaths((5), (10), 1, (142))
            ) {
                SetDeaths((5), (7), 4, (142));
                SetDeaths((5), (7), 1, (77));
                wwrite(0x6564E0 + 2512 + 41 * 2, 50);
                wwrite(0x6564E0 + 2512 + 42 * 2, 15);
                wwrite(0x6564E0 + 2512 + 39 * 2, 14);
                wwrite(0x6564E0 + 2512 + 36 * 2, 14);
                wwrite(0x6564E0 + 2512 + 49 * 2, 14);
                wwrite(0x6564E0 + 2512 + 80 * 2, 200);
                wwrite(0x6564E0 + 2512 + 81 * 2, 200);
                wwrite(0x6564E0 + 2512 + 47 * 2, 20);
                wwrite(0x6564E0 + 2512 + 37 * 2, 20);
                bwrite(0x58D2B0 + 0x207C * ((44) / 46) + (6) * (46 - 31 * ((44) / 46)) + ((44) % 46), 40);
                dwwrite(0x65FD00 + 9808 + 110 * 4, 768000);
                dwwrite(0x65FD00 + 9808 + 62 * 4, 25600);
                dwwrite(0x65FD00 + 9808 + 203 * 4, 1536000);
                dwwrite(0x65FD00 + 9808 + 41 * 4, 384000);
                ModifyUnitHitPoints(All, (41), (17), (64), 100);
                ModifyUnitHitPoints(All, (41), (11), (64), 100);
            }
            if (
                Deaths((5), (10), 2, (142))
            ) {
                SetDeaths((5), (7), 4, (142));
                SetDeaths((5), (7), 2, (77));
                wwrite(0x6564E0 + 2512 + 41 * 2, 60);
                wwrite(0x6564E0 + 2512 + 42 * 2, 30);
                wwrite(0x6564E0 + 2512 + 39 * 2, 16);
                wwrite(0x6564E0 + 2512 + 36 * 2, 16);
                wwrite(0x6564E0 + 2512 + 49 * 2, 16);
                wwrite(0x6564E0 + 2512 + 80 * 2, 300);
                wwrite(0x6564E0 + 2512 + 81 * 2, 300);
                wwrite(0x6564E0 + 2512 + 47 * 2, 40);
                wwrite(0x6564E0 + 2512 + 37 * 2, 30);
                bwrite(0x58D2B0 + 0x207C * ((44) / 46) + (6) * (46 - 31 * ((44) / 46)) + ((44) % 46), 100);
                dwwrite(0x65FD00 + 9808 + 110 * 4, 512000);
                dwwrite(0x65FD00 + 9808 + 62 * 4, 51200);
                dwwrite(0x65FD00 + 9808 + 203 * 4, 1024000);
                dwwrite(0x65FD00 + 9808 + 41 * 4, 512000);
                ModifyUnitHitPoints(All, (41), (17), (64), 100);
                ModifyUnitHitPoints(All, (41), (11), (64), 100);
            }
            if (
                Deaths((5), (10), 3, (142))
            ) {
                SetDeaths((5), (7), 4, (142));
                SetDeaths((5), (7), 3, (77));
                wwrite(0x6564E0 + 2512 + 41 * 2, 70);
                wwrite(0x6564E0 + 2512 + 42 * 2, 50);
                wwrite(0x6564E0 + 2512 + 39 * 2, 18);
                wwrite(0x6564E0 + 2512 + 36 * 2, 18);
                wwrite(0x6564E0 + 2512 + 49 * 2, 18);
                wwrite(0x6564E0 + 2512 + 80 * 2, 400);
                wwrite(0x6564E0 + 2512 + 81 * 2, 400);
                wwrite(0x6564E0 + 2512 + 47 * 2, 50);
                wwrite(0x6564E0 + 2512 + 37 * 2, 30);
                bwrite(0x58D2B0 + 0x207C * ((44) / 46) + (6) * (46 - 31 * ((44) / 46)) + ((44) % 46), 200);
                dwwrite(0x65FD00 + 9808 + 110 * 4, 512000);
                dwwrite(0x65FD00 + 9808 + 62 * 4, 76800);
                dwwrite(0x65FD00 + 9808 + 203 * 4, 1024000);
                dwwrite(0x65FD00 + 9808 + 41 * 4, 512000);
                ModifyUnitHitPoints(All, (41), (17), (64), 100);
                ModifyUnitHitPoints(All, (41), (11), (64), 100);
            }
        }
    EUDEndPlayerLoop();
    EUDPlayerLoop()();
        if (getcurpl() == 0) {
            if (
                Deaths((13), (0), 2, (227)) && 
                Switch((16), (2))
            ) {
                SetDeaths((13), (7), 0, (227));
                bunsin1[getcurpl()] = epdread_epd(EPD(0x628438));
                CreateUnitWithProperties(1, (87), (46), (4), UnitProperty(hitpoint = 100, shield = 100, energy = 100, resource = 0, hanger = 0, cloaked = False, burrowed = False, intransit = False, hallucinated = True, invincible = False));
                AddStatusFlagsEPD(bunsin1[getcurpl()],805306368);
                RemoveStatusFlagsEPD(bunsin1[getcurpl()],1073741824);
                bunsin2[getcurpl()] = epdread_epd(EPD(0x628438));
                CreateUnitWithProperties(1, (87), (51), (4), UnitProperty(hitpoint = 100, shield = 100, energy = 100, resource = 0, hanger = 0, cloaked = False, burrowed = False, intransit = False, hallucinated = True, invincible = False));
                AddStatusFlagsEPD(bunsin2[getcurpl()],805306368);
                RemoveStatusFlagsEPD(bunsin2[getcurpl()],1073741824);
                SetDeaths((13), (7), 2, (95));
            }
            if (
                Deaths((13), (0), 2, (227)) && 
                Switch((16), (3))
            ) {
                SetDeaths((13), (7), 0, (227));
                bunsin1[getcurpl()] = epdread_epd(EPD(0x628438));
                CreateUnitWithProperties(1, (87), (46), (13), UnitProperty(hitpoint = 100, shield = 100, energy = 100, resource = 0, hanger = 0, cloaked = False, burrowed = False, intransit = False, hallucinated = True, invincible = False));
                AddStatusFlagsEPD(bunsin1[getcurpl()],805306368);
                RemoveStatusFlagsEPD(bunsin1[getcurpl()],1073741824);
                bunsin2[getcurpl()] = epdread_epd(EPD(0x628438));
                CreateUnitWithProperties(1, (87), (51), (13), UnitProperty(hitpoint = 100, shield = 100, energy = 100, resource = 0, hanger = 0, cloaked = False, burrowed = False, intransit = False, hallucinated = True, invincible = False));
                AddStatusFlagsEPD(bunsin2[getcurpl()],805306368);
                RemoveStatusFlagsEPD(bunsin2[getcurpl()],1073741824);
                SetDeaths((13), (7), 2, (95));
            }
        }
    EUDEndPlayerLoop();
    EUDPlayerLoop()();
        if (getcurpl() == 1) {
            if (
                Deaths((13), (0), 2, (227)) && 
                Switch((16), (2))
            ) {
                SetDeaths((13), (7), 0, (227));
                bunsin1[getcurpl()] = epdread_epd(EPD(0x628438));
                CreateUnitWithProperties(1, (87), (47), (4), UnitProperty(hitpoint = 100, shield = 100, energy = 100, resource = 0, hanger = 0, cloaked = False, burrowed = False, intransit = False, hallucinated = True, invincible = False));
                AddStatusFlagsEPD(bunsin1[getcurpl()],805306368);
                RemoveStatusFlagsEPD(bunsin1[getcurpl()],1073741824);
                bunsin2[getcurpl()] = epdread_epd(EPD(0x628438));
                CreateUnitWithProperties(1, (87), (52), (4), UnitProperty(hitpoint = 100, shield = 100, energy = 100, resource = 0, hanger = 0, cloaked = False, burrowed = False, intransit = False, hallucinated = True, invincible = False));
                AddStatusFlagsEPD(bunsin2[getcurpl()],805306368);
                RemoveStatusFlagsEPD(bunsin2[getcurpl()],1073741824);
                SetDeaths((13), (7), 2, (95));
            }
            if (
                Deaths((13), (0), 2, (227)) && 
                Switch((16), (3))
            ) {
                SetDeaths((13), (7), 0, (227));
                bunsin1[getcurpl()] = epdread_epd(EPD(0x628438));
                CreateUnitWithProperties(1, (87), (47), (13), UnitProperty(hitpoint = 100, shield = 100, energy = 100, resource = 0, hanger = 0, cloaked = False, burrowed = False, intransit = False, hallucinated = True, invincible = False));
                AddStatusFlagsEPD(bunsin1[getcurpl()],805306368);
                RemoveStatusFlagsEPD(bunsin1[getcurpl()],1073741824);
                bunsin2[getcurpl()] = epdread_epd(EPD(0x628438));
                CreateUnitWithProperties(1, (87), (52), (13), UnitProperty(hitpoint = 100, shield = 100, energy = 100, resource = 0, hanger = 0, cloaked = False, burrowed = False, intransit = False, hallucinated = True, invincible = False));
                AddStatusFlagsEPD(bunsin2[getcurpl()],805306368);
                RemoveStatusFlagsEPD(bunsin2[getcurpl()],1073741824);
                SetDeaths((13), (7), 2, (95));
            }
        }
    EUDEndPlayerLoop();
    EUDPlayerLoop()();
        if (getcurpl() == 2) {
            if (
                Deaths((13), (0), 2, (227)) && 
                Switch((16), (2))
            ) {
                SetDeaths((13), (7), 0, (227));
                bunsin1[getcurpl()] = epdread_epd(EPD(0x628438));
                CreateUnitWithProperties(1, (87), (48), (4), UnitProperty(hitpoint = 100, shield = 100, energy = 100, resource = 0, hanger = 0, cloaked = False, burrowed = False, intransit = False, hallucinated = True, invincible = False));
                AddStatusFlagsEPD(bunsin1[getcurpl()],805306368);
                RemoveStatusFlagsEPD(bunsin1[getcurpl()],1073741824);
                bunsin2[getcurpl()] = epdread_epd(EPD(0x628438));
                CreateUnitWithProperties(1, (87), (53), (4), UnitProperty(hitpoint = 100, shield = 100, energy = 100, resource = 0, hanger = 0, cloaked = False, burrowed = False, intransit = False, hallucinated = True, invincible = False));
                AddStatusFlagsEPD(bunsin2[getcurpl()],805306368);
                RemoveStatusFlagsEPD(bunsin2[getcurpl()],1073741824);
                SetDeaths((13), (7), 2, (95));
            }
            if (
                Deaths((13), (0), 2, (227)) && 
                Switch((16), (3))
            ) {
                SetDeaths((13), (7), 0, (227));
                bunsin1[getcurpl()] = epdread_epd(EPD(0x628438));
                CreateUnitWithProperties(1, (87), (48), (13), UnitProperty(hitpoint = 100, shield = 100, energy = 100, resource = 0, hanger = 0, cloaked = False, burrowed = False, intransit = False, hallucinated = True, invincible = False));
                AddStatusFlagsEPD(bunsin1[getcurpl()],805306368);
                RemoveStatusFlagsEPD(bunsin1[getcurpl()],1073741824);
                bunsin2[getcurpl()] = epdread_epd(EPD(0x628438));
                CreateUnitWithProperties(1, (87), (53), (13), UnitProperty(hitpoint = 100, shield = 100, energy = 100, resource = 0, hanger = 0, cloaked = False, burrowed = False, intransit = False, hallucinated = True, invincible = False));
                AddStatusFlagsEPD(bunsin2[getcurpl()],805306368);
                RemoveStatusFlagsEPD(bunsin2[getcurpl()],1073741824);
                SetDeaths((13), (7), 2, (95));
            }
        }
    EUDEndPlayerLoop();
    EUDPlayerLoop()();
        if (getcurpl() == 3) {
            if (
                Deaths((13), (0), 2, (227)) && 
                Switch((16), (2))
            ) {
                SetDeaths((13), (7), 0, (227));
                bunsin1[getcurpl()] = epdread_epd(EPD(0x628438));
                CreateUnitWithProperties(1, (87), (49), (4), UnitProperty(hitpoint = 100, shield = 100, energy = 100, resource = 0, hanger = 0, cloaked = False, burrowed = False, intransit = False, hallucinated = True, invincible = False));
                AddStatusFlagsEPD(bunsin1[getcurpl()],805306368);
                RemoveStatusFlagsEPD(bunsin1[getcurpl()],1073741824);
                bunsin2[getcurpl()] = epdread_epd(EPD(0x628438));
                CreateUnitWithProperties(1, (87), (54), (4), UnitProperty(hitpoint = 100, shield = 100, energy = 100, resource = 0, hanger = 0, cloaked = False, burrowed = False, intransit = False, hallucinated = True, invincible = False));
                AddStatusFlagsEPD(bunsin2[getcurpl()],805306368);
                RemoveStatusFlagsEPD(bunsin2[getcurpl()],1073741824);
                SetDeaths((13), (7), 2, (95));
            }
            if (
                Deaths((13), (0), 2, (227)) && 
                Switch((16), (3))
            ) {
                SetDeaths((13), (7), 0, (227));
                bunsin1[getcurpl()] = epdread_epd(EPD(0x628438));
                CreateUnitWithProperties(1, (87), (49), (13), UnitProperty(hitpoint = 100, shield = 100, energy = 100, resource = 0, hanger = 0, cloaked = False, burrowed = False, intransit = False, hallucinated = True, invincible = False));
                AddStatusFlagsEPD(bunsin1[getcurpl()],805306368);
                RemoveStatusFlagsEPD(bunsin1[getcurpl()],1073741824);
                bunsin2[getcurpl()] = epdread_epd(EPD(0x628438));
                CreateUnitWithProperties(1, (87), (54), (13), UnitProperty(hitpoint = 100, shield = 100, energy = 100, resource = 0, hanger = 0, cloaked = False, burrowed = False, intransit = False, hallucinated = True, invincible = False));
                AddStatusFlagsEPD(bunsin2[getcurpl()],805306368);
                RemoveStatusFlagsEPD(bunsin2[getcurpl()],1073741824);
                SetDeaths((13), (7), 2, (95));
            }
        }
    EUDEndPlayerLoop();
    EUDPlayerLoop()();
        if (getcurpl() == 4) {
            if (
                Deaths((13), (0), 2, (227))
            ) {
                SetDeaths((13), (7), 0, (227));
                bunsin1[getcurpl()] = epdread_epd(EPD(0x628438));
                CreateUnitWithProperties(1, (87), (50), (13), UnitProperty(hitpoint = 100, shield = 100, energy = 100, resource = 0, hanger = 0, cloaked = False, burrowed = False, intransit = False, hallucinated = True, invincible = False));
                AddStatusFlagsEPD(bunsin1[getcurpl()],805306368);
                RemoveStatusFlagsEPD(bunsin1[getcurpl()],1073741824);
                bunsin2[getcurpl()] = epdread_epd(EPD(0x628438));
                CreateUnitWithProperties(1, (87), (55), (13), UnitProperty(hitpoint = 100, shield = 100, energy = 100, resource = 0, hanger = 0, cloaked = False, burrowed = False, intransit = False, hallucinated = True, invincible = False));
                AddStatusFlagsEPD(bunsin2[getcurpl()],805306368);
                RemoveStatusFlagsEPD(bunsin2[getcurpl()],1073741824);
                SetDeaths((13), (7), 2, (95));
            }
        }
    EUDEndPlayerLoop();
    EUDPlayerLoop()();
        if (getcurpl() == 0 || getcurpl() == 1 || getcurpl() == 2 || getcurpl() == 3 || getcurpl() == 4) {
            if (
                Deaths((13), (0), 214, (95)) && 
                Deaths((13), (1), 999, (27)) && 
                MemoryEPD(bunsin1[getcurpl()] + 0x008 / 4, AtLeast, 20736) && 
                CBringEPD(bunsin1[getcurpl()],64,148) && 
                Switch((16), (2))
            ) {
                SetDeaths((13), (7), 1000, (27));
                AddStatusFlagsEPD(bunsin1[getcurpl()],1073741824);
                bwrite_epd(bunsin1[getcurpl()] + 0x11A / 4,  0x11A % 4, 40);
            }
            if (
                Deaths((13), (0), 214, (95)) && 
                Deaths((13), (1), 999, (18)) && 
                MemoryEPD(bunsin2[getcurpl()] + 0x008 / 4, AtLeast, 20736) && 
                CBringEPD(bunsin2[getcurpl()],64,148) && 
                Switch((16), (2))
            ) {
                SetDeaths((13), (7), 1000, (18));
                AddStatusFlagsEPD(bunsin2[getcurpl()],1073741824);
                bwrite_epd(bunsin2[getcurpl()] + 0x11A / 4,  0x11A % 4, 40);
            }
            if (
                Deaths((13), (0), 2, (95)) && 
                Deaths((13), (1), 999, (27)) && 
                wread_epd(bunsin1[getcurpl()] + 0x0A2 / 4,  0x0A2 % 4) <= 255 && 
                MemoryEPD(bunsin1[getcurpl()] + 0x008 / 4, AtLeast, 20736) && 
                CBringEPD(bunsin1[getcurpl()],64,148) && 
                Switch((16), (2))
            ) {
                SetDeaths((13), (7), 1000, (27));
                AddStatusFlagsEPD(bunsin1[getcurpl()],1073741824);
                bwrite_epd(bunsin1[getcurpl()] + 0x11A / 4,  0x11A % 4, 40);
            }
            if (
                Deaths((13), (0), 2, (95)) && 
                Deaths((13), (1), 999, (18)) && 
                wread_epd(bunsin2[getcurpl()] + 0x0A2 / 4,  0x0A2 % 4) <= 255 && 
                MemoryEPD(bunsin2[getcurpl()] + 0x008 / 4, AtLeast, 20736) && 
                CBringEPD(bunsin2[getcurpl()],64,148) && 
                Switch((16), (2))
            ) {
                SetDeaths((13), (7), 1000, (18));
                AddStatusFlagsEPD(bunsin2[getcurpl()],1073741824);
                bwrite_epd(bunsin2[getcurpl()] + 0x11A / 4,  0x11A % 4, 40);
            }
            if (
                Deaths((13), (0), 2, (95)) && 
                Deaths((13), (1), 999, (27)) && 
                MemoryEPD(bunsin1[getcurpl()] + 0x008 / 4, AtMost, 20736) && 
                CBringEPD(bunsin1[getcurpl()],64,148) && 
                Switch((16), (2))
            ) {
                SetDeaths((13), (7), 1000, (27));
                AddStatusFlagsEPD(bunsin1[getcurpl()],1073741824);
                bwrite_epd(bunsin1[getcurpl()] + 0x11A / 4,  0x11A % 4, 40);
            }
            if (
                Deaths((13), (0), 2, (95)) && 
                Deaths((13), (1), 999, (18)) && 
                MemoryEPD(bunsin2[getcurpl()] + 0x008 / 4, AtMost, 20736) && 
                CBringEPD(bunsin2[getcurpl()],64,148) && 
                Switch((16), (2))
            ) {
                SetDeaths((13), (7), 1000, (18));
                AddStatusFlagsEPD(bunsin2[getcurpl()],1073741824);
                bwrite_epd(bunsin2[getcurpl()] + 0x11A / 4,  0x11A % 4, 40);
            }
        }
    EUDEndPlayerLoop();
    EUDPlayerLoop()();
        if (getcurpl() == 4) {
            if (
                Command((13), (0), 1, (0)) && 
                Command((0), (0), 1, (0)) && 
                Command((1), (0), 1, (0)) && 
                Command((2), (0), 1, (0)) && 
                Command((3), (0), 1, (0)) && 
                MemoryX(0x596A18 + 81, AtLeast, 1, 1 << (8 * (81 % 4))) && 
                Switch((16), (2))
            ) {
                RemoveUnit((0), (0));
                RemoveUnit((0), (1));
                RemoveUnit((0), (2));
                RemoveUnit((0), (3));
                zazom[getcurpl()] = epdread_epd(EPD(0x628438));
                CreateUnit(1, (28), (5), (13));
                AddStatusFlagsEPD(zazom[getcurpl()],805306368);
                ultra[getcurpl()] = epdread_epd(EPD(0x628438));
                CreateUnit(1, (22), (5), (13));
                AddStatusFlagsEPD(ultra[getcurpl()],805306368);
                test1[getcurpl()] = epdread_epd(EPD(0x628438));
                CreateUnit(1, (74), (5), (13));
                AddStatusFlagsEPD(test1[getcurpl()],805306368);
                test2[getcurpl()] = epdread_epd(EPD(0x628438));
                CreateUnit(1, (43), (5), (13));
                AddStatusFlagsEPD(test2[getcurpl()],805306368);
            }
            if (
                Command((13), (0), 1, (0)) && 
                Command((0), (0), 1, (0)) && 
                Command((1), (0), 1, (0)) && 
                Command((2), (0), 1, (0)) && 
                Command((3), (0), 1, (0)) && 
                MemoryX(0x596A18 + 81, AtLeast, 1, 1 << (8 * (81 % 4))) && 
                Switch((126), (2))
            ) {
                RemoveUnit((0), (0));
                RemoveUnit((0), (1));
                RemoveUnit((0), (2));
                RemoveUnit((0), (3));
                zazom[getcurpl()] = epdread_epd(EPD(0x628438));
                CreateUnit(1, (28), (5), (13));
                AddStatusFlagsEPD(zazom[getcurpl()],805306368);
                ultra[getcurpl()] = epdread_epd(EPD(0x628438));
                CreateUnit(1, (22), (5), (13));
                AddStatusFlagsEPD(ultra[getcurpl()],805306368);
                test1[getcurpl()] = epdread_epd(EPD(0x628438));
                CreateUnit(1, (74), (5), (13));
                AddStatusFlagsEPD(test1[getcurpl()],805306368);
                test2[getcurpl()] = epdread_epd(EPD(0x628438));
                CreateUnit(1, (43), (5), (13));
                AddStatusFlagsEPD(test2[getcurpl()],805306368);
            }
            if (
                Command((13), (0), 1, (28)) && 
                Deaths((0), (0), 4, (142)) && 
                Deaths((0), (1), 0, (103)) && 
                Deaths((0), (1), 0, (75)) && 
                MemoryEPD(zazom[getcurpl()] + 0x008 / 4, AtMost, 76800) && 
                Switch((16), (2))
            ) {
                SetDeaths((0), (7), 2, (75));
            }
            if (
                Command((13), (0), 1, (22)) && 
                Deaths((1), (0), 4, (142)) && 
                Deaths((1), (1), 0, (103)) && 
                Deaths((1), (1), 0, (75)) && 
                MemoryEPD(ultra[getcurpl()] + 0x008 / 4, AtMost, 76800) && 
                Switch((16), (2))
            ) {
                SetDeaths((1), (7), 2, (75));
            }
            if (
                Command((13), (0), 1, (74)) && 
                Deaths((2), (0), 4, (142)) && 
                Deaths((2), (1), 0, (103)) && 
                Deaths((2), (1), 0, (75)) && 
                MemoryEPD(test1[getcurpl()] + 0x008 / 4, AtMost, 76800) && 
                Switch((16), (2))
            ) {
                SetDeaths((2), (7), 2, (75));
            }
            if (
                Command((13), (0), 1, (43)) && 
                Deaths((3), (0), 4, (142)) && 
                Deaths((3), (1), 0, (103)) && 
                Deaths((3), (1), 0, (75)) && 
                MemoryEPD(test2[getcurpl()] + 0x008 / 4, AtMost, 76800) && 
                Switch((16), (2))
            ) {
                SetDeaths((3), (7), 2, (75));
            }
            if (
                Command((13), (0), 1, (28)) && 
                Deaths((0), (0), 2, (135)) && 
                Switch((16), (2))
            ) {
                AddStatusFlagsEPD(zazom[getcurpl()],0x800000);
            }
            if (
                Command((13), (0), 1, (28)) && 
                Deaths((0), (1), 1, (135)) && 
                Switch((16), (2))
            ) {
                RemoveStatusFlagsEPD(zazom[getcurpl()],0x800000);
            }
            if (
                Command((13), (0), 1, (22)) && 
                Deaths((1), (0), 2, (135)) && 
                Switch((16), (2))
            ) {
                AddStatusFlagsEPD(ultra[getcurpl()],0x800000);
            }
            if (
                Command((13), (0), 1, (22)) && 
                Deaths((1), (1), 1, (135)) && 
                Switch((16), (2))
            ) {
                RemoveStatusFlagsEPD(ultra[getcurpl()],0x800000);
            }
            if (
                Command((13), (0), 1, (74)) && 
                Deaths((2), (0), 2, (135)) && 
                Switch((16), (2))
            ) {
                AddStatusFlagsEPD(test1[getcurpl()],0x800000);
            }
            if (
                Command((13), (0), 1, (74)) && 
                Deaths((2), (1), 1, (135)) && 
                Switch((16), (2))
            ) {
                RemoveStatusFlagsEPD(test1[getcurpl()],0x800000);
            }
            if (
                Command((13), (0), 1, (43)) && 
                Deaths((3), (0), 2, (135)) && 
                Switch((16), (2))
            ) {
                AddStatusFlagsEPD(test2[getcurpl()],0x800000);
            }
            if (
                Command((13), (0), 1, (43)) && 
                Deaths((3), (1), 1, (135)) && 
                Switch((16), (2))
            ) {
                RemoveStatusFlagsEPD(test2[getcurpl()],0x800000);
            }
            if (
                Deaths((5), (10), 3, (35)) && 
                Switch((16), (2)) && 
                Switch((119), (3))
            ) {
                SetSwitch((119), (4));
                dwwrite(0x65FD00 + 9808 + 0 * 4, 2048000);
                dwwrite(0x65FD00 + 9808 + 28 * 4, 2048000);
                dwwrite(0x65FD00 + 9808 + 22 * 4, 2048000);
                dwwrite(0x65FD00 + 9808 + 74 * 4, 2048000);
                dwwrite(0x65FD00 + 9808 + 43 * 4, 2048000);
            }
            if (
                Deaths((5), (0), 4, (35)) && 
                Switch((16), (2)) && 
                Switch((119), (2))
            ) {
                SetSwitch((119), (5));
                dwwrite(0x65FD00 + 9808 + 0 * 4, 204800);
                dwwrite(0x65FD00 + 9808 + 28 * 4, 204800);
                dwwrite(0x65FD00 + 9808 + 22 * 4, 204800);
                dwwrite(0x65FD00 + 9808 + 74 * 4, 204800);
                dwwrite(0x65FD00 + 9808 + 43 * 4, 204800);
            }
            if (
                Deaths((5), (10), 3, (35)) && 
                Command((4), (0), 1, (103)) && 
                MemoryEPD(testhp + 0x008 / 4, AtMost, 128000) && 
                Switch((16), (2))
            ) {
                txtPtr = dwread_epd(EPD(0x640B58));
                tct.print("\x03", dwread_epd(35 * 12 + 5), " / \x04", dwread_epd(174 * 12 + 5), " / \x06", dwread_epd(208 * 12 + 5), " / \x1F500이하");
                SetMemory(0x640B58, SetTo, txtPtr);
            }
            if (
                Deaths((5), (10), 3, (35)) && 
                Command((4), (0), 1, (103)) && 
                MemoryEPD(testhp + 0x008 / 4, AtLeast, 256000) && 
                MemoryEPD(testhp + 0x008 / 4, AtMost, 511744) && 
                Switch((16), (2))
            ) {
                txtPtr = dwread_epd(EPD(0x640B58));
                tct.print("\x03", dwread_epd(35 * 12 + 5), " / \x04", dwread_epd(174 * 12 + 5), " / \x06", dwread_epd(208 * 12 + 5), " / \x1F1000이상");
                SetMemory(0x640B58, SetTo, txtPtr);
            }
            if (
                Deaths((5), (10), 3, (35)) && 
                Command((4), (0), 1, (103)) && 
                MemoryEPD(testhp + 0x008 / 4, AtLeast, 512000) && 
                MemoryEPD(testhp + 0x008 / 4, AtMost, 767744) && 
                Switch((16), (2))
            ) {
                txtPtr = dwread_epd(EPD(0x640B58));
                tct.print("\x03", dwread_epd(35 * 12 + 5), " / \x04", dwread_epd(174 * 12 + 5), " / \x06", dwread_epd(208 * 12 + 5), " / \x1F2000이상");
                SetMemory(0x640B58, SetTo, txtPtr);
            }
            if (
                Deaths((5), (10), 3, (35)) && 
                Command((4), (0), 1, (103)) && 
                MemoryEPD(testhp + 0x008 / 4, AtLeast, 768000) && 
                MemoryEPD(testhp + 0x008 / 4, AtMost, 1023744) && 
                Switch((16), (2))
            ) {
                txtPtr = dwread_epd(EPD(0x640B58));
                tct.print("\x03", dwread_epd(35 * 12 + 5), " / \x04", dwread_epd(174 * 12 + 5), " / \x06", dwread_epd(208 * 12 + 5), " / \x1F3000이상");
                SetMemory(0x640B58, SetTo, txtPtr);
            }
            if (
                Deaths((5), (10), 3, (35)) && 
                Command((4), (0), 1, (103)) && 
                MemoryEPD(testhp + 0x008 / 4, AtLeast, 1024000) && 
                MemoryEPD(testhp + 0x008 / 4, AtMost, 1152000) && 
                Switch((16), (2))
            ) {
                txtPtr = dwread_epd(EPD(0x640B58));
                tct.print("\x03", dwread_epd(35 * 12 + 5), " / \x04", dwread_epd(174 * 12 + 5), " / \x06", dwread_epd(208 * 12 + 5), " / \x1F4000이상");
                SetMemory(0x640B58, SetTo, txtPtr);
            }
            if (
                Deaths((5), (10), 3, (35)) && 
                Deaths((0), (0), 1, (208)) && 
                Deaths((0), (10), 0, (135)) && 
                Bring((13), (0), 1, (28), (123)) && 
                MemoryEPD(zazom[getcurpl()] + 0x008 / 4, AtLeast, 128001) && 
                Switch((16), (2))
            ) {
                SetDeaths((0), (7), 0, (208));
                SetMemoryEPD(zazom[getcurpl()] + 0x008 / 4, Add, -128000 * 1);
            }
            if (
                Deaths((5), (10), 3, (35)) && 
                Deaths((0), (0), 1, (208)) && 
                Deaths((0), (10), 0, (135)) && 
                Bring((13), (0), 1, (28), (123)) && 
                MemoryEPD(zazom[getcurpl()] + 0x008 / 4, AtMost, 128000) && 
                Switch((16), (2))
            ) {
                SetDeaths((0), (7), 0, (208));
                KillUnit((28), (13));
            }
            if (
                Deaths((5), (10), 3, (35)) && 
                Deaths((1), (0), 1, (208)) && 
                Deaths((1), (10), 0, (135)) && 
                Bring((13), (0), 1, (22), (123)) && 
                MemoryEPD(ultra[getcurpl()] + 0x008 / 4, AtLeast, 128001) && 
                Switch((16), (2))
            ) {
                SetDeaths((1), (7), 0, (208));
                SetMemoryEPD(ultra[getcurpl()] + 0x008 / 4, Add, -128000 * 1);
            }
            if (
                Deaths((5), (10), 3, (35)) && 
                Deaths((1), (0), 1, (208)) && 
                Deaths((1), (10), 0, (135)) && 
                Bring((13), (0), 1, (22), (123)) && 
                MemoryEPD(ultra[getcurpl()] + 0x008 / 4, AtMost, 128000) && 
                Switch((16), (2))
            ) {
                SetDeaths((1), (7), 0, (208));
                KillUnit((22), (13));
            }
            if (
                Deaths((5), (10), 3, (35)) && 
                Deaths((2), (0), 1, (208)) && 
                Deaths((2), (10), 0, (135)) && 
                Bring((13), (0), 1, (74), (123)) && 
                MemoryEPD(test1[getcurpl()] + 0x008 / 4, AtLeast, 128001) && 
                Switch((16), (2))
            ) {
                SetDeaths((2), (7), 0, (208));
                SetMemoryEPD(test1[getcurpl()] + 0x008 / 4, Add, -128000 * 1);
            }
            if (
                Deaths((5), (10), 3, (35)) && 
                Deaths((2), (0), 1, (208)) && 
                Deaths((2), (10), 0, (135)) && 
                Bring((13), (0), 1, (74), (123)) && 
                MemoryEPD(test1[getcurpl()] + 0x008 / 4, AtMost, 128000) && 
                Switch((16), (2))
            ) {
                SetDeaths((2), (7), 0, (208));
                KillUnit((74), (13));
            }
            if (
                Deaths((5), (10), 3, (35)) && 
                Deaths((3), (0), 1, (208)) && 
                Deaths((3), (10), 0, (135)) && 
                Bring((13), (0), 1, (43), (123)) && 
                MemoryEPD(test2[getcurpl()] + 0x008 / 4, AtLeast, 128001) && 
                Switch((16), (2))
            ) {
                SetDeaths((3), (7), 0, (208));
                SetMemoryEPD(test2[getcurpl()] + 0x008 / 4, Add, -128000 * 1);
            }
            if (
                Deaths((5), (10), 3, (35)) && 
                Deaths((3), (0), 1, (208)) && 
                Deaths((3), (10), 0, (135)) && 
                Bring((13), (0), 1, (43), (123)) && 
                MemoryEPD(test2[getcurpl()] + 0x008 / 4, AtMost, 128000) && 
                Switch((16), (2))
            ) {
                SetDeaths((3), (7), 0, (208));
                KillUnit((43), (13));
            }
            if (
                Deaths((5), (10), 3, (35)) && 
                Command((13), (10), 0, (103)) && 
                Bring((13), (10), 0, (103), (141)) && 
                Switch((16), (2))
            ) {
                testhp = epdread_epd(EPD(0x628438));
                CreateUnit(1, (103), (141), (13));
                SetMemoryEPD(testhp + 0x008 / 4, SetTo, 1216000);
            }
            if (
                Deaths((5), (10), 3, (35)) && 
                Deaths((5), (10), 8, (208)) && 
                Deaths((5), (10), 222, (174)) && 
                Command((13), (10), 1, (103)) && 
                MemoryEPD(testhp + 0x008 / 4, AtMost, 1215999) && 
                Switch((16), (2))
            ) {
                SetMemoryEPD(testhp + 0x008 / 4, SetTo, 1216000);
            }
            if (
                Deaths((5), (10), 3, (35)) && 
                Deaths((5), (10), 7, (208)) && 
                Deaths((5), (10), 1, (91)) && 
                Bring((18), (10), 1, (0), (123)) && 
                Bring((4), (10), 1, (0), (123)) && 
                MemoryEPD(marine[getcurpl()] + 0x008 / 4, AtLeast, 204800) && 
                Switch((16), (2)) && 
                Never()
            ) {
                SetMemoryEPD(zazom[getcurpl()] + 0x008 / 4, SetTo, 102400);
                SetMemoryEPD(ultra[getcurpl()] + 0x008 / 4, SetTo, 102400);
                SetMemoryEPD(test1[getcurpl()] + 0x008 / 4, SetTo, 102400);
                SetMemoryEPD(test2[getcurpl()] + 0x008 / 4, SetTo, 102400);
                SetMemoryEPD(marine[getcurpl()] + 0x008 / 4, SetTo, 102400);
            }
            if (
                Deaths((5), (10), 3, (35)) && 
                Command((13), (0), 1, (28)) && 
                Command((13), (0), 1, (103)) && 
                MemoryEPD(zazom[getcurpl()] + 0x008 / 4, AtMost, 100352) && 
                MemoryEPD(testhp + 0x008 / 4, AtLeast, 2048) && 
                Switch((16), (2))
            ) {
                SetMemoryEPD(zazom[getcurpl()] + 0x008 / 4, Add, 2048 * 1);
                SetMemoryEPD(testhp + 0x008 / 4, Add, -2048 * 1);
            }
            if (
                Deaths((5), (10), 3, (35)) && 
                Command((13), (0), 1, (22)) && 
                Command((13), (0), 1, (103)) && 
                MemoryEPD(ultra[getcurpl()] + 0x008 / 4, AtMost, 100352) && 
                MemoryEPD(testhp + 0x008 / 4, AtLeast, 2048) && 
                Switch((16), (2))
            ) {
                SetMemoryEPD(ultra[getcurpl()] + 0x008 / 4, Add, 2048 * 1);
                SetMemoryEPD(testhp + 0x008 / 4, Add, -2048 * 1);
            }
            if (
                Deaths((5), (10), 3, (35)) && 
                Command((13), (0), 1, (74)) && 
                Command((13), (0), 1, (103)) && 
                MemoryEPD(test1[getcurpl()] + 0x008 / 4, AtMost, 100352) && 
                MemoryEPD(testhp + 0x008 / 4, AtLeast, 2048) && 
                Switch((16), (2))
            ) {
                SetMemoryEPD(test1[getcurpl()] + 0x008 / 4, Add, 2048 * 1);
                SetMemoryEPD(testhp + 0x008 / 4, Add, -2048 * 1);
            }
            if (
                Deaths((5), (10), 3, (35)) && 
                Command((13), (0), 1, (43)) && 
                Command((13), (0), 1, (103)) && 
                MemoryEPD(test2[getcurpl()] + 0x008 / 4, AtMost, 100352) && 
                MemoryEPD(testhp + 0x008 / 4, AtLeast, 2048) && 
                Switch((16), (2))
            ) {
                SetMemoryEPD(test2[getcurpl()] + 0x008 / 4, Add, 2048 * 1);
                SetMemoryEPD(testhp + 0x008 / 4, Add, -2048 * 1);
            }
            if (
                Deaths((5), (10), 3, (35)) && 
                Command((13), (0), 1, (0)) && 
                Command((13), (0), 1, (103)) && 
                MemoryEPD(marine[getcurpl()] + 0x008 / 4, AtMost, 100352) && 
                MemoryEPD(testhp + 0x008 / 4, AtLeast, 2048) && 
                Switch((16), (2))
            ) {
                SetMemoryEPD(marine[getcurpl()] + 0x008 / 4, Add, 2048 * 1);
                SetMemoryEPD(testhp + 0x008 / 4, Add, -2048 * 1);
            }
            if (
                Deaths((5), (10), 3, (35)) && 
                Deaths((5), (0), 100, (154)) && 
                Bring((5), (0), 1, (7), (123)) && 
                Bring((4), (0), 1, (0), (123)) && 
                Switch((16), (2))
            ) {
                bwrite_epd(zazom[getcurpl()] + 0x04D / 4,  0x04D % 4, 1);
                bwrite_epd(ultra[getcurpl()] + 0x04D / 4,  0x04D % 4, 1);
                bwrite_epd(test1[getcurpl()] + 0x04D / 4,  0x04D % 4, 1);
                bwrite_epd(test2[getcurpl()] + 0x04D / 4,  0x04D % 4, 1);
            }
            if (
                Deaths((5), (10), 3, (35)) && 
                Deaths((5), (0), 100, (160)) && 
                Bring((5), (0), 1, (7), (123)) && 
                Bring((4), (0), 1, (0), (123)) && 
                Switch((16), (2))
            ) {
                bwrite_epd(zazom[getcurpl()] + 0x04D / 4,  0x04D % 4, 1);
                bwrite_epd(ultra[getcurpl()] + 0x04D / 4,  0x04D % 4, 1);
                bwrite_epd(test1[getcurpl()] + 0x04D / 4,  0x04D % 4, 1);
                bwrite_epd(test2[getcurpl()] + 0x04D / 4,  0x04D % 4, 1);
            }
            if (
                Deaths((5), (10), 3, (35)) && 
                Deaths((5), (0), 100, (166)) && 
                Bring((5), (0), 1, (7), (123)) && 
                Bring((4), (0), 1, (0), (123)) && 
                Switch((16), (2))
            ) {
                bwrite_epd(zazom[getcurpl()] + 0x04D / 4,  0x04D % 4, 1);
                bwrite_epd(ultra[getcurpl()] + 0x04D / 4,  0x04D % 4, 1);
                bwrite_epd(test1[getcurpl()] + 0x04D / 4,  0x04D % 4, 1);
                bwrite_epd(test2[getcurpl()] + 0x04D / 4,  0x04D % 4, 1);
            }
        }
    EUDEndPlayerLoop();
    EUDPlayerLoop()();
        if (getcurpl() == 4) {
            if (
                Deaths((5), (10), 2, (35)) && 
                Switch((16), (2))
            ) {
                txtPtr = dwread_epd(EPD(0x640B58));
                tct.print("\x1F", dwread_epd(108 * 12 + 6), "");
                SetMemory(0x640B58, SetTo, txtPtr);
            }
            if (
                Deaths((5), (10), 3, (35)) && 
                Switch((16), (2))
            ) {
                txtPtr = dwread_epd(EPD(0x640B58));
                tct.print("\x1F", dwread_epd(121 * 12 + 5), "");
                SetMemory(0x640B58, SetTo, txtPtr);
            }
            if (
                Deaths((5), (10), 4, (35)) && 
                Switch((16), (2))
            ) {
                txtPtr = dwread_epd(EPD(0x640B58));
                tct.print("\x1F닥템 ", dwread_epd(103 * 12 + 2), " / \x11뮤탈 ", dwread_epd(103 * 12 + 3), " / \x1F왼쪽 ", dwread_epd(153 * 12 + 6), " / \x11중앙 ", dwread_epd(145 * 12 + 6), " / \x1F오른 ", dwread_epd(58 * 12 + 6), "\n\x1F1P ", dwread_epd(35 * 12 + 0), " / \x112P ", dwread_epd(35 * 12 + 1), " / \x1F3P ", dwread_epd(35 * 12 + 2), " / \x114P ", dwread_epd(35 * 12 + 3), "");
                SetMemory(0x640B58, SetTo, txtPtr);
            }
            if (
                Deaths((5), (10), 5, (35)) && 
                Switch((16), (2))
            ) {
                txtPtr = dwread_epd(EPD(0x640B58));
                tct.print("\x1F제", dwread_epd(75 * 12 + 6), "/\x03히", dwread_epd(135 * 12 + 6), "/\x08", dwread_epd(35 * 12 + 0), "/\x0E", dwread_epd(35 * 12 + 1), "/\x0F", dwread_epd(35 * 12 + 2), "/\x10", dwread_epd(35 * 12 + 3), "\n\x08히페", dwread_epd(191 * 12 + 0), " / \x0E마젤란 ", dwread_epd(191 * 12 + 1), " / \x0F닥템 ", dwread_epd(191 * 12 + 2), " / \x10뮤탈 ", dwread_epd(191 * 12 + 3), "");
                SetMemory(0x640B58, SetTo, txtPtr);
            }
            if (
                MemoryX(0x596A18 + 78, AtLeast, 1, 1 << (8 * (78 % 4))) && 
                Switch((126), (2))
            ) {
                bwrite(0x58D2B0 + 0x207C * ((7) / 46) + (18) * (46 - 31 * ((7) / 46)) + ((7) % 46), 200);
            }
            if (
                MemoryX(0x596A18 + 87, AtLeast, 1, 1 << (8 * (87 % 4))) && 
                Switch((126), (2))
            ) {
                bwrite(0x58D2B0 + 0x207C * ((7) / 46) + (18) * (46 - 31 * ((7) / 46)) + ((7) % 46), 100);
            }
        }
    EUDEndPlayerLoop();
    EUDPlayerLoop()();
        if (getcurpl() == 0 || getcurpl() == 1 || getcurpl() == 2 || getcurpl() == 3 || getcurpl() == 4) {
            if (
                Deaths((5), (1), 3, (35)) && 
                isButtonShow(getcurpl(),135)
            ) {
                SetHideButton(getcurpl(),135);
                ButtonRefresh();
            }
            if (
                Deaths((5), (10), 4, (35)) && 
                isButtonHide(getcurpl(),135)
            ) {
                SetShowButton(getcurpl(),135);
                ButtonRefresh();
            }
            if (
                Deaths((5), (0), 5, (35)) && 
                isButtonShow(getcurpl(),135)
            ) {
                SetHideButton(getcurpl(),135);
                ButtonRefresh();
            }
            if (
                Command((13), (0), 1, (0))
            ) {
                AddStatusFlagsEPD(marine[getcurpl()],805306368);
            }
            if (
                Deaths((5), (10), 1, (35)) && 
                Deaths((13), (10), 1, (58)) && 
                Command((13), (10), 0, (0))
            ) {
                SetDeaths((13), (7), 0, (58));
                marine[getcurpl()] = epdread_epd(EPD(0x628438));
                CreateUnit(1, (0), (56), (13));
                AddStatusFlagsEPD(marine[getcurpl()],805306368);
            }
            if (
                Deaths((5), (10), 2, (35)) && 
                Deaths((13), (10), 1, (58)) && 
                Command((13), (10), 0, (0)) && 
                Bring((5), (0), 1, (7), (86)) && 
                Bring((5), (10), 0, (7), (87))
            ) {
                SetDeaths((13), (7), 0, (58));
                marine[getcurpl()] = epdread_epd(EPD(0x628438));
                CreateUnit(1, (0), (86), (13));
                AddStatusFlagsEPD(marine[getcurpl()],805306368);
            }
            if (
                Deaths((5), (10), 2, (35)) && 
                Deaths((13), (10), 1, (58)) && 
                Command((13), (10), 0, (0)) && 
                Bring((5), (10), 0, (7), (86)) && 
                Bring((5), (0), 1, (7), (87))
            ) {
                SetDeaths((13), (7), 0, (58));
                marine[getcurpl()] = epdread_epd(EPD(0x628438));
                CreateUnit(1, (0), (87), (13));
                AddStatusFlagsEPD(marine[getcurpl()],805306368);
            }
            if (
                Deaths((5), (10), 3, (35)) && 
                Deaths((13), (10), 1, (58)) && 
                Command((13), (10), 0, (0))
            ) {
                SetDeaths((13), (7), 0, (58));
                marine[getcurpl()] = epdread_epd(EPD(0x628438));
                CreateUnit(1, (0), (123), (13));
                AddStatusFlagsEPD(marine[getcurpl()],805306368);
            }
            if (
                Deaths((5), (10), 4, (35)) && 
                Deaths((5), (0), 50, (155)) && 
                Deaths((5), (1), 500, (155)) && 
                Deaths((13), (10), 1, (58)) && 
                Command((13), (10), 0, (0))
            ) {
                SetDeaths((13), (7), 0, (58));
                marine[getcurpl()] = epdread_epd(EPD(0x628438));
                CreateUnit(1, (0), (167), (13));
                AddStatusFlagsEPD(marine[getcurpl()],805306368);
            }
            if (
                Deaths((5), (10), 4, (35)) && 
                Deaths((5), (0), 651, (155)) && 
                Deaths((5), (0), 50, (163)) && 
                Deaths((13), (10), 1, (58)) && 
                Command((13), (10), 0, (0))
            ) {
                SetDeaths((13), (7), 0, (58));
                marine[getcurpl()] = epdread_epd(EPD(0x628438));
                CreateUnit(1, (0), (168), (13));
                AddStatusFlagsEPD(marine[getcurpl()],805306368);
            }
            if (
                Deaths((5), (10), 5, (35)) && 
                Deaths((5), (1), 500, (102)) && 
                Deaths((5), (0), 345, (102)) && 
                Deaths((13), (10), 1, (58)) && 
                Command((13), (10), 0, (0))
            ) {
                SetDeaths((13), (7), 0, (58));
                marine[getcurpl()] = epdread_epd(EPD(0x628438));
                CreateUnit(1, (0), (73), (13));
                SetInvincibility((4), (0), (18), (224));
                AddStatusFlagsEPD(marine[getcurpl()],805306368);
            }
            if (
                Deaths((5), (10), 5, (35)) && 
                Deaths((5), (1), 999, (102)) && 
                Deaths((5), (0), 505, (102)) && 
                Deaths((13), (10), 1, (58)) && 
                Command((13), (10), 0, (0))
            ) {
                SetDeaths((13), (7), 0, (58));
                marine[getcurpl()] = epdread_epd(EPD(0x628438));
                CreateUnit(1, (0), (73), (13));
                AddStatusFlagsEPD(marine[getcurpl()],805306368);
            }
            if (
                Deaths((5), (10), 5, (35)) && 
                Deaths((5), (1), 1999, (102)) && 
                Deaths((5), (0), 1084, (102)) && 
                Deaths((13), (10), 1, (58)) && 
                Command((13), (10), 0, (0))
            ) {
                SetDeaths((13), (7), 0, (58));
                marine[getcurpl()] = epdread_epd(EPD(0x628438));
                CreateUnit(1, (0), (73), (13));
                SetInvincibility((4), (0), (18), (224));
                AddStatusFlagsEPD(marine[getcurpl()],805306368);
            }
        }
    EUDEndPlayerLoop();
    EUDPlayerLoop()();
        if (getcurpl() == 0 || getcurpl() == 1 || getcurpl() == 2 || getcurpl() == 3 || getcurpl() == 4) {
            if (
                Command((13), (0), 1, (0)) && 
                Deaths((13), (0), 100, (135))
            ) {
                AddStatusFlagsEPD(marine[getcurpl()],0x800000);
            }
            if (
                Deaths((5), (1), 4, (35)) && 
                Command((13), (0), 1, (0)) && 
                Deaths((13), (10), 0, (135))
            ) {
                RemoveStatusFlagsEPD(marine[getcurpl()],0x800000);
            }
            if (
                Command((13), (0), 1, (0)) && 
                Deaths((13), (0), 4, (142)) && 
                Deaths((13), (1), 0, (103)) && 
                Deaths((13), (1), 0, (75)) && 
                MemoryEPD(marine[getcurpl()] + 0x008 / 4, AtMost, 76800)
            ) {
                SetDeaths((13), (7), 2, (75));
            }
            if (
                Bring((13), (0), 1, (87), (64)) && 
                Deaths((13), (1), 999, (27)) && 
                MemoryEPD(bunsin1[getcurpl()] + 0x008 / 4, AtLeast, 20736) && 
                wread_epd(bunsin1[getcurpl()] + 0x0A2 / 4,  0x0A2 % 4) >= 256 && 
                Switch((16), (3))
            ) {
                SetMemoryEPD(bunsin1[getcurpl()] + 0x0A2 / 4, Add, -256 * 65536);
            }
            if (
                Bring((13), (0), 1, (87), (64)) && 
                Deaths((13), (1), 999, (18)) && 
                MemoryEPD(bunsin2[getcurpl()] + 0x008 / 4, AtLeast, 20736) && 
                wread_epd(bunsin2[getcurpl()] + 0x0A2 / 4,  0x0A2 % 4) >= 256 && 
                Switch((16), (3))
            ) {
                SetMemoryEPD(bunsin2[getcurpl()] + 0x0A2 / 4, Add, -256 * 65536);
            }
            if (
                Bring((13), (0), 1, (87), (64)) && 
                Deaths((13), (1), 999, (27)) && 
                MemoryEPD(bunsin1[getcurpl()] + 0x008 / 4, AtLeast, 20736) && 
                wread_epd(bunsin1[getcurpl()] + 0x0A2 / 4,  0x0A2 % 4) <= 255 && 
                Switch((16), (3)) && 
                CBringEPD(bunsin1[getcurpl()],64,148)
            ) {
                SetDeaths((13), (7), 1000, (27));
                AddStatusFlagsEPD(bunsin1[getcurpl()],1073741824);
                bwrite_epd(bunsin1[getcurpl()] + 0x11A / 4,  0x11A % 4, 40);
            }
            if (
                Bring((13), (0), 1, (87), (64)) && 
                Deaths((13), (1), 999, (18)) && 
                MemoryEPD(bunsin2[getcurpl()] + 0x008 / 4, AtLeast, 20736) && 
                wread_epd(bunsin2[getcurpl()] + 0x0A2 / 4,  0x0A2 % 4) <= 255 && 
                Switch((16), (3)) && 
                CBringEPD(bunsin2[getcurpl()],64,148)
            ) {
                SetDeaths((13), (7), 1000, (18));
                AddStatusFlagsEPD(bunsin2[getcurpl()],1073741824);
                bwrite_epd(bunsin2[getcurpl()] + 0x11A / 4,  0x11A % 4, 40);
            }
            if (
                Bring((13), (0), 1, (87), (64)) && 
                Deaths((13), (1), 999, (27)) && 
                MemoryEPD(bunsin1[getcurpl()] + 0x008 / 4, AtMost, 20736) && 
                Switch((16), (3)) && 
                CBringEPD(bunsin1[getcurpl()],64,148)
            ) {
                SetDeaths((13), (7), 1000, (27));
                AddStatusFlagsEPD(bunsin1[getcurpl()],1073741824);
                bwrite_epd(bunsin1[getcurpl()] + 0x11A / 4,  0x11A % 4, 40);
            }
            if (
                Bring((13), (0), 1, (87), (64)) && 
                Deaths((13), (1), 999, (18)) && 
                MemoryEPD(bunsin2[getcurpl()] + 0x008 / 4, AtMost, 20736) && 
                Switch((16), (3)) && 
                CBringEPD(bunsin2[getcurpl()],64,148)
            ) {
                SetDeaths((13), (7), 1000, (18));
                AddStatusFlagsEPD(bunsin2[getcurpl()],1073741824);
                bwrite_epd(bunsin2[getcurpl()] + 0x11A / 4,  0x11A % 4, 40);
            }
        }
    EUDEndPlayerLoop();
    EUDPlayerLoop()();
        if (getcurpl() == 0 || getcurpl() == 1 || getcurpl() == 2 || getcurpl() == 3 || getcurpl() == 4) {
            if (
                Command((13), (0), 1, (0)) && 
                Deaths((5), (1), 4, (35)) && 
                Deaths((13), (10), 1, (142)) && 
                Switch((9), (3))
            ) {
                tct.chatAnnouncement("\x04지원사격 \x07", dwread_epd(148 * 12 + getcurpl()), "");
            }
            if (
                Command((13), (0), 1, (0)) && 
                Deaths((5), (1), 4, (35)) && 
                Deaths((13), (10), 2, (142)) && 
                Switch((9), (3))
            ) {
                tct.chatAnnouncement("\x04지원사격 \x07", dwread_epd(148 * 12 + getcurpl()), " \x1F/ \x04마인드 컨트롤 \x07", dwread_epd(191 * 12 + getcurpl()), "");
            }
            if (
                Command((13), (0), 1, (0)) && 
                Deaths((5), (1), 4, (35)) && 
                Deaths((13), (10), 3, (142)) && 
                Switch((9), (3))
            ) {
                tct.chatAnnouncement("\x04지원사격 \x07", dwread_epd(148 * 12 + getcurpl()), " \x1F/ \x04마인드 컨트롤 \x07", dwread_epd(191 * 12 + getcurpl()), " \x1F/ \x04회피 \x07", dwread_epd(97 * 12 + getcurpl()), "");
            }
            if (
                Command((13), (0), 1, (0)) && 
                Deaths((5), (1), 4, (35)) && 
                Deaths((13), (10), 4, (142)) && 
                Switch((9), (3))
            ) {
                tct.chatAnnouncement("\x04지원사격 \x07", dwread_epd(148 * 12 + getcurpl()), " \x1F/ \x04마인드 컨트롤 \x07", dwread_epd(191 * 12 + getcurpl()), " \x1F/ \x04회피 \x07", dwread_epd(97 * 12 + getcurpl()), " \x1F/ \x04힐 \x07", dwread_epd(103 * 12 + getcurpl()), "");
            }
            if (
                Command((13), (0), 1, (0)) && 
                Deaths((5), (1), 4, (35)) && 
                Deaths((13), (10), 5, (142)) && 
                Switch((9), (3))
            ) {
                tct.chatAnnouncement("\x04지원사격 \x07", dwread_epd(148 * 12 + getcurpl()), " \x1F/ \x04마인드 컨트롤 \x07", dwread_epd(191 * 12 + getcurpl()), " \x1F/ \x04회피 \x07", dwread_epd(97 * 12 + getcurpl()), " \x1F/ \x04힐 \x07", dwread_epd(103 * 12 + getcurpl()), " \x1F/ \x04분신술 \x07", dwread_epd(35 * 12 + getcurpl()), "");
            }
            if (
                Command((13), (0), 1, (0)) && 
                Deaths((13), (10), 1, (142)) && 
                Switch((9), (2))
            ) {
                tct.chatAnnouncement("\x04지원사격 \x07", dwread_epd(148 * 12 + getcurpl()), " \x1F/ \x03지하 \x07", dwread_epd(91 * 12 + 5), "\x03층");
            }
            if (
                Command((13), (0), 1, (0)) && 
                Deaths((13), (10), 2, (142)) && 
                Switch((9), (2))
            ) {
                tct.chatAnnouncement("\x04지원사격 \x07", dwread_epd(148 * 12 + getcurpl()), " \x1F/ \x04마인드 컨트롤 \x07", dwread_epd(191 * 12 + getcurpl()), " \x1F/ \x03지하 \x07", dwread_epd(91 * 12 + 5), "\x03층");
            }
            if (
                Command((13), (0), 1, (0)) && 
                Deaths((13), (10), 3, (142)) && 
                Switch((9), (2))
            ) {
                tct.chatAnnouncement("\x04지원사격 \x07", dwread_epd(148 * 12 + getcurpl()), " \x1F/ \x04마인드 컨트롤 \x07", dwread_epd(191 * 12 + getcurpl()), " \x1F/ \x04회피 \x07", dwread_epd(97 * 12 + getcurpl()), " \x1F/ \x03지하 \x07", dwread_epd(91 * 12 + 5), "\x03층");
            }
            if (
                Command((13), (0), 1, (0)) && 
                Deaths((5), (10), 5, (35)) && 
                Deaths((13), (10), 1, (142)) && 
                Switch((9), (3))
            ) {
                tct.chatAnnouncement("\x04지원사격 \x07", dwread_epd(148 * 12 + getcurpl()), " \x1F/ \x03공유 목숨 \x07", dwread_epd(204 * 12 + 5), "");
            }
            if (
                Command((13), (0), 1, (0)) && 
                Deaths((5), (10), 5, (35)) && 
                Deaths((13), (10), 2, (142)) && 
                Switch((9), (3))
            ) {
                tct.chatAnnouncement("\x04지원사격 \x07", dwread_epd(148 * 12 + getcurpl()), " \x1F/ \x04마인드 컨트롤 \x07", dwread_epd(191 * 12 + getcurpl()), " \x1F/ \x03공유 목숨 \x07", dwread_epd(204 * 12 + 5), "");
            }
            if (
                Command((13), (0), 1, (0)) && 
                Deaths((5), (10), 5, (35)) && 
                Deaths((13), (10), 3, (142)) && 
                Switch((9), (3))
            ) {
                tct.chatAnnouncement("\x04지원사격 \x07", dwread_epd(148 * 12 + getcurpl()), " \x1F/ \x04마인드 컨트롤 \x07", dwread_epd(191 * 12 + getcurpl()), " \x1F/ \x04회피 \x07", dwread_epd(97 * 12 + getcurpl()), " \x1F/ \x03공유 목숨 \x07", dwread_epd(204 * 12 + 5), "");
            }
            if (
                Command((13), (0), 1, (0)) && 
                Deaths((5), (10), 5, (35)) && 
                Deaths((13), (10), 4, (142)) && 
                Switch((9), (3))
            ) {
                tct.chatAnnouncement("\x04지원사격 \x07", dwread_epd(148 * 12 + getcurpl()), " \x1F/ \x04마인드 컨트롤 \x07", dwread_epd(191 * 12 + getcurpl()), " \x1F/ \x04회피 \x07", dwread_epd(97 * 12 + getcurpl()), " \x1F/ \x04힐 \x07", dwread_epd(103 * 12 + getcurpl()), " \x1F/ \x03공유 목숨 \x07", dwread_epd(204 * 12 + 5), "");
            }
            if (
                Command((13), (0), 1, (0)) && 
                Deaths((5), (10), 5, (35)) && 
                Deaths((13), (10), 5, (142)) && 
                Switch((9), (3))
            ) {
                tct.chatAnnouncement("\x04지원사격 \x07", dwread_epd(148 * 12 + getcurpl()), " \x1F/ \x04마인드 컨트롤 \x07", dwread_epd(191 * 12 + getcurpl()), " \x1F/ \x04회피 \x07", dwread_epd(97 * 12 + getcurpl()), " \x1F/ \x04힐 \x07", dwread_epd(103 * 12 + getcurpl()), " \x1F/ \x04분신술 \x07", dwread_epd(35 * 12 + getcurpl()), " \x1F/ \x03공유 목숨 \x07", dwread_epd(204 * 12 + 5), "");
            }
            if (
                Command((13), (10), 0, (0)) && 
                Deaths((5), (10), 5, (35)) && 
                Deaths((13), (10), 5, (142)) && 
                Deaths((13), (1), 1035, (19)) && 
                Deaths((13), (0), 1000, (19)) && 
                Switch((9), (3))
            ) {
                tct.chatAnnouncement("\x04지원사격 \x07", dwread_epd(148 * 12 + getcurpl()), " \x1F/ \x04마인드 컨트롤 \x07", dwread_epd(191 * 12 + getcurpl()), " \x1F/ \x04회피 \x07", dwread_epd(97 * 12 + getcurpl()), " \x1F/ \x04힐 \x07", dwread_epd(103 * 12 + getcurpl()), " \x1F/ \x04분신술 \x07", dwread_epd(35 * 12 + getcurpl()), " \x1F/ \x03공유 목숨 \x07", dwread_epd(204 * 12 + 5), "");
            }
            if (
                Command((13), (10), 0, (0)) && 
                Deaths((13), (0), 2, (225))
            ) {
                SetDeaths((13), (7), 0, (225));
                tct.chatAnnouncement("");
            }
        }
    EUDEndPlayerLoop();
    EUDPlayerLoop()();
        if (getcurpl() == 0 || getcurpl() == 1 || getcurpl() == 2 || getcurpl() == 3 || getcurpl() == 4) {
            if (
                Deaths((5), (10), 2, (35)) && 
                Deaths((5), (1), 1, (77)) && 
                Deaths((13), (0), 1, (31)) && 
                Deaths((13), (10), 0, (135)) && 
                Bring((13), (0), 1, (0), (113)) && 
                MemoryEPD(marine[getcurpl()] + 0x008 / 4, AtLeast, 25601)
            ) {
                SetMemoryEPD(marine[getcurpl()] + 0x008 / 4, Add, -25600 * 1);
                SetDeaths((13), (7), 0, (31));
            }
            if (
                Deaths((5), (10), 2, (35)) && 
                Deaths((5), (0), 2, (77)) && 
                Deaths((13), (0), 1, (31)) && 
                Deaths((13), (10), 0, (135)) && 
                Bring((13), (0), 1, (0), (113)) && 
                MemoryEPD(marine[getcurpl()] + 0x008 / 4, AtLeast, 51201)
            ) {
                SetMemoryEPD(marine[getcurpl()] + 0x008 / 4, Add, -51200 * 1);
                SetDeaths((13), (7), 0, (31));
            }
            if (
                Deaths((5), (10), 2, (35)) && 
                Deaths((5), (1), 1, (77)) && 
                Deaths((13), (0), 1, (31)) && 
                Deaths((13), (10), 0, (135)) && 
                Bring((13), (0), 1, (0), (113)) && 
                MemoryEPD(marine[getcurpl()] + 0x008 / 4, AtMost, 25600)
            ) {
                SetDeaths((13), (7), 0, (31));
                SetDeaths((13), (7), 1, (0));
                KillUnit((0), (13));
            }
            if (
                Deaths((5), (10), 2, (35)) && 
                Deaths((5), (0), 2, (77)) && 
                Deaths((13), (0), 1, (31)) && 
                Deaths((13), (10), 0, (135)) && 
                Bring((13), (0), 1, (0), (113)) && 
                MemoryEPD(marine[getcurpl()] + 0x008 / 4, AtMost, 51200)
            ) {
                SetDeaths((13), (7), 0, (31));
                SetDeaths((13), (7), 1, (0));
                KillUnit((0), (13));
            }
            if (
                Deaths((5), (10), 3, (35)) && 
                Deaths((5), (10), 1, (77)) && 
                Deaths((13), (0), 1, (208)) && 
                Deaths((13), (10), 0, (135)) && 
                Bring((13), (0), 1, (0), (123)) && 
                MemoryEPD(marine[getcurpl()] + 0x008 / 4, AtLeast, 25601)
            ) {
                SetDeaths((13), (7), 0, (208));
                SetMemoryEPD(marine[getcurpl()] + 0x008 / 4, Add, -25600 * 1);
                PlayWAV("staredit\\wav\\zombie boom2.ogg");
            }
            if (
                Deaths((5), (10), 3, (35)) && 
                Deaths((5), (10), 2, (77)) && 
                Deaths((13), (0), 1, (208)) && 
                Deaths((13), (10), 0, (135)) && 
                Bring((13), (0), 1, (0), (123)) && 
                MemoryEPD(marine[getcurpl()] + 0x008 / 4, AtLeast, 51201)
            ) {
                SetDeaths((13), (7), 0, (208));
                SetMemoryEPD(marine[getcurpl()] + 0x008 / 4, Add, -51200 * 1);
                PlayWAV("staredit\\wav\\zombie boom2.ogg");
            }
            if (
                Deaths((5), (10), 3, (35)) && 
                Deaths((5), (10), 3, (77)) && 
                Deaths((13), (0), 1, (208)) && 
                Deaths((13), (10), 0, (135)) && 
                Bring((13), (0), 1, (0), (123)) && 
                MemoryEPD(marine[getcurpl()] + 0x008 / 4, AtLeast, 76801)
            ) {
                SetDeaths((13), (7), 0, (208));
                SetMemoryEPD(marine[getcurpl()] + 0x008 / 4, Add, -76800 * 1);
                PlayWAV("staredit\\wav\\zombie boom2.ogg");
            }
            if (
                Deaths((5), (10), 3, (35)) && 
                Deaths((5), (10), 1, (77)) && 
                Deaths((13), (0), 1, (208)) && 
                Deaths((13), (10), 0, (135)) && 
                Bring((13), (0), 1, (0), (123)) && 
                MemoryEPD(marine[getcurpl()] + 0x008 / 4, AtMost, 25600)
            ) {
                SetDeaths((13), (7), 0, (208));
                SetDeaths((13), (7), 1, (0));
                KillUnit((0), (13));
                PlayWAV("staredit\\wav\\zombie boom2.ogg");
            }
            if (
                Deaths((5), (10), 3, (35)) && 
                Deaths((5), (10), 2, (77)) && 
                Deaths((13), (0), 1, (208)) && 
                Deaths((13), (10), 0, (135)) && 
                Bring((13), (0), 1, (0), (123)) && 
                MemoryEPD(marine[getcurpl()] + 0x008 / 4, AtMost, 51200)
            ) {
                SetDeaths((13), (7), 0, (208));
                SetDeaths((13), (7), 1, (0));
                KillUnit((0), (13));
                PlayWAV("staredit\\wav\\zombie boom2.ogg");
            }
            if (
                Deaths((5), (10), 3, (35)) && 
                Deaths((5), (10), 3, (77)) && 
                Deaths((13), (0), 1, (208)) && 
                Deaths((13), (10), 0, (135)) && 
                Bring((13), (0), 1, (0), (123)) && 
                MemoryEPD(marine[getcurpl()] + 0x008 / 4, AtMost, 76800)
            ) {
                SetDeaths((13), (7), 0, (208));
                SetDeaths((13), (7), 1, (0));
                KillUnit((0), (13));
                PlayWAV("staredit\\wav\\zombie boom2.ogg");
            }
            if (
                Deaths((5), (10), 3, (35)) && 
                Bring((13), (0), 1, (0), (122)) && 
                Kills((13), (0), 1, (223))
            ) {
                SetDeaths((13), (8), 10000, (114));
                SetKills((getcurpl()), (9), 1, (223));
            }
        }
    EUDEndPlayerLoop();
    EUDPlayerLoop()();
        if (getcurpl() == 5) {
            if (
                Deaths((5), (10), 3, (35)) && 
                Switch((128), (2))
            ) {
                SetSwitch((128), (5));
                SetKills((0), (7), 0, (223));
                SetKills((1), (7), 0, (223));
                SetKills((2), (7), 0, (223));
                SetKills((3), (7), 0, (223));
                SetKills((4), (7), 0, (223));
            }
        }
    EUDEndPlayerLoop();
    EUDPlayerLoop()();
        if (getcurpl() == 0 || getcurpl() == 1 || getcurpl() == 2 || getcurpl() == 3 || getcurpl() == 4) {
            if (
                Deaths((5), (10), 4, (35)) && 
                Deaths((5), (0), 120, (155)) && 
                Bring((13), (0), 1, (0), (155)) && 
                wread_epd(marine[getcurpl()] + 0x0A2 / 4,  0x0A2 % 4) >= 51200 && 
                isButtonDisable(getcurpl(),227)
            ) {
                SetButtonEnable(getcurpl(),227);
                ButtonRefresh();
            }
            if (
                Deaths((5), (10), 4, (35)) && 
                Deaths((5), (0), 120, (155)) && 
                Bring((13), (0), 1, (0), (155)) && 
                wread_epd(marine[getcurpl()] + 0x0A2 / 4,  0x0A2 % 4) <= 51199 && 
                isButtonEnable(getcurpl(),227)
            ) {
                SetButtonDisable(getcurpl(),227);
                ButtonRefresh();
            }
            if (
                Deaths((5), (10), 4, (35)) && 
                Deaths((5), (10), 1, (77)) && 
                Deaths((5), (0), 120, (155)) && 
                Deaths((5), (1), 500, (155)) && 
                Bring((13), (0), 1, (0), (190)) && 
                wread_epd(marine[getcurpl()] + 0x0A2 / 4,  0x0A2 % 4) <= 50944
            ) {
                SetMemoryEPD(marine[getcurpl()] + 0x0A2 / 4, Add, 768 * 65536);
            }
            if (
                Deaths((5), (10), 4, (35)) && 
                Deaths((5), (0), 2, (77)) && 
                Deaths((5), (0), 120, (155)) && 
                Deaths((5), (1), 500, (155)) && 
                Bring((13), (0), 1, (0), (190)) && 
                wread_epd(marine[getcurpl()] + 0x0A2 / 4,  0x0A2 % 4) <= 50944
            ) {
                SetMemoryEPD(marine[getcurpl()] + 0x0A2 / 4, Add, 512 * 65536);
            }
            if (
                Deaths((5), (10), 4, (35)) && 
                Deaths((5), (10), 1, (77)) && 
                Deaths((5), (0), 120, (155)) && 
                Deaths((5), (1), 500, (155)) && 
                Bring((13), (0), 1, (0), (194)) && 
                wread_epd(marine[getcurpl()] + 0x0A2 / 4,  0x0A2 % 4) <= 50944
            ) {
                SetMemoryEPD(marine[getcurpl()] + 0x0A2 / 4, Add, 768 * 65536);
            }
            if (
                Deaths((5), (10), 4, (35)) && 
                Deaths((5), (0), 2, (77)) && 
                Deaths((5), (0), 120, (155)) && 
                Deaths((5), (1), 500, (155)) && 
                Bring((13), (0), 1, (0), (194)) && 
                wread_epd(marine[getcurpl()] + 0x0A2 / 4,  0x0A2 % 4) <= 50944
            ) {
                SetMemoryEPD(marine[getcurpl()] + 0x0A2 / 4, Add, 512 * 65536);
            }
            if (
                Deaths((5), (10), 4, (35)) && 
                Deaths((5), (10), 1, (77)) && 
                Deaths((5), (0), 120, (155)) && 
                Deaths((5), (1), 500, (155)) && 
                Bring((13), (0), 1, (0), (193)) && 
                wread_epd(marine[getcurpl()] + 0x0A2 / 4,  0x0A2 % 4) <= 50944
            ) {
                SetMemoryEPD(marine[getcurpl()] + 0x0A2 / 4, Add, 384 * 65536);
            }
            if (
                Deaths((5), (10), 4, (35)) && 
                Deaths((5), (0), 2, (77)) && 
                Deaths((5), (0), 120, (155)) && 
                Deaths((5), (1), 500, (155)) && 
                Bring((13), (0), 1, (0), (193)) && 
                wread_epd(marine[getcurpl()] + 0x0A2 / 4,  0x0A2 % 4) <= 50944
            ) {
                SetMemoryEPD(marine[getcurpl()] + 0x0A2 / 4, Add, 256 * 65536);
            }
            if (
                Deaths((5), (10), 4, (35)) && 
                Deaths((5), (0), 120, (155)) && 
                Deaths((5), (1), 500, (155)) && 
                Bring((13), (0), 1, (0), (190)) && 
                wread_epd(marine[getcurpl()] + 0x0A2 / 4,  0x0A2 % 4) >= 50688 && 
                wread_epd(marine[getcurpl()] + 0x0A2 / 4,  0x0A2 % 4) <= 51199
            ) {
                wwrite_epd(marine[getcurpl()] + 0x0A2 / 4,  0x0A2 % 4, 51200);
            }
            if (
                Deaths((5), (10), 4, (35)) && 
                Deaths((5), (0), 120, (155)) && 
                Deaths((5), (1), 500, (155)) && 
                Bring((13), (0), 1, (0), (194)) && 
                wread_epd(marine[getcurpl()] + 0x0A2 / 4,  0x0A2 % 4) >= 50688 && 
                wread_epd(marine[getcurpl()] + 0x0A2 / 4,  0x0A2 % 4) <= 51199
            ) {
                wwrite_epd(marine[getcurpl()] + 0x0A2 / 4,  0x0A2 % 4, 51200);
            }
            if (
                Deaths((5), (10), 4, (35)) && 
                Deaths((5), (0), 120, (155)) && 
                Deaths((5), (1), 500, (155)) && 
                Bring((13), (0), 1, (0), (193)) && 
                wread_epd(marine[getcurpl()] + 0x0A2 / 4,  0x0A2 % 4) >= 50944 && 
                wread_epd(marine[getcurpl()] + 0x0A2 / 4,  0x0A2 % 4) <= 51199
            ) {
                wwrite_epd(marine[getcurpl()] + 0x0A2 / 4,  0x0A2 % 4, 51200);
            }
        }
    EUDEndPlayerLoop();
    EUDPlayerLoop()();
        if (getcurpl() == 0) {
            if (
                Deaths((5), (10), 4, (35)) && 
                Bring((13), (0), 1, (0), (155)) && 
                marine[getcurpl()] != 0 && 
                wread_epd(marine[getcurpl()] + 0x0A2 / 4,  0x0A2 % 4) >= 51200 && 
                CheckNoneTargetSkillEPD(marine[getcurpl()],768,157,158,144)
            ) {
                SetDeaths((13), (7), 100, (155));
                wwrite_epd(marine[getcurpl()] + 0x0A2 / 4,  0x0A2 % 4, 0);
                bwrite_epd(marine[getcurpl()] + 0x04D / 4,  0x04D % 4, 1);
                mi4vessel1p[getcurpl()] = epdread_epd(EPD(0x628438));
                CreateUnit(1, (9), (203), (13));
                SetInvincibility((4), (9), (13), (155));
                MoveUnit(1, (9), (13), (64), (157));
                COrderLocEPD(mi4vessel1p[getcurpl()],122,158);
            }
        }
    EUDEndPlayerLoop();
    EUDPlayerLoop()();
        if (getcurpl() == 1) {
            if (
                Deaths((5), (10), 4, (35)) && 
                Bring((13), (0), 1, (0), (155)) && 
                marine[getcurpl()] != 0 && 
                wread_epd(marine[getcurpl()] + 0x0A2 / 4,  0x0A2 % 4) >= 51200 && 
                CheckNoneTargetSkillEPD(marine[getcurpl()],768,159,160,144)
            ) {
                SetDeaths((13), (7), 100, (155));
                wwrite_epd(marine[getcurpl()] + 0x0A2 / 4,  0x0A2 % 4, 0);
                bwrite_epd(marine[getcurpl()] + 0x04D / 4,  0x04D % 4, 1);
                mi4vessel1p[getcurpl()] = epdread_epd(EPD(0x628438));
                CreateUnit(1, (9), (204), (13));
                SetInvincibility((4), (9), (13), (155));
                MoveUnit(1, (9), (13), (155), (159));
                COrderLocEPD(mi4vessel1p[getcurpl()],122,160);
            }
        }
    EUDEndPlayerLoop();
    EUDPlayerLoop()();
        if (getcurpl() == 2) {
            if (
                Deaths((5), (10), 4, (35)) && 
                Bring((13), (0), 1, (0), (155)) && 
                marine[getcurpl()] != 0 && 
                wread_epd(marine[getcurpl()] + 0x0A2 / 4,  0x0A2 % 4) >= 51200 && 
                CheckNoneTargetSkillEPD(marine[getcurpl()],768,207,208,144)
            ) {
                SetDeaths((13), (7), 100, (155));
                wwrite_epd(marine[getcurpl()] + 0x0A2 / 4,  0x0A2 % 4, 0);
                bwrite_epd(marine[getcurpl()] + 0x04D / 4,  0x04D % 4, 1);
                mi4vessel1p[getcurpl()] = epdread_epd(EPD(0x628438));
                CreateUnit(1, (9), (205), (13));
                SetInvincibility((4), (9), (13), (155));
                MoveUnit(1, (9), (13), (155), (207));
                COrderLocEPD(mi4vessel1p[getcurpl()],122,208);
            }
        }
    EUDEndPlayerLoop();
    EUDPlayerLoop()();
        if (getcurpl() == 3) {
            if (
                Deaths((5), (10), 4, (35)) && 
                Bring((13), (0), 1, (0), (155)) && 
                marine[getcurpl()] != 0 && 
                wread_epd(marine[getcurpl()] + 0x0A2 / 4,  0x0A2 % 4) >= 51200 && 
                CheckNoneTargetSkillEPD(marine[getcurpl()],768,209,214,144)
            ) {
                SetDeaths((13), (7), 100, (155));
                wwrite_epd(marine[getcurpl()] + 0x0A2 / 4,  0x0A2 % 4, 0);
                bwrite_epd(marine[getcurpl()] + 0x04D / 4,  0x04D % 4, 1);
                mi4vessel1p[getcurpl()] = epdread_epd(EPD(0x628438));
                CreateUnit(1, (9), (206), (13));
                SetInvincibility((4), (9), (13), (155));
                MoveUnit(1, (9), (13), (155), (209));
                COrderLocEPD(mi4vessel1p[getcurpl()],122,214);
            }
        }
    EUDEndPlayerLoop();
    EUDPlayerLoop()();
        if (getcurpl() == 4) {
            if (
                Deaths((5), (10), 4, (35)) && 
                Bring((13), (0), 1, (0), (155)) && 
                marine[getcurpl()] != 0 && 
                wread_epd(marine[getcurpl()] + 0x0A2 / 4,  0x0A2 % 4) >= 51200 && 
                CheckNoneTargetSkillEPD(marine[getcurpl()],768,215,216,144)
            ) {
                SetDeaths((13), (7), 100, (155));
                wwrite_epd(marine[getcurpl()] + 0x0A2 / 4,  0x0A2 % 4, 0);
                bwrite_epd(marine[getcurpl()] + 0x04D / 4,  0x04D % 4, 1);
                mi4vessel1p[getcurpl()] = epdread_epd(EPD(0x628438));
                CreateUnit(1, (9), (176), (13));
                SetInvincibility((4), (9), (13), (155));
                MoveUnit(1, (9), (13), (155), (215));
                COrderLocEPD(mi4vessel1p[getcurpl()],122,216);
            }
        }
    EUDEndPlayerLoop();
    EUDPlayerLoop()();
        if (getcurpl() == 5) {
            if (
                Switch((12), (2))
            ) {
                SetSwitch((12), (5));
                dwwrite(0x65FD00 + 17280 + 7 * 4, 1476460544);
            }
            if (
                Switch((13), (2))
            ) {
                SetSwitch((13), (5));
                dwwrite(0x65FD00 + 17280 + 7 * 4, 1476460552);
            }
            if (
                Deaths((5), (10), 2, (35)) && 
                Deaths((5), (10), 100, (123)) && 
                Bring((11), (0), 1, (13), (85))
            ) {
                MoveLocation((94), (13), (11), (85));
                trap1 = epdread_epd(EPD(0x628438));
                CreateUnitWithProperties(1, (203), (94), (7), UnitProperty(hitpoint = 66, shield = 100, energy = 50, resource = 0, hanger = 0, cloaked = False, burrowed = False, intransit = False, hallucinated = False, invincible = True));
                GiveUnits(1, (203), (7), (94), (11));
                GiveUnits(1, (13), (11), (94), (10));
                MoveLocation((94), (13), (11), (85));
                trap2 = epdread_epd(EPD(0x628438));
                CreateUnitWithProperties(1, (203), (94), (7), UnitProperty(hitpoint = 64, shield = 100, energy = 50, resource = 0, hanger = 0, cloaked = False, burrowed = False, intransit = False, hallucinated = False, invincible = True));
                GiveUnits(1, (203), (7), (94), (11));
                GiveUnits(1, (13), (11), (94), (10));
                MoveLocation((94), (13), (11), (85));
                trap3 = epdread_epd(EPD(0x628438));
                CreateUnitWithProperties(1, (203), (94), (7), UnitProperty(hitpoint = 68, shield = 100, energy = 50, resource = 0, hanger = 0, cloaked = False, burrowed = False, intransit = False, hallucinated = False, invincible = True));
                GiveUnits(1, (203), (7), (94), (11));
                GiveUnits(1, (13), (11), (94), (10));
                MoveLocation((94), (13), (11), (85));
                trap4 = epdread_epd(EPD(0x628438));
                CreateUnitWithProperties(1, (203), (94), (7), UnitProperty(hitpoint = 70, shield = 100, energy = 50, resource = 0, hanger = 0, cloaked = False, burrowed = False, intransit = False, hallucinated = False, invincible = True));
                GiveUnits(1, (203), (7), (94), (11));
                GiveUnits(1, (13), (11), (94), (10));
                SetDeaths((5), (7), 0, (123));
            }
            if (
                Deaths((5), (10), 2, (35)) && 
                Bring((5), (0), 4, (203), (85)) && 
                MemoryEPD(trap1 + 0x008 / 4, AtLeast, 104960) && 
                MemoryEPD(trap2 + 0x008 / 4, AtMost, 230400)
            ) {
                SetMemoryEPD(trap1 + 0x008 / 4, Add, -25600 * 1);
                SetMemoryEPD(trap2 + 0x008 / 4, Add, 25600 * 1);
            }
            if (
                Deaths((5), (10), 2, (35)) && 
                Bring((5), (0), 4, (203), (85)) && 
                MemoryEPD(trap2 + 0x008 / 4, AtLeast, 104960) && 
                MemoryEPD(trap3 + 0x008 / 4, AtMost, 230400)
            ) {
                SetMemoryEPD(trap2 + 0x008 / 4, Add, -25600 * 1);
                SetMemoryEPD(trap3 + 0x008 / 4, Add, 25600 * 1);
            }
            if (
                Deaths((5), (10), 2, (35)) && 
                Bring((5), (0), 4, (203), (85)) && 
                MemoryEPD(trap3 + 0x008 / 4, AtLeast, 104960) && 
                MemoryEPD(trap4 + 0x008 / 4, AtMost, 230400)
            ) {
                SetMemoryEPD(trap3 + 0x008 / 4, Add, -25600 * 1);
                SetMemoryEPD(trap4 + 0x008 / 4, Add, 25600 * 1);
            }
            if (
                Deaths((5), (10), 2, (35)) && 
                Bring((5), (0), 4, (203), (85)) && 
                MemoryEPD(trap4 + 0x008 / 4, AtLeast, 104960) && 
                MemoryEPD(trap1 + 0x008 / 4, AtMost, 230400)
            ) {
                SetMemoryEPD(trap4 + 0x008 / 4, Add, -25600 * 1);
                SetMemoryEPD(trap1 + 0x008 / 4, Add, 25600 * 1);
            }
            if (
                Deaths((5), (10), 2, (35)) && 
                Bring((5), (10), 0, (110), (85)) && 
                Bring((11), (10), 0, (188), (85)) && 
                Switch((4), (2))
            ) {
                gas = epdread_epd(EPD(0x628438));
                CreateUnit(1, (110), (92), (5));
                ModifyUnitHitPoints(1, (110), (5), (85), 74);
                SetSwitch((4), (5));
            }
            if (
                Deaths((5), (10), 2, (35)) && 
                Deaths((5), (1), 1, (77)) && 
                Deaths((5), (0), 300, (115)) && 
                Deaths((5), (1), 2299, (115)) && 
                Deaths((5), (0), 4, (192)) && 
                Bring((5), (0), 1, (110), (85)) && 
                MemoryEPD(gas + 0x008 / 4, AtLeast, 25856)
            ) {
                SetDeaths((5), (7), 0, (192));
                SetMemoryEPD(gas + 0x008 / 4, Add, -25600 * 1);
            }
            if (
                Deaths((5), (10), 2, (35)) && 
                Deaths((5), (0), 2, (77)) && 
                Deaths((5), (0), 300, (115)) && 
                Deaths((5), (1), 2299, (115)) && 
                Deaths((5), (0), 4, (192)) && 
                Bring((5), (0), 1, (110), (85)) && 
                MemoryEPD(gas + 0x008 / 4, AtLeast, 51456)
            ) {
                SetDeaths((5), (7), 0, (192));
                SetMemoryEPD(gas + 0x008 / 4, Add, -51200 * 1);
            }
            if (
                Deaths((5), (10), 2, (35)) && 
                Deaths((5), (1), 1, (77)) && 
                Deaths((5), (0), 300, (115)) && 
                Deaths((5), (1), 2299, (115)) && 
                Deaths((5), (0), 4, (192)) && 
                Bring((5), (0), 1, (110), (85)) && 
                MemoryEPD(gas + 0x008 / 4, AtMost, 25600)
            ) {
                SetDeaths((5), (7), 0, (192));
                KillUnitAt(1, (110), (85), (5));
            }
            if (
                Deaths((5), (10), 2, (35)) && 
                Deaths((5), (0), 2, (77)) && 
                Deaths((5), (0), 300, (115)) && 
                Deaths((5), (1), 2299, (115)) && 
                Deaths((5), (0), 4, (192)) && 
                Bring((5), (0), 1, (110), (85)) && 
                MemoryEPD(gas + 0x008 / 4, AtMost, 51200)
            ) {
                SetDeaths((5), (7), 0, (192));
                KillUnitAt(1, (110), (85), (5));
            }
            if (
                Deaths((5), (10), 2, (35)) && 
                Deaths((5), (0), 1, (115)) && 
                Deaths((5), (1), 999, (115)) && 
                Deaths((5), (10), 1, (96))
            ) {
                mi2queen[getcurpl()] = epdread_epd(EPD(0x628438));
                CreateUnit(1, (45), (120), (5));
                GiveUnits(1, (45), (5), (120), (6));
                GiveUnits(1, (45), (6), (120), (11));
                SetDeaths((5), (7), 2, (96));
            }
            if (
                Deaths((5), (10), 2, (35)) && 
                Deaths((5), (0), 1, (115)) && 
                Deaths((5), (1), 999, (115)) && 
                Deaths((5), (10), 2, (96)) && 
                Bring((11), (0), 1, (45), (120)) && 
                MemoryEPD(mi2queen[getcurpl()] + 0x008 / 4, AtLeast, 256) && 
                bread_epd(mi2queen[getcurpl()] + 0x116 / 4,  0x116 % 4) <= 41
            ) {
                SetMemoryEPD(mi2queen[getcurpl()] + 0x116 / 4, Add, 20 * 65536);
            }
            if (
                Deaths((5), (10), 3, (35)) && 
                Switch((5), (2)) && 
                Command((5), (10), 0, (7))
            ) {
                SetSwitch((5), (5));
                scv = epdread_epd(EPD(0x628438));
                CreateUnit(1, (7), (123), (5));
            }
            if (
                Deaths((5), (10), 3, (35)) && 
                Deaths((5), (10), 1, (77)) && 
                Deaths((5), (0), 1, (92)) && 
                Bring((5), (0), 1, (7), (123)) && 
                MemoryEPD(scv + 0x008 / 4, AtLeast, 25601)
            ) {
                SetDeaths((5), (7), 0, (92));
                SetMemoryEPD(scv + 0x008 / 4, Add, -25600 * 1);
            }
            if (
                Deaths((5), (10), 3, (35)) && 
                Deaths((5), (10), 2, (77)) && 
                Deaths((5), (0), 1, (92)) && 
                Bring((5), (0), 1, (7), (123)) && 
                MemoryEPD(scv + 0x008 / 4, AtLeast, 51201)
            ) {
                SetDeaths((5), (7), 0, (92));
                SetMemoryEPD(scv + 0x008 / 4, Add, -51200 * 1);
            }
            if (
                Deaths((5), (10), 3, (35)) && 
                Deaths((5), (10), 3, (77)) && 
                Deaths((5), (0), 1, (92)) && 
                Bring((5), (0), 1, (7), (123)) && 
                MemoryEPD(scv + 0x008 / 4, AtLeast, 76801)
            ) {
                SetDeaths((5), (7), 0, (92));
                SetMemoryEPD(scv + 0x008 / 4, Add, -76800 * 1);
            }
            if (
                Deaths((5), (10), 3, (35)) && 
                Deaths((5), (10), 1, (77)) && 
                Deaths((5), (0), 1, (92)) && 
                Bring((5), (0), 1, (7), (123)) && 
                MemoryEPD(scv + 0x008 / 4, AtMost, 25600)
            ) {
                SetDeaths((5), (7), 0, (92));
                SetDeaths((5), (7), 1, (7));
                KillUnitAt(1, (7), (123), (5));
            }
            if (
                Deaths((5), (10), 3, (35)) && 
                Deaths((5), (10), 2, (77)) && 
                Deaths((5), (0), 1, (92)) && 
                Bring((5), (0), 1, (7), (123)) && 
                MemoryEPD(scv + 0x008 / 4, AtMost, 51200)
            ) {
                SetDeaths((5), (7), 0, (92));
                SetDeaths((5), (7), 1, (7));
                KillUnitAt(1, (7), (123), (5));
            }
            if (
                Deaths((5), (10), 3, (35)) && 
                Deaths((5), (10), 3, (77)) && 
                Deaths((5), (0), 1, (92)) && 
                Bring((5), (0), 1, (7), (123)) && 
                MemoryEPD(scv + 0x008 / 4, AtMost, 76800)
            ) {
                SetDeaths((5), (7), 0, (92));
                SetDeaths((5), (7), 1, (7));
                KillUnitAt(1, (7), (123), (5));
            }
            if (
                Deaths((5), (10), 3, (35)) && 
                Deaths((5), (0), 12, (121)) && 
                MemoryEPD(scv + 0x008 / 4, AtMost, 384000) && 
                MemoryEPD(scv + 0x008 / 4, AtLeast, 25600) && 
                Bring((5), (0), 1, (7), (123)) && 
                Switch((122), (3))
            ) {
                SetSwitch((122), (4));
                SetMemory(0x515BA8, (7), 256);
                SetMemory(0x515BD0, (7), 256);
            }
            if (
                Deaths((5), (10), 3, (35)) && 
                Switch((123), (3))
            ) {
                SetSwitch((123), (4));
                bwrite(0x65FD00 + 9344 + 7 * 1, 3);
            }
            if (
                Deaths((5), (0), 4, (35)) && 
                Switch((123), (2))
            ) {
                SetSwitch((123), (5));
                bwrite(0x65FD00 + 9344 + 7 * 1, 1);
            }
        }
    EUDEndPlayerLoop();
    EUDPlayerLoop()();
        if (getcurpl() == 5) {
            if (
                Deaths((5), (10), 4, (35)) && 
                Switch((25), (3))
            ) {
                SetSwitch((25), (4));
                dwwrite(0x65FD00 + 17280 + 0 * 4, dwread(0x65FD00 + 17280 + 0 * 4) + 2097152);
                bwrite(0x65FD00 + 12472 + 53 * 1, 3);
                dwwrite(0x6564E0 + 3984 + 39 * 4, 96);
                bwrite(0x6564E0 + 2776 + 39 * 1, 20);
            }
            if (
                Deaths((5), (10), 4, (35)) && 
                Deaths((5), (10), 36, (155)) && 
                Bring((11), (10), 0, (46), (155)) && 
                Bring((11), (10), 0, (37), (155)) && 
                Bring((11), (10), 0, (38), (155))
            ) {
                SetDeaths((5), (7), 50, (155));
                SetDeaths((18), (7), 1, (58));
                MoveLocation((156), (100), (5), (155));
                RemoveUnitAt(1, (100), (156), (5));
                CreateUnit(1, (100), (156), (5));
                MoveLocation((156), (99), (5), (155));
                RemoveUnitAt(1, (99), (156), (5));
                CreateUnit(1, (99), (156), (5));
                MoveLocation((156), (17), (5), (155));
                RemoveUnitAt(1, (17), (156), (5));
                CreateUnit(1, (17), (156), (5));
            }
            if (
                Deaths((5), (10), 4, (35)) && 
                Deaths((5), (0), 652, (155)) && 
                Deaths((5), (1), 2000, (155)) && 
                Deaths((5), (10), 36, (163)) && 
                Bring((11), (10), 0, (46), (155)) && 
                Bring((11), (10), 0, (37), (155)) && 
                Bring((11), (10), 0, (38), (155))
            ) {
                SetDeaths((5), (7), 50, (163));
                SetDeaths((18), (7), 1, (58));
                MoveLocation((156), (100), (5), (155));
                RemoveUnitAt(1, (100), (156), (5));
                CreateUnit(1, (100), (156), (5));
                MoveLocation((156), (99), (5), (155));
                RemoveUnitAt(1, (99), (156), (5));
                CreateUnit(1, (99), (156), (5));
                MoveLocation((156), (17), (5), (155));
                RemoveUnitAt(1, (17), (156), (5));
                CreateUnit(1, (17), (156), (5));
            }
        }
    EUDEndPlayerLoop();
    EUDPlayerLoop()();
        if (getcurpl() == 5 || getcurpl() == 6 || getcurpl() == 7) {
            if (
                Deaths((5), (10), 4, (35)) && 
                Deaths((13), (10), 124, (14)) && 
                mi4arbi[getcurpl()] == 0
            ) {
                mi4arbi[getcurpl()] = epdread_epd(EPD(0x628438));
                CreateUnit(1, (71), (36), (6));
                ModifyUnitEnergy(All, (71), (6), (31), 0);
                SetInvincibility((4), (71), (6), (36));
                SetDeaths((13), (7), 55, (14));
            }
            if (
                Deaths((5), (10), 4, (35)) && 
                Deaths((13), (10), 124, (126)) && 
                mi4arbi2[getcurpl()] == 0
            ) {
                mi4arbi2[getcurpl()] = epdread_epd(EPD(0x628438));
                CreateUnit(1, (71), (36), (6));
                ModifyUnitEnergy(All, (71), (6), (31), 0);
                SetInvincibility((4), (71), (6), (36));
                SetDeaths((13), (7), 55, (126));
            }
            if (
                Deaths((5), (10), 4, (35)) && 
                Deaths((13), (10), 124, (29)) && 
                mi4arbi3[getcurpl()] == 0
            ) {
                mi4arbi3[getcurpl()] = epdread_epd(EPD(0x628438));
                CreateUnit(1, (71), (36), (6));
                ModifyUnitEnergy(All, (71), (6), (31), 0);
                SetInvincibility((4), (71), (6), (36));
                SetDeaths((13), (7), 55, (29));
            }
            if (
                Deaths((5), (10), 4, (35)) && 
                Deaths((13), (10), 124, (80)) && 
                mi4arbi4[getcurpl()] == 0
            ) {
                mi4arbi4[getcurpl()] = epdread_epd(EPD(0x628438));
                CreateUnit(1, (71), (36), (6));
                ModifyUnitEnergy(All, (71), (6), (31), 0);
                SetInvincibility((4), (71), (6), (36));
                SetDeaths((13), (7), 55, (80));
            }
            if (
                mi4arbi[getcurpl()] != 0 && 
                Deaths((13), (10), 55, (14)) && 
                wread_epd(mi4arbi[getcurpl()] + 0x064 / 4,  0x064 % 4) == 71 && 
                Deaths((5), (10), 4, (35)) && 
                MemoryEPD(mi4arbi[getcurpl()] + 0x060 / 4, AtMost, 25600) && 
                MemoryEPD(mi4arbi[getcurpl()] + 0x008 / 4, AtLeast, 2560)
            ) {
                bwrite_epd(mi4arbi[getcurpl()] + 0x04D / 4,  0x04D % 4, 0);
                SetDeaths((13), (7), 124, (14));
                mi4arbi[getcurpl()] = 0;
            }
            if (
                mi4arbi2[getcurpl()] != 0 && 
                Deaths((13), (10), 55, (126)) && 
                wread_epd(mi4arbi2[getcurpl()] + 0x064 / 4,  0x064 % 4) == 71 && 
                Deaths((5), (10), 4, (35)) && 
                MemoryEPD(mi4arbi2[getcurpl()] + 0x060 / 4, AtMost, 25600) && 
                MemoryEPD(mi4arbi2[getcurpl()] + 0x008 / 4, AtLeast, 2560)
            ) {
                bwrite_epd(mi4arbi2[getcurpl()] + 0x04D / 4,  0x04D % 4, 0);
                SetDeaths((13), (7), 124, (126));
                mi4arbi2[getcurpl()] = 0;
            }
            if (
                mi4arbi3[getcurpl()] != 0 && 
                Deaths((13), (10), 55, (29)) && 
                wread_epd(mi4arbi3[getcurpl()] + 0x064 / 4,  0x064 % 4) == 71 && 
                Deaths((5), (10), 4, (35)) && 
                MemoryEPD(mi4arbi3[getcurpl()] + 0x060 / 4, AtMost, 25600) && 
                MemoryEPD(mi4arbi3[getcurpl()] + 0x008 / 4, AtLeast, 2560)
            ) {
                bwrite_epd(mi4arbi3[getcurpl()] + 0x04D / 4,  0x04D % 4, 0);
                SetDeaths((13), (7), 124, (29));
                mi4arbi3[getcurpl()] = 0;
            }
            if (
                mi4arbi4[getcurpl()] != 0 && 
                Deaths((13), (10), 55, (80)) && 
                wread_epd(mi4arbi4[getcurpl()] + 0x064 / 4,  0x064 % 4) == 71 && 
                Deaths((5), (10), 4, (35)) && 
                MemoryEPD(mi4arbi4[getcurpl()] + 0x060 / 4, AtMost, 25600) && 
                MemoryEPD(mi4arbi4[getcurpl()] + 0x008 / 4, AtLeast, 2560)
            ) {
                bwrite_epd(mi4arbi4[getcurpl()] + 0x04D / 4,  0x04D % 4, 0);
                SetDeaths((13), (7), 124, (80));
                mi4arbi4[getcurpl()] = 0;
            }
        }
    EUDEndPlayerLoop();
    EUDPlayerLoop()();
        if (getcurpl() == 6 || getcurpl() == 7) {
            if (
                Deaths((5), (10), 4, (35)) && 
                Deaths((5), (0), 120, (155)) && 
                Deaths((13), (0), 100, (142))
            ) {
                SetDeaths((13), (7), 0, (142));
                marine[getcurpl()] = epdread_epd(EPD(0x628438));
                CreateUnit(1, (64), (31), (6));
                SetInvincibility((4), (64), (6), (31));
            }
            if (
                Deaths((5), (10), 4, (35)) && 
                Deaths((5), (0), 120, (155)) && 
                Bring((6), (0), 1, (64), (176)) && 
                Bring((6), (10), 0, (162), (176)) && 
                marine[getcurpl()] != 0 && 
                wread_epd(marine[getcurpl()] + 0x064 / 4,  0x064 % 4) == 64 && 
                wread_epd(marine[getcurpl()] + 0x0A2 / 4,  0x0A2 % 4) >= 10240 && 
                wread_epd(marine[getcurpl()] + 0x0A2 / 4,  0x0A2 % 4) <= 20480
            ) {
                COrderLocEPD(marine[getcurpl()],31,176);
                wwrite_epd(marine[getcurpl()] + 0x098 / 4,  0x098 % 4, 162);
            }
            if (
                Deaths((5), (10), 4, (35)) && 
                Deaths((5), (0), 120, (155)) && 
                Bring((6), (0), 1, (64), (177)) && 
                Bring((6), (10), 0, (162), (177)) && 
                marine[getcurpl()] != 0 && 
                wread_epd(marine[getcurpl()] + 0x064 / 4,  0x064 % 4) == 64 && 
                wread_epd(marine[getcurpl()] + 0x0A2 / 4,  0x0A2 % 4) >= 25600 && 
                wread_epd(marine[getcurpl()] + 0x0A2 / 4,  0x0A2 % 4) <= 35840
            ) {
                COrderLocEPD(marine[getcurpl()],31,177);
                wwrite_epd(marine[getcurpl()] + 0x098 / 4,  0x098 % 4, 162);
            }
            if (
                Bring((6), (0), 1, (64), (176)) && 
                marine[getcurpl()] != 0 && 
                wread_epd(marine[getcurpl()] + 0x064 / 4,  0x064 % 4) == 64 && 
                MemoryEPD(marine[getcurpl()] + 0x060 / 4, AtMost, 25600) && 
                wread_epd(marine[getcurpl()] + 0x0A2 / 4,  0x0A2 % 4) >= 10240 && 
                wread_epd(marine[getcurpl()] + 0x0A2 / 4,  0x0A2 % 4) <= 20480
            ) {
                MoveUnit(1, (64), (6), (176), (31));
            }
            if (
                Bring((6), (0), 1, (64), (177)) && 
                marine[getcurpl()] != 0 && 
                wread_epd(marine[getcurpl()] + 0x064 / 4,  0x064 % 4) == 64 && 
                MemoryEPD(marine[getcurpl()] + 0x060 / 4, AtMost, 25600) && 
                wread_epd(marine[getcurpl()] + 0x0A2 / 4,  0x0A2 % 4) >= 25600 && 
                wread_epd(marine[getcurpl()] + 0x0A2 / 4,  0x0A2 % 4) <= 35840
            ) {
                MoveUnit(1, (64), (6), (177), (31));
            }
        }
    EUDEndPlayerLoop();
    EUDPlayerLoop()();
        if (getcurpl() == 6) {
            if (
                Deaths((5), (10), 4, (35)) && 
                Deaths((5), (1), 2999, (155)) && 
                Bring((13), (10), 0, (60), (64))
            ) {
                test1[getcurpl()] = epdread_epd(EPD(0x628438));
                CreateUnitWithProperties(1, (60), (82), (13), UnitProperty(hitpoint = 100, shield = 100, energy = 100, resource = 0, hanger = 0, cloaked = False, burrowed = False, intransit = False, hallucinated = False, invincible = True));
                SetDeaths((13), (7), 0, (148));
            }
        }
    EUDEndPlayerLoop();
    EUDPlayerLoop()();
        if (getcurpl() == 7) {
            if (
                Deaths((5), (10), 4, (35)) && 
                Deaths((5), (1), 2999, (155)) && 
                Bring((13), (10), 0, (60), (64))
            ) {
                test1[getcurpl()] = epdread_epd(EPD(0x628438));
                CreateUnitWithProperties(1, (60), (82), (13), UnitProperty(hitpoint = 100, shield = 100, energy = 100, resource = 0, hanger = 0, cloaked = False, burrowed = False, intransit = False, hallucinated = False, invincible = True));
                SetDeaths((13), (7), 0, (148));
            }
        }
    EUDEndPlayerLoop();
    EUDPlayerLoop()();
        if (getcurpl() == 6 || getcurpl() == 7) {
            if (
                Switch((16), (2)) && 
                Deaths((5), (10), 4, (35)) && 
                Bring((13), (0), 1, (60), (155)) && 
                Bring((13), (0), 1, (130), (155)) && 
                Deaths((13), (10), 0, (148)) && 
                test1[getcurpl()] != 0 && 
                MemoryEPD(test1[getcurpl()] + 0x060 / 4, AtMost, 12800)
            ) {
                SetDeaths((13), (7), 3, (148));
                SetDeaths((13), (7), 1000, (109));
                KillUnitAt(1, (130), (155), (13));
                MoveUnit(1, (60), (13), (155), (82));
            }
            if (
                Deaths((5), (10), 4, (35)) && 
                Bring((13), (0), 1, (60), (155)) && 
                Bring((13), (0), 1, (130), (155)) && 
                Deaths((13), (10), 0, (148)) && 
                Switch((16), (3)) && 
                test1[getcurpl()] != 0 && 
                MemoryEPD(test1[getcurpl()] + 0x060 / 4, AtMost, 12800)
            ) {
                SetDeaths((13), (7), 2, (148));
                ModifyUnitShields(1, (60), (13), (155), 100);
                ModifyUnitHitPoints(1, (130), (13), (64), 20);
            }
            if (
                Deaths((5), (10), 4, (35)) && 
                Bring((13), (0), 1, (60), (155)) && 
                Bring((13), (0), 1, (130), (155)) && 
                Deaths((13), (10), 2, (148)) && 
                Switch((16), (3)) && 
                test1[getcurpl()] != 0 && 
                MemoryEPD(test1[getcurpl()] + 0x060 / 4, AtMost, 12800)
            ) {
                SetDeaths((13), (7), 3, (148));
                SetDeaths((13), (7), 1000, (109));
                KillUnitAt(1, (130), (155), (13));
                MoveUnit(1, (60), (13), (155), (82));
            }
        }
    EUDEndPlayerLoop();
    EUDPlayerLoop()();
        if (getcurpl() == 6) {
            if (
                Deaths((5), (10), 2, (35)) && 
                Deaths((5), (0), 1, (115)) && 
                Deaths((5), (1), 999, (115)) && 
                Deaths((5), (10), 3, (96))
            ) {
                mi2queen[getcurpl()] = epdread_epd(EPD(0x628438));
                CreateUnit(1, (45), (120), (6));
                GiveUnits(1, (45), (6), (120), (11));
                SetDeaths((5), (7), 4, (96));
            }
            if (
                Deaths((5), (10), 2, (35)) && 
                Deaths((5), (0), 1, (115)) && 
                Deaths((5), (1), 999, (115)) && 
                Deaths((5), (10), 4, (96)) && 
                Bring((11), (0), 1, (45), (120)) && 
                MemoryEPD(mi2queen[getcurpl()] + 0x008 / 4, AtLeast, 256) && 
                bread_epd(mi2queen[getcurpl()] + 0x116 / 4,  0x116 % 4) <= 41
            ) {
                SetMemoryEPD(mi2queen[getcurpl()] + 0x116 / 4, Add, 20 * 65536);
            }
            if (
                Deaths((5), (10), 3, (35)) && 
                Deaths((5), (1), 2160, (121)) && 
                dwread(0x6C9858 + 1696 + 13 * 4) >= 1707
            ) {
                dwwrite(0x6C9858 + 1696 + 13 * 4, 1110);
            }
            if (
                Deaths((5), (10), 3, (35)) && 
                Deaths((5), (0), 2161, (121)) && 
                dwread(0x6C9858 + 1696 + 13 * 4) <= 1706
            ) {
                dwwrite(0x6C9858 + 1696 + 13 * 4, 1707);
            }
            if (
                Deaths((5), (10), 4, (35)) && 
                dwread(0x6C9858 + 1696 + 13 * 4) <= 1706
            ) {
                dwwrite(0x6C9858 + 1696 + 13 * 4, 1707);
            }
        }
    EUDEndPlayerLoop();
    EUDPlayerLoop()();
        if (getcurpl() == 7) {
            if (
                Deaths((5), (10), 2, (35)) && 
                Deaths((5), (0), 1, (115)) && 
                Deaths((5), (1), 999, (115)) && 
                Deaths((5), (10), 5, (96))
            ) {
                mi2queen[getcurpl()] = epdread_epd(EPD(0x628438));
                CreateUnit(1, (45), (120), (7));
                GiveUnits(1, (45), (7), (120), (11));
                SetDeaths((5), (7), 0, (96));
            }
            if (
                Deaths((5), (10), 2, (35)) && 
                Deaths((5), (0), 1, (115)) && 
                Deaths((5), (1), 999, (115)) && 
                Deaths((5), (10), 0, (96)) && 
                Bring((11), (0), 1, (45), (120)) && 
                MemoryEPD(mi2queen[getcurpl()] + 0x008 / 4, AtLeast, 256) && 
                bread_epd(mi2queen[getcurpl()] + 0x116 / 4,  0x116 % 4) <= 41
            ) {
                SetMemoryEPD(mi2queen[getcurpl()] + 0x116 / 4, Add, 20 * 65536);
            }
        }
    EUDEndPlayerLoop();
    EUDPlayerLoop()();
        if (getcurpl() == 5) {
            if (
                Deaths((5), (10), 5, (35)) && 
                Deaths((5), (0), 106, (102)) && 
                Switch((32), (3))
            ) {
                SetSwitch((32), (4));
                dwwrite(0x65FD00 + 17280 + 0 * 4, 402718720);
                bwrite(0x6564E0 + 536 + 0 * 1, 15);
                bwrite(0x65FD00 + 12472 + 0 * 1, 6);
                bwrite(0x65FD00 + 13624 + 0 * 1, 4);
                bwrite(0x65FD00 + 12472 + 87 * 1, 6);
                bwrite(0x65FD00 + 13624 + 87 * 1, 4);
                bwrite(0x65FD00 + 12472 + 28 * 1, 6);
                bwrite(0x65FD00 + 12472 + 22 * 1, 6);
                bwrite(0x65FD00 + 12472 + 74 * 1, 6);
                bwrite(0x65FD00 + 12472 + 43 * 1, 6);
                dwwrite(0x65FD00 + 11104 + 64 * 4, 23);
                dwwrite(0x65FD00 + 11106 + 64 * 4, 23);
                bwrite(0x65FD00 + 12704 + 64 * 1, 156);
                bwrite(0x65FD00 + 19352 + 64 * 1, 23);
                bwrite(0x65FD00 + 13856 + 64 * 1, 23);
                bwrite(0x65FD00 + 15696 + 64 * 1, 23);
                bwrite(0x65FD00 + 13624 + 46 * 1, 8);
                dwwrite(0x6C9858 + 1696 + 7 * 4, 1160);
                dwwrite(0x6C9858 + 1696 + 185 * 4, 2000);
                wwrite(0x6C9858 + 1056 + 185 * 2, 2000);
                dwwrite(0x6C9858 + 1696 + 43 * 4, 2000);
                wwrite(0x6C9858 + 1056 + 43 * 2, 2000);
                dwwrite(0x6C9858 + 1696 + 144 * 4, 5500);
                wwrite(0x6C9858 + 1056 + 144 * 2, 5500);
                bwrite(0x665AC0 + 392 + 342 * 1, 0);
                wwrite(0x665AC0 + 1696 + 309 * 2, 214);
                bwrite(0x666778 + 14000 + 530 * 1, 16);
            }
            if (
                Deaths((5), (10), 5, (35)) && 
                Deaths((5), (1), 300, (102)) && 
                Deaths((5), (0), 299, (102)) && 
                Bring((6), (10), 0, (76), (224))
            ) {
                SetDeaths((5), (7), 305, (102));
                mi4vessel2p[getcurpl()] = epdread_epd(EPD(0x628438));
                CreateUnit(1, (76), (225), (6));
                SetInvincibility((4), (76), (6), (224));
            }
            if (
                Deaths((5), (10), 5, (35)) && 
                Deaths((5), (0), 335, (102)) && 
                Switch((33), (3))
            ) {
                SetSwitch((33), (4));
                bwrite(0x65FD00 + 13624 + 0 * 1, 1);
                bwrite(0x65FD00 + 13624 + 87 * 1, 1);
            }
            if (
                Deaths((5), (10), 5, (35)) && 
                Deaths((5), (0), 350, (102)) && 
                Bring((6), (0), 1, (76), (224))
            ) {
                HPbar(mi4vessel2p[getcurpl()],195,6,2,10);
            }
            if (
                Deaths((5), (10), 5, (35)) && 
                Deaths((5), (0), 350, (102)) && 
                Bring((18), (0), 1, (76), (224))
            ) {
                HPbar(mi4vessel2p[getcurpl()],195,6,2,10);
            }
            if (
                Deaths((5), (10), 5, (35)) && 
                Deaths((5), (0), 350, (102)) && 
                Bring((8), (0), 1, (76), (224))
            ) {
                HPbar(mi4vessel2p[getcurpl()],195,6,2,10);
            }
            if (
                Deaths((5), (10), 5, (35)) && 
                Switch((57), (3)) && 
                Deaths((5), (0), 505, (102))
            ) {
                SetSwitch((57), (4));
                dwwrite(0x65FD00 + 17280 + 37 * 4, 1115264);
                dwwrite(0x65FD00 + 17280 + 46 * 4, 36765824);
                bwrite(0x65FD00 + 12472 + 55 * 1, 15);
                bwrite(0x6564E0 + 1200 + 49 * 1, 0);
                bwrite(0x6C9858 + 1480 + 11 * 1, 125);
                wwrite(0x6564E0 + 2512 + 49 * 2, 50);
                dwwrite(0x6564E0 + 3984 + 49 * 4, 600);
                bwrite(0x58CF44 + 0x21FC * ((11) / 24) + (17) * (24 - 4 * ((11) / 24)) + ((11) % 24), 0);
            }
            if (
                Deaths((5), (10), 5, (35)) && 
                MemoryEPD(mi4vessel2p[getcurpl()] + 0x008 / 4, AtMost, 255974400) && 
                MemoryEPD(mi4vessel2p[getcurpl()] + 0x008 / 4, AtLeast, 248294401) && 
                Switch((35), (2))
            ) {
                SetMemoryEPD(mi4vessel2p[getcurpl()] + 0x008 / 4, Add, -7680000 * 1);
            }
            if (
                Deaths((5), (10), 5, (35)) && 
                MemoryEPD(mi4vessel2p[getcurpl()] + 0x008 / 4, AtMost, 243174400) && 
                MemoryEPD(mi4vessel2p[getcurpl()] + 0x008 / 4, AtLeast, 235494401) && 
                Switch((35), (2))
            ) {
                SetMemoryEPD(mi4vessel2p[getcurpl()] + 0x008 / 4, Add, -7680000 * 1);
            }
            if (
                Deaths((5), (10), 5, (35)) && 
                MemoryEPD(mi4vessel2p[getcurpl()] + 0x008 / 4, AtMost, 230374400) && 
                MemoryEPD(mi4vessel2p[getcurpl()] + 0x008 / 4, AtLeast, 222694401) && 
                Switch((35), (2))
            ) {
                SetMemoryEPD(mi4vessel2p[getcurpl()] + 0x008 / 4, Add, -7680000 * 1);
            }
            if (
                Deaths((5), (10), 5, (35)) && 
                MemoryEPD(mi4vessel2p[getcurpl()] + 0x008 / 4, AtMost, 217574400) && 
                MemoryEPD(mi4vessel2p[getcurpl()] + 0x008 / 4, AtLeast, 209894401) && 
                Switch((35), (2))
            ) {
                SetMemoryEPD(mi4vessel2p[getcurpl()] + 0x008 / 4, Add, -7680000 * 1);
            }
            if (
                Deaths((5), (10), 5, (35)) && 
                MemoryEPD(mi4vessel2p[getcurpl()] + 0x008 / 4, AtMost, 204774400) && 
                MemoryEPD(mi4vessel2p[getcurpl()] + 0x008 / 4, AtLeast, 197094401) && 
                Switch((35), (2))
            ) {
                SetMemoryEPD(mi4vessel2p[getcurpl()] + 0x008 / 4, Add, -7680000 * 1);
            }
            if (
                Deaths((5), (10), 5, (35)) && 
                MemoryEPD(mi4vessel2p[getcurpl()] + 0x008 / 4, AtMost, 191974400) && 
                MemoryEPD(mi4vessel2p[getcurpl()] + 0x008 / 4, AtLeast, 184294401) && 
                Switch((35), (2))
            ) {
                SetMemoryEPD(mi4vessel2p[getcurpl()] + 0x008 / 4, Add, -7680000 * 1);
            }
            if (
                Deaths((5), (10), 5, (35)) && 
                MemoryEPD(mi4vessel2p[getcurpl()] + 0x008 / 4, AtMost, 179174400) && 
                MemoryEPD(mi4vessel2p[getcurpl()] + 0x008 / 4, AtLeast, 171494401) && 
                Switch((35), (2))
            ) {
                SetMemoryEPD(mi4vessel2p[getcurpl()] + 0x008 / 4, Add, -7680000 * 1);
            }
            if (
                Deaths((5), (10), 5, (35)) && 
                MemoryEPD(mi4vessel2p[getcurpl()] + 0x008 / 4, AtMost, 166374400) && 
                MemoryEPD(mi4vessel2p[getcurpl()] + 0x008 / 4, AtLeast, 158694401) && 
                Switch((35), (2))
            ) {
                SetMemoryEPD(mi4vessel2p[getcurpl()] + 0x008 / 4, Add, -7680000 * 1);
            }
            if (
                Deaths((5), (10), 5, (35)) && 
                MemoryEPD(mi4vessel2p[getcurpl()] + 0x008 / 4, AtMost, 153574400) && 
                MemoryEPD(mi4vessel2p[getcurpl()] + 0x008 / 4, AtLeast, 145894401) && 
                Switch((35), (2))
            ) {
                SetMemoryEPD(mi4vessel2p[getcurpl()] + 0x008 / 4, Add, -7680000 * 1);
            }
            if (
                Deaths((5), (10), 5, (35)) && 
                MemoryEPD(mi4vessel2p[getcurpl()] + 0x008 / 4, AtMost, 140774400) && 
                MemoryEPD(mi4vessel2p[getcurpl()] + 0x008 / 4, AtLeast, 133094401) && 
                Switch((35), (2))
            ) {
                SetMemoryEPD(mi4vessel2p[getcurpl()] + 0x008 / 4, Add, -7680000 * 1);
            }
            if (
                Deaths((5), (10), 5, (35)) && 
                MemoryEPD(mi4vessel2p[getcurpl()] + 0x008 / 4, AtMost, 127974400) && 
                MemoryEPD(mi4vessel2p[getcurpl()] + 0x008 / 4, AtLeast, 120294401) && 
                Switch((35), (2))
            ) {
                SetMemoryEPD(mi4vessel2p[getcurpl()] + 0x008 / 4, Add, -7680000 * 1);
            }
            if (
                Deaths((5), (10), 5, (35)) && 
                MemoryEPD(mi4vessel2p[getcurpl()] + 0x008 / 4, AtMost, 115174400) && 
                MemoryEPD(mi4vessel2p[getcurpl()] + 0x008 / 4, AtLeast, 107494401) && 
                Switch((35), (2))
            ) {
                SetMemoryEPD(mi4vessel2p[getcurpl()] + 0x008 / 4, Add, -7680000 * 1);
            }
            if (
                Deaths((5), (10), 5, (35)) && 
                MemoryEPD(mi4vessel2p[getcurpl()] + 0x008 / 4, AtMost, 102374400) && 
                MemoryEPD(mi4vessel2p[getcurpl()] + 0x008 / 4, AtLeast, 94694401) && 
                Switch((35), (2))
            ) {
                SetMemoryEPD(mi4vessel2p[getcurpl()] + 0x008 / 4, Add, -7680000 * 1);
            }
            if (
                Deaths((5), (10), 5, (35)) && 
                MemoryEPD(mi4vessel2p[getcurpl()] + 0x008 / 4, AtMost, 89574400) && 
                MemoryEPD(mi4vessel2p[getcurpl()] + 0x008 / 4, AtLeast, 81894401) && 
                Switch((35), (2))
            ) {
                SetMemoryEPD(mi4vessel2p[getcurpl()] + 0x008 / 4, Add, -7680000 * 1);
            }
            if (
                Deaths((5), (10), 5, (35)) && 
                MemoryEPD(mi4vessel2p[getcurpl()] + 0x008 / 4, AtMost, 76774400) && 
                MemoryEPD(mi4vessel2p[getcurpl()] + 0x008 / 4, AtLeast, 69094401) && 
                Switch((35), (2))
            ) {
                SetMemoryEPD(mi4vessel2p[getcurpl()] + 0x008 / 4, Add, -7680000 * 1);
            }
            if (
                Deaths((5), (10), 5, (35)) && 
                MemoryEPD(mi4vessel2p[getcurpl()] + 0x008 / 4, AtMost, 63974400) && 
                MemoryEPD(mi4vessel2p[getcurpl()] + 0x008 / 4, AtLeast, 56294401) && 
                Switch((35), (2))
            ) {
                SetMemoryEPD(mi4vessel2p[getcurpl()] + 0x008 / 4, Add, -7680000 * 1);
            }
            if (
                Deaths((5), (10), 5, (35)) && 
                MemoryEPD(mi4vessel2p[getcurpl()] + 0x008 / 4, AtMost, 51174400) && 
                MemoryEPD(mi4vessel2p[getcurpl()] + 0x008 / 4, AtLeast, 43494401) && 
                Switch((35), (2))
            ) {
                SetMemoryEPD(mi4vessel2p[getcurpl()] + 0x008 / 4, Add, -7680000 * 1);
            }
            if (
                Deaths((5), (10), 5, (35)) && 
                MemoryEPD(mi4vessel2p[getcurpl()] + 0x008 / 4, AtMost, 38374400) && 
                MemoryEPD(mi4vessel2p[getcurpl()] + 0x008 / 4, AtLeast, 30694401) && 
                Switch((35), (2))
            ) {
                SetMemoryEPD(mi4vessel2p[getcurpl()] + 0x008 / 4, Add, -7680000 * 1);
            }
            if (
                Deaths((5), (10), 5, (35)) && 
                MemoryEPD(mi4vessel2p[getcurpl()] + 0x008 / 4, AtMost, 25574400) && 
                MemoryEPD(mi4vessel2p[getcurpl()] + 0x008 / 4, AtLeast, 17894401) && 
                Switch((35), (2))
            ) {
                SetMemoryEPD(mi4vessel2p[getcurpl()] + 0x008 / 4, Add, -7680000 * 1);
            }
            if (
                Deaths((5), (10), 5, (35)) && 
                MemoryEPD(mi4vessel2p[getcurpl()] + 0x008 / 4, AtLeast, 25344000) && 
                Switch((35), (2)) && 
                Switch((109), (3))
            ) {
                SetSwitch((109), (4));
            }
            if (
                Deaths((5), (10), 5, (35)) && 
                MemoryEPD(mi4vessel2p[getcurpl()] + 0x008 / 4, AtMost, 25343999) && 
                MemoryEPD(mi4vessel2p[getcurpl()] + 0x008 / 4, AtLeast, 25600) && 
                Switch((35), (2)) && 
                Switch((109), (2))
            ) {
                SetSwitch((109), (5));
            }
            if (
                Deaths((5), (10), 5, (35)) && 
                MemoryEPD(mi4vessel2p[getcurpl()] + 0x008 / 4, AtMost, 12799744) && 
                MemoryEPD(mi4vessel2p[getcurpl()] + 0x008 / 4, AtLeast, 25600) && 
                Switch((35), (2))
            ) {
                SetDeaths((6), (8), 1, (97));
            }
            if (
                Deaths((5), (10), 5, (35)) && 
                Deaths((6), (0), 3, (97)) && 
                MemoryEPD(mi4vessel2p[getcurpl()] + 0x008 / 4, AtMost, 12799744) && 
                MemoryEPD(mi4vessel2p[getcurpl()] + 0x008 / 4, AtLeast, 25600) && 
                Switch((35), (2))
            ) {
                SetDeaths((6), (7), 0, (97));
                SetDeaths((5), (7), 6, (35));
                SetSwitch((66), (4));
            }
            if (
                Deaths((5), (10), 5, (35)) && 
                Deaths((5), (1), 999, (102)) && 
                Deaths((5), (0), 505, (102)) && 
                Switch((35), (2)) && 
                Bring((8), (0), 1, (76), (224))
            ) {
                bwrite_epd(mi4vessel2p[getcurpl()] + 0x04D / 4,  0x04D % 4, 1);
            }
            if (
                Deaths((5), (10), 5, (35)) && 
                Deaths((5), (1), 999, (102)) && 
                Deaths((5), (0), 505, (102)) && 
                Deaths((5), (1), 199, (218)) && 
                Deaths((5), (0), 100, (218)) && 
                Switch((35), (2)) && 
                Bring((6), (0), 1, (76), (224))
            ) {
                bwrite_epd(mi4vessel2p[getcurpl()] + 0x04D / 4,  0x04D % 4, 1);
            }
            if (
                Deaths((5), (10), 5, (35)) && 
                Deaths((5), (1), 999, (102)) && 
                Deaths((5), (0), 505, (102)) && 
                Deaths((5), (0), 100, (24)) && 
                Switch((35), (2)) && 
                Switch((55), (3)) && 
                MemoryEPD(mi4vessel2p[getcurpl()] + 0x008 / 4, AtLeast, 51201)
            ) {
                SetDeaths((5), (9), 100, (24));
                SetMemoryEPD(mi4vessel2p[getcurpl()] + 0x008 / 4, Add, -51200 * 1);
            }
            if (
                Deaths((5), (10), 5, (35)) && 
                Deaths((5), (1), 999, (102)) && 
                Deaths((5), (0), 505, (102)) && 
                Switch((37), (3))
            ) {
                SetSwitch((37), (4));
                bwrite(0x666778 + 14000 + 928 * 1, 16);
            }
            if (
                Deaths((5), (10), 5, (35)) && 
                Switch((35), (2)) && 
                Deaths((5), (1), 1072, (102)) && 
                Deaths((5), (0), 1049, (102)) && 
                Bring((6), (10), 0, (76), (224)) && 
                Bring((18), (10), 0, (76), (224)) && 
                Bring((8), (10), 0, (76), (224))
            ) {
                mi4vessel2p[getcurpl()] = epdread_epd(EPD(0x628438));
                CreateUnit(1, (76), (225), (6));
                SetInvincibility((4), (76), (6), (224));
            }
        }
    EUDEndPlayerLoop();
    EUDPlayerLoop()();
        if (getcurpl() == 0 || getcurpl() == 1 || getcurpl() == 2 || getcurpl() == 3 || getcurpl() == 4) {
            if (
                Deaths((5), (10), 5, (35)) && 
                Deaths((13), (10), 200, (173)) && 
                Bring((13), (0), 1, (0), (224)) && 
                MemoryEPD(marine[getcurpl()] + 0x008 / 4, AtLeast, 51201)
            ) {
                SetDeaths((13), (7), 0, (173));
                SetMemoryEPD(marine[getcurpl()] + 0x008 / 4, Add, -51200 * 1);
            }
            if (
                Deaths((5), (10), 5, (35)) && 
                Deaths((13), (10), 200, (173)) && 
                Bring((13), (0), 1, (0), (224)) && 
                MemoryEPD(marine[getcurpl()] + 0x008 / 4, AtMost, 51200)
            ) {
                SetDeaths((13), (7), 0, (173));
                SetDeaths((13), (7), 1, (0));
                KillUnit((0), (13));
            }
            if (
                Deaths((5), (10), 5, (35)) && 
                Deaths((13), (10), 400, (173)) && 
                Bring((13), (0), 1, (0), (224)) && 
                MemoryEPD(marine[getcurpl()] + 0x008 / 4, AtLeast, 102401)
            ) {
                SetDeaths((13), (7), 0, (173));
                SetMemoryEPD(marine[getcurpl()] + 0x008 / 4, Add, -102400 * 1);
            }
            if (
                Deaths((5), (10), 5, (35)) && 
                Deaths((13), (10), 400, (173)) && 
                Bring((13), (0), 1, (0), (224)) && 
                MemoryEPD(marine[getcurpl()] + 0x008 / 4, AtMost, 102400)
            ) {
                SetDeaths((13), (7), 395, (173));
                SetMemoryEPD(marine[getcurpl()] + 0x008 / 4, SetTo, 0);
            }
            if (
                Deaths((5), (10), 5, (35)) && 
                Deaths((13), (10), 395, (173)) && 
                Deaths((13), (0), 1, (103)) && 
                Bring((13), (0), 1, (0), (224)) && 
                MemoryEPD(marine[getcurpl()] + 0x008 / 4, AtMost, 0)
            ) {
                SetDeaths((13), (7), 0, (173));
                SetDeaths((13), (7), 1, (0));
                KillUnit((0), (13));
            }
            if (
                Deaths((5), (10), 5, (35)) && 
                Deaths((13), (10), 395, (173)) && 
                Deaths((13), (1), 0, (103)) && 
                Bring((13), (0), 1, (0), (224)) && 
                MemoryEPD(marine[getcurpl()] + 0x008 / 4, AtMost, 0)
            ) {
                SetDeaths((13), (7), 0, (173));
            }
            if (
                Deaths((5), (10), 5, (35)) && 
                Deaths((13), (10), 0, (135)) && 
                Deaths((13), (0), 800, (4)) && 
                Bring((13), (0), 1, (0), (224))
            ) {
                SetDeaths((13), (7), 795, (4));
                SetMemoryEPD(marine[getcurpl()] + 0x008 / 4, SetTo, 0);
            }
            if (
                Deaths((5), (10), 5, (35)) && 
                Deaths((13), (10), 795, (4)) && 
                Deaths((13), (0), 1, (103)) && 
                Bring((13), (0), 1, (0), (224)) && 
                MemoryEPD(marine[getcurpl()] + 0x008 / 4, AtMost, 0)
            ) {
                SetDeaths((13), (7), 0, (4));
                SetDeaths((13), (7), 1, (0));
                KillUnit((0), (13));
            }
            if (
                Deaths((5), (10), 5, (35)) && 
                Deaths((13), (10), 795, (4)) && 
                Deaths((13), (1), 0, (103)) && 
                Bring((13), (0), 1, (0), (224)) && 
                MemoryEPD(marine[getcurpl()] + 0x008 / 4, AtMost, 0)
            ) {
                SetDeaths((13), (7), 0, (4));
            }
            if (
                Deaths((5), (10), 5, (35)) && 
                Deaths((13), (0), 40, (102)) && 
                Bring((13), (0), 1, (0), (224)) && 
                MemoryEPD(marine[getcurpl()] + 0x008 / 4, AtLeast, 10241)
            ) {
                SetDeaths((13), (7), 0, (102));
                SetMemoryEPD(marine[getcurpl()] + 0x008 / 4, Add, -10240 * 1);
            }
            if (
                Deaths((5), (10), 5, (35)) && 
                Deaths((13), (0), 40, (102)) && 
                Bring((13), (0), 1, (0), (224)) && 
                MemoryEPD(marine[getcurpl()] + 0x008 / 4, AtMost, 10240)
            ) {
                SetDeaths((13), (7), 0, (102));
                SetDeaths((13), (7), 1, (0));
                KillUnit((0), (13));
            }
            if (
                Deaths((5), (10), 5, (35)) && 
                Deaths((13), (0), 40, (82)) && 
                Bring((13), (0), 1, (0), (224)) && 
                MemoryEPD(marine[getcurpl()] + 0x008 / 4, AtLeast, 10241)
            ) {
                SetDeaths((13), (7), 0, (82));
                SetMemoryEPD(marine[getcurpl()] + 0x008 / 4, Add, -10240 * 1);
            }
            if (
                Deaths((5), (10), 5, (35)) && 
                Deaths((13), (0), 40, (82)) && 
                Bring((13), (0), 1, (0), (224)) && 
                MemoryEPD(marine[getcurpl()] + 0x008 / 4, AtMost, 10240)
            ) {
                SetDeaths((13), (7), 0, (82));
                SetDeaths((13), (7), 1, (0));
                KillUnit((0), (13));
            }
            if (
                Deaths((5), (10), 5, (35)) && 
                Deaths((13), (0), 40, (204)) && 
                Bring((13), (0), 1, (0), (224)) && 
                MemoryEPD(marine[getcurpl()] + 0x008 / 4, AtLeast, 10241)
            ) {
                SetDeaths((13), (7), 0, (204));
                SetMemoryEPD(marine[getcurpl()] + 0x008 / 4, Add, -10240 * 1);
            }
            if (
                Deaths((5), (10), 5, (35)) && 
                Deaths((13), (0), 40, (204)) && 
                Bring((13), (0), 1, (0), (224)) && 
                MemoryEPD(marine[getcurpl()] + 0x008 / 4, AtMost, 10240)
            ) {
                SetDeaths((13), (7), 0, (204));
                SetDeaths((13), (7), 1, (0));
                KillUnit((0), (13));
            }
            if (
                Deaths((5), (10), 5, (35)) && 
                Deaths((13), (0), 40, (77)) && 
                Bring((13), (0), 1, (0), (224)) && 
                MemoryEPD(marine[getcurpl()] + 0x008 / 4, AtLeast, 10241)
            ) {
                SetDeaths((13), (7), 0, (77));
                SetMemoryEPD(marine[getcurpl()] + 0x008 / 4, Add, -10240 * 1);
            }
            if (
                Deaths((5), (10), 5, (35)) && 
                Deaths((13), (0), 40, (77)) && 
                Bring((13), (0), 1, (0), (224)) && 
                MemoryEPD(marine[getcurpl()] + 0x008 / 4, AtMost, 10240)
            ) {
                SetDeaths((13), (7), 0, (77));
                SetDeaths((13), (7), 1, (0));
                KillUnit((0), (13));
            }
            if (
                Deaths((5), (10), 5, (35)) && 
                Deaths((13), (0), 40, (23)) && 
                Bring((13), (0), 1, (0), (224)) && 
                MemoryEPD(marine[getcurpl()] + 0x008 / 4, AtLeast, 10241) && 
                Switch((16), (3))
            ) {
                SetDeaths((13), (7), 0, (23));
                SetMemoryEPD(marine[getcurpl()] + 0x008 / 4, Add, -10240 * 1);
            }
            if (
                Deaths((5), (10), 5, (35)) && 
                Deaths((13), (0), 40, (23)) && 
                Bring((13), (0), 1, (0), (224)) && 
                MemoryEPD(marine[getcurpl()] + 0x008 / 4, AtMost, 10240) && 
                Switch((16), (3))
            ) {
                SetDeaths((13), (7), 0, (23));
                SetDeaths((13), (7), 1, (0));
                KillUnit((0), (13));
            }
            if (
                Deaths((5), (10), 5, (35)) && 
                Deaths((13), (10), 0, (135)) && 
                Deaths((13), (0), 200, (181)) && 
                Bring((13), (0), 1, (0), (224)) && 
                MemoryEPD(marine[getcurpl()] + 0x008 / 4, AtLeast, 25601)
            ) {
                SetDeaths((13), (7), 0, (181));
                SetMemoryEPD(marine[getcurpl()] + 0x008 / 4, Add, -25600 * 1);
            }
            if (
                Deaths((5), (10), 5, (35)) && 
                Deaths((13), (10), 0, (135)) && 
                Deaths((13), (0), 200, (181)) && 
                Bring((13), (0), 1, (0), (224)) && 
                MemoryEPD(marine[getcurpl()] + 0x008 / 4, AtMost, 25600)
            ) {
                SetDeaths((13), (7), 0, (181));
                SetDeaths((13), (7), 1, (0));
                KillUnit((0), (13));
            }
            if (
                Deaths((5), (10), 5, (35)) && 
                Deaths((5), (1), 999, (102)) && 
                Deaths((5), (0), 505, (102)) && 
                Deaths((6), (1), 5102, (135)) && 
                Deaths((6), (0), 5046, (135)) && 
                Switch((35), (2)) && 
                Deaths((13), (1), 50, (135)) && 
                Bring((13), (0), 1, (0), (224))
            ) {
                AddStatusFlagsEPD(marine[getcurpl()],0x800000);
            }
            if (
                Deaths((5), (10), 5, (35)) && 
                Deaths((5), (1), 999, (102)) && 
                Deaths((5), (0), 505, (102)) && 
                Deaths((6), (1), 5045, (135)) && 
                Switch((35), (2)) && 
                Deaths((13), (1), 50, (135)) && 
                Bring((13), (0), 1, (0), (224))
            ) {
                RemoveStatusFlagsEPD(marine[getcurpl()],0x800000);
            }
            if (
                Deaths((5), (10), 5, (35)) && 
                Deaths((5), (1), 999, (102)) && 
                Deaths((5), (0), 505, (102)) && 
                Deaths((6), (1), 5999, (135)) && 
                Deaths((6), (0), 5103, (135)) && 
                Switch((35), (2)) && 
                Deaths((13), (1), 50, (135)) && 
                Bring((13), (0), 1, (0), (224))
            ) {
                RemoveStatusFlagsEPD(marine[getcurpl()],0x800000);
            }
            if (
                Deaths((5), (10), 5, (35)) && 
                Deaths((13), (0), 50, (24)) && 
                Deaths((13), (10), 0, (135)) && 
                Bring((13), (0), 1, (0), (224)) && 
                MemoryEPD(marine[getcurpl()] + 0x008 / 4, AtLeast, 10241)
            ) {
                SetDeaths((13), (9), 50, (24));
                SetMemoryEPD(marine[getcurpl()] + 0x008 / 4, Add, -10240 * 1);
            }
            if (
                Deaths((5), (10), 5, (35)) && 
                Deaths((13), (0), 50, (24)) && 
                Deaths((13), (10), 0, (135)) && 
                Bring((13), (0), 1, (0), (224)) && 
                MemoryEPD(marine[getcurpl()] + 0x008 / 4, AtMost, 10240)
            ) {
                SetDeaths((13), (7), 0, (24));
                SetDeaths((13), (7), 1, (0));
                KillUnit((0), (13));
            }
            if (
                Deaths((5), (10), 5, (35)) && 
                Deaths((13), (0), 50, (202)) && 
                Deaths((13), (10), 0, (135)) && 
                Bring((13), (0), 1, (0), (224)) && 
                MemoryEPD(marine[getcurpl()] + 0x008 / 4, AtLeast, 5121)
            ) {
                SetDeaths((13), (9), 50, (202));
                SetMemoryEPD(marine[getcurpl()] + 0x008 / 4, Add, -5120 * 1);
            }
            if (
                Deaths((5), (10), 5, (35)) && 
                Deaths((13), (0), 50, (202)) && 
                Deaths((13), (10), 0, (135)) && 
                Bring((13), (0), 1, (0), (224)) && 
                MemoryEPD(marine[getcurpl()] + 0x008 / 4, AtMost, 5120)
            ) {
                SetDeaths((13), (7), 0, (202));
                SetDeaths((13), (7), 1, (0));
                KillUnit((0), (13));
            }
        }
    EUDEndPlayerLoop();
    EUDPlayerLoop()();
        if (getcurpl() == 4) {
            if (
                Deaths((5), (10), 5, (35)) && 
                Deaths((13), (0), 40, (23)) && 
                Bring((13), (0), 1, (0), (224)) && 
                MemoryEPD(marine[getcurpl()] + 0x008 / 4, AtLeast, 10241) && 
                Switch((16), (2))
            ) {
                SetDeaths((13), (7), 0, (23));
                SetMemoryEPD(marine[getcurpl()] + 0x008 / 4, Add, -10240 * 1);
                SetMemoryEPD(zazom[getcurpl()] + 0x008 / 4, Add, -10240 * 1);
                SetMemoryEPD(ultra[getcurpl()] + 0x008 / 4, Add, -10240 * 1);
                SetMemoryEPD(test1[getcurpl()] + 0x008 / 4, Add, -10240 * 1);
                SetMemoryEPD(test2[getcurpl()] + 0x008 / 4, Add, -10240 * 1);
            }
            if (
                Deaths((5), (10), 5, (35)) && 
                Deaths((13), (0), 40, (23)) && 
                Bring((13), (0), 1, (0), (224)) && 
                MemoryEPD(marine[getcurpl()] + 0x008 / 4, AtMost, 10240) && 
                Switch((16), (2))
            ) {
                SetDeaths((13), (7), 0, (23));
                SetDeaths((13), (7), 1, (0));
                KillUnitAt(All, (230), (224), (13));
            }
        }
    EUDEndPlayerLoop();
    EUDPlayerLoop()();
        if (getcurpl() == 5) {
            if (
                Deaths((5), (10), 5, (35)) && 
                Switch((16), (2)) && 
                Switch((76), (3))
            ) {
                SetSwitch((76), (4));
            }
            if (
                Deaths((5), (10), 5, (35)) && 
                Deaths((5), (0), 4, (192)) && 
                Switch((78), (3))
            ) {
                SetSwitch((78), (4));
                dwwrite(0x65FD00 + 17280 + 13 * 4, 0);
                dwwrite(0x65FD00 + 17280 + 38 * 4, 0);
            }
            if (
                Deaths((5), (10), 5, (35)) && 
                Switch((16), (2)) && 
                Switch((35), (2)) && 
                Deaths((5), (1), 999, (102)) && 
                Deaths((5), (0), 505, (102)) && 
                Deaths((6), (10), 0, (227)) && 
                MemoryX(0x596A18 + 73, AtLeast, 1, 1 << (8 * (73 % 4)))
            ) {
                SetMemoryEPD(mi4vessel2p[getcurpl()] + 0x008 / 4, SetTo, 140799744);
            }
            if (
                Deaths((5), (10), 5, (35)) && 
                Switch((35), (2)) && 
                Deaths((5), (1), 999, (102)) && 
                Deaths((5), (0), 505, (102)) && 
                Deaths((6), (1), 12, (135)) && 
                Deaths((6), (1), 1084, (75)) && 
                Deaths((6), (10), 0, (227)) && 
                MemoryEPD(mi4vessel2p[getcurpl()] + 0x008 / 4, AtMost, 140799744)
            ) {
                SetDeaths((6), (7), 1000, (227));
            }
            if (
                Deaths((5), (10), 5, (35)) && 
                Switch((35), (2)) && 
                Deaths((5), (1), 999, (102)) && 
                Deaths((5), (0), 505, (102)) && 
                Deaths((5), (1), 6035, (38)) && 
                Deaths((5), (0), 6000, (38)) && 
                Switch((89), (3))
            ) {
                SetSwitch((89), (4));
                bwrite(0x666778 + 14000 + 981 * 1, 16);
            }
            if (
                Deaths((5), (10), 5, (35)) && 
                Switch((35), (2)) && 
                Deaths((5), (1), 999, (102)) && 
                Deaths((5), (0), 505, (102)) && 
                Deaths((5), (1), 5999, (38)) && 
                Switch((89), (2))
            ) {
                SetSwitch((89), (5));
                bwrite(0x666778 + 14000 + 981 * 1, 9);
            }
            if (
                Deaths((5), (10), 5, (35)) && 
                Switch((35), (2)) && 
                Deaths((5), (1), 999, (102)) && 
                Deaths((5), (0), 505, (102)) && 
                Switch((97), (2))
            ) {
                SetSwitch((97), (5));
                bwrite(0x666778 + 14000 + 58 * 1, 13);
            }
            if (
                Deaths((5), (10), 5, (35)) && 
                Switch((35), (2)) && 
                Deaths((5), (1), 999, (102)) && 
                Deaths((5), (0), 505, (102)) && 
                Switch((98), (2))
            ) {
                SetSwitch((98), (5));
                bwrite(0x666778 + 14000 + 58 * 1, 0);
            }
        }
    EUDEndPlayerLoop();
    EUDPlayerLoop()();
        if (getcurpl() == 5) {
            if (
                Deaths((5), (10), 6, (35)) && 
                Deaths((5), (1), 2099, (102)) && 
                Deaths((5), (0), 2054, (102)) && 
                Switch((67), (3))
            ) {
                SetSwitch((67), (4));
                bwrite(0x65FD00 + 13624 + 46 * 1, 6);
            }
            if (
                Deaths((5), (10), 6, (35)) && 
                Deaths((5), (1), 2499, (102)) && 
                Deaths((5), (0), 2400, (102)) && 
                Switch((68), (3))
            ) {
                SetSwitch((68), (4));
                bwrite(0x65FD00 + 13624 + 46 * 1, 9);
            }
        }
    EUDEndPlayerLoop();
}
